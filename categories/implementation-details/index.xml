<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>implementation-details on SoByte</title>
    <link>https://www.sobyte.net/categories/implementation-details/</link>
    <description>Recent content in implementation-details on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Oct 2021 22:56:27 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/categories/implementation-details/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unsafe and ByteBuffer things</title>
      <link>https://www.sobyte.net/post/2021-10/unsafe-bytebuffer/</link>
      <pubDate>Tue, 19 Oct 2021 22:56:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/unsafe-bytebuffer/</guid>
      <description>Starting with the constructor of DirectBuffer The off-heap memory opened by DirectBuffer is actually allocated through Unsafe, take a look at the constructor of DirectBuffer.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  DirectByteBuffer(int cap) { // package-private  super(-1, 0, cap, cap); boolean pa = VM.isDirectMemoryPageAligned(); int ps = Bits.pageSize(); long size = Math.</description>
    </item>
    
    <item>
      <title>Golang - About Pointers and Performance</title>
      <link>https://www.sobyte.net/post/2021-10/go-pointer/</link>
      <pubDate>Sun, 17 Oct 2021 15:04:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/go-pointer/</guid>
      <description>A pointer is an address value that points to the start of an area of memory. So you need to have a good knowledge of computer composition principles. Generally speaking, it is important to maintain a deep memory of what is told in this course and then accumulate it day by day to really reach an understanding.
The concept of a pointer in a high-level language is not fundamentally different from a pointer on a low-level interface.</description>
    </item>
    
    <item>
      <title>golang from kernel to epoll</title>
      <link>https://www.sobyte.net/post/2021-10/golang-from-kernel-to-epoll/</link>
      <pubDate>Sun, 17 Oct 2021 14:41:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/golang-from-kernel-to-epoll/</guid>
      <description>Basic implementation of linux networking In the TCP/IP network hierarchy model, the entire protocol stack is divided into physical layer, link layer, network layer, transport layer, and application layer. The physical layer corresponds to the grid card and the grid line, and the application layer corresponds to various applications such as Nginx, FTP, etc. Linux implements the link layer, the grid layer, and the transport layer. In the Linux kernel</description>
    </item>
    
    <item>
      <title>Talk about some tips for using Unsafe</title>
      <link>https://www.sobyte.net/post/2021-10/java-unsafe/</link>
      <pubDate>Fri, 15 Oct 2021 20:55:19 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/java-unsafe/</guid>
      <description>I remember when I first learned Java, just after learning the syntax basics, I came across reflection, a feature provided by Java, although it seems to be a very basic knowledge point now, but at that time, I was undoubtedly excited, and I instantly felt that I was out of the &amp;ldquo;Java beginner&amp;rdquo; team. As I gained experience, I gradually learned a lot of similar points that I was excited about, and the Unsafe technique was definitely one of them.</description>
    </item>
    
    <item>
      <title>Notes on using HeapByteBuffer for in-heap memory</title>
      <link>https://www.sobyte.net/post/2021-10/heapbytebuffer-notes/</link>
      <pubDate>Fri, 08 Oct 2021 17:44:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/heapbytebuffer-notes/</guid>
      <description>Today we share a pitfall that many people tend to step in: the use of HeapByteBuffer.
ByteBuffer has two main implementation classes
 HeapByteBuffer In-heap memory DirectByteBuffer Off-heap memory  In my personal experience, I tend to use DirectByteBuffer in most cases, both for read and write operations, mainly because HeapByteBuffer may have some unexpected internal operations when interacting with FileChannel, which is the caveat mentioned in the title of this article, so let&amp;rsquo;s sell it here.</description>
    </item>
    
    <item>
      <title>More than 100,000 words of detailed analysis of the implementation principle of Stream in the JDK</title>
      <link>https://www.sobyte.net/post/2021-10/stream-of-jdk/</link>
      <pubDate>Wed, 06 Oct 2021 22:20:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/stream-of-jdk/</guid>
      <description>Prerequisites Stream was first introduced in JDK1.8, nearly 8 years ago (JDK1.8 was released at the end of 2013), and the introduction of Stream greatly simplified some development scenarios, but on the other hand, it may have reduced the readability of the code (it is true that many people say that Stream will reduce the readability of the code, but in my opinion, the readability of the code is improved</description>
    </item>
    
    <item>
      <title>Analyzing Netty Traffic Control from Occasional Downtime Events</title>
      <link>https://www.sobyte.net/post/2021-09/netty-traffic-control/</link>
      <pubDate>Fri, 24 Sep 2021 15:13:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/netty-traffic-control/</guid>
      <description>Business Background A large number of messages are currently used in mobile usage scenarios. Push messages can help operators achieve operational goals more efficiently (such as pushing marketing campaigns to users or alerting new APP features). For the push system needs to have the following two characteristics. Messages are delivered to users in seconds with no latency, support for millions of pushes per second, and millions of long connections on</description>
    </item>
    
    <item>
      <title>Detailed Guide to Web Page Sub-resource Integrity Checks</title>
      <link>https://www.sobyte.net/post/2021-09/web-page-resource-integrity-checks/</link>
      <pubDate>Fri, 24 Sep 2021 15:00:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/web-page-resource-integrity-checks/</guid>
      <description>About Subresource Integrity (subresource integrity) If you don&amp;rsquo;t pay much attention to web security, you may not have heard of this term. I believe that after reading this article, you will be able to gain a deeper understanding of what SRI is, why you should use SRI, and how to practice using SRI in your projects if you have a need for it. What SRI is and what it solves</description>
    </item>
    
    <item>
      <title>golang netpoll Explained</title>
      <link>https://www.sobyte.net/post/2021-09/golang-netpoll/</link>
      <pubDate>Fri, 24 Sep 2021 11:24:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/golang-netpoll/</guid>
      <description>Computer io models are distinguished into a variety of, currently the most used is also nio, epoll, select. Combining different scenarios with different io models is the right solution. Network io in golang golang is naturally suited for concurrency, why? One is the lightweight concurrency, and the other is the abstraction of complex io, which simplifies the process. For example, if we simply access an http service, a few simple</description>
    </item>
    
    <item>
      <title>How is the Go generic implemented?</title>
      <link>https://www.sobyte.net/post/2021-08/how-is-go-generic-implemented/</link>
      <pubDate>Tue, 31 Aug 2021 21:27:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/how-is-go-generic-implemented/</guid>
      <description>You can use generics in Go 1.17. The current master branch, by default, already supports generics, so you don&amp;rsquo;t need to add the -G=3 parameter.
You can try the latest branch of go by following these steps:
1 2  go get golang.org/dl/gotip gotip download   Just use the gotip command instead of go when compiling your code.
With the release of Go 1.17, there have been a lot of articles on Go generics, but they are basically brief introductory articles.</description>
    </item>
    
    <item>
      <title>A brief look at the new Go 1.17 call statute</title>
      <link>https://www.sobyte.net/post/2021-08/go1-17-new-calling-convention/</link>
      <pubDate>Mon, 30 Aug 2021 21:33:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/go1-17-new-calling-convention/</guid>
      <description>Go 1.17 changed the long-standing stack-based calling convention. Before we can understand Go&amp;rsquo;s calling convention, we need to know what it is. The x86 calling convention is, in a nutshell, the language&amp;rsquo;s convention for passing parameters between functions. The caller knows what parameters to pass to the called function in what form and in what order, and the called function follows this convention to find the contents of the passed</description>
    </item>
    
    <item>
      <title>About Redisson Lock</title>
      <link>https://www.sobyte.net/post/2021-08/about-redisson-lock/</link>
      <pubDate>Mon, 09 Aug 2021 12:27:06 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/about-redisson-lock/</guid>
      <description>I wrote an article about the red lock implementation in Redis a long, long time ago, but in a production environment, the distributed lock component used in my projects has always been Redisson, a Java-based Redis client framework written with features of In-Memory Data Grid Redisson is a Java-based Redis client framework (Redis Java Client) with features of In-Memory Data Grid, which extends the basic data types of Redis with</description>
    </item>
    
    <item>
      <title>Node Event Loop</title>
      <link>https://www.sobyte.net/post/2021-08/node-event-loop/</link>
      <pubDate>Mon, 09 Aug 2021 11:30:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/node-event-loop/</guid>
      <description>JavaScript is single-threaded and asynchronous operations are particularly important.
Whenever you use functions outside the engine, you need to interact with the outside world, thus creating asynchronous operations. Because there are so many asynchronous operations, JavaScript has to provide a lot of asynchronous syntax. It&amp;rsquo;s like, some people get hit all the time, and they have to become very resilient, or they&amp;rsquo;re screwed.
Node&amp;rsquo;s asynchronous syntax is more complex than the browser&amp;rsquo;s, because it talks to the kernel and has to make a special library, libuv, to do this.</description>
    </item>
    
    <item>
      <title>Slice Principle Analysis</title>
      <link>https://www.sobyte.net/post/2021-08/slice-principle-analysis/</link>
      <pubDate>Fri, 06 Aug 2021 19:15:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/slice-principle-analysis/</guid>
      <description>As a Go novice, I&amp;rsquo;m curious to see any &amp;ldquo;weird&amp;rdquo; code; for example, I recently saw a few methods; the pseudo-code is as follows.
1 2 3 4 5 6 7 8  func FindA() ([]*T,error) { } func FindB() ([]T,error) { } func SaveA(data *[]T) error { } func SaveB(data *[]*T) error { }   I believe that most newcomers to Go are confused when they see this code, the most confusing of which is</description>
    </item>
    
    <item>
      <title>JavaScript&#39;s this Principle</title>
      <link>https://www.sobyte.net/post/2021-07/javascript-this-principle/</link>
      <pubDate>Sat, 24 Jul 2021 15:32:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/javascript-this-principle/</guid>
      <description>1. Origin of the problem One sign of understanding the JavaScript language is to understand the following two ways of writing, which may have different results.
1 2 3 4 5 6 7 8 9 10 11 12  var obj = { foo: function () {} }; var foo = obj.foo; // Writing Method I obj.foo() // Writing Method 2 foo()   In the above code, although obj.foo and foo point to the same function, the execution result may be different.</description>
    </item>
    
    <item>
      <title>The Type System of Javascript</title>
      <link>https://www.sobyte.net/post/2021-07/the-type-system-of-javascript/</link>
      <pubDate>Thu, 15 Jul 2021 10:20:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/the-type-system-of-javascript/</guid>
      <description>Overview The type judgment of JavaScript is a necessary part of the front-end engineers&#39; code every day, and every day they must write a if (a === &#39;xxx&#39;) or if (typeof a === &#39;object&#39;) similar type judgment statement, so mastering the type judgment of JavaScript is also a necessary skill for the front-end, the following will be from the type of JavaScript, type judgment and some internal implementation to give</description>
    </item>
    
    <item>
      <title>Android Surfaceview Source Code Analysis and Use</title>
      <link>https://www.sobyte.net/post/2021-07/android-surfaceview-source-code-analysis-and-use/</link>
      <pubDate>Wed, 14 Jul 2021 09:32:08 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/android-surfaceview-source-code-analysis-and-use/</guid>
      <description>SurfaceView is a special kind of view in Android. The biggest difference between it and TextView and Button is that it is not on the same view layer as its view container, and its UI display can be done in a separate thread, so the drawing of SurfaceView does not affect the main thread. surfaceView does not affect the main thread. Combining these features, SurfaceView is generally used to implement dynamic or complex images and animations.</description>
    </item>
    
    <item>
      <title>MySQL Crash Safe</title>
      <link>https://www.sobyte.net/post/2021-07/mysql-crash-safe/</link>
      <pubDate>Mon, 12 Jul 2021 10:03:24 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/mysql-crash-safe/</guid>
      <description>The MySQL master-slave architecture has been widely used, and the stability of the master-slave replication relationship is a constant concern.
MySQL 5.6 provides a new feature for master-slave replication stability: slave support crash-safe. This feature can solve the problem of relay_log.info bit inaccuracy caused by abnormal power failure in previous versions.
In this article, we will introduce this feature in terms of principle, parameters, and new issues.
Translated with www.DeepL.com/Translator (free version)</description>
    </item>
    
    <item>
      <title>Golang Context Source Code Analysis</title>
      <link>https://www.sobyte.net/post/2021-07/golang-context-source-code-analysis/</link>
      <pubDate>Mon, 05 Jul 2021 11:48:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/golang-context-source-code-analysis/</guid>
      <description>All source code analysis in this article is based on Go 1.16.4. 1. Context Introduction Context in the standard library is an interface with various implementations; Context was added to the standard library in Go 1.7 and is mainly used for setting deadlines, synchronizing signals, passing context request values, etc. across multiple Goroutines. Because of the need to pass signals across multiple Goroutines, multiple Contexts often need to be associated</description>
    </item>
    
    <item>
      <title>Go Reflect Performance</title>
      <link>https://www.sobyte.net/post/2021-07/go-reflect-performance/</link>
      <pubDate>Sat, 03 Jul 2021 16:24:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/go-reflect-performance/</guid>
      <description>Go reflect package provides the ability to get the type and value of an object at runtime, which can help us to abstract and simplify the code, achieve dynamic data acquisition and method invocation, improve development efficiency and readability, and make up for Go&amp;rsquo;s ability to handle data uniformly in the absence of generics.
With reflect, we can achieve the ability to get object types, object fields, object methods, get tag information of struct, dynamically create objects, whether objects implement specific interfaces, convert objects, get and set object values, call Select branches dynamically, etc.</description>
    </item>
    
    <item>
      <title>Go Channel vs Java BlockingQueue</title>
      <link>https://www.sobyte.net/post/2021-07/go-channel-vs-java-blockingqueue/</link>
      <pubDate>Fri, 02 Jul 2021 18:09:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/go-channel-vs-java-blockingqueue/</guid>
      <description>Recently, I was implementing two requirements and wanted to decouple them using a queue since there is no dependency between them; however, there is no readily available and concurrency-safe data structure in Go&amp;rsquo;s standard library; however, Go provides a more elegant solution, which is channel. Using Channel One of the major differences between Go and Java is the different concurrency model; Go uses the CSP (Communicating sequential processes) model; in</description>
    </item>
    
    <item>
      <title>Introduction to Spring Cloud Stream</title>
      <link>https://www.sobyte.net/post/2021-07/introduction-to-spring-cloud-stream/</link>
      <pubDate>Thu, 01 Jul 2021 11:27:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/introduction-to-spring-cloud-stream/</guid>
      <description>Spring Cloud Stream is used within the Spring Cloud architecture to build highly scalable, event-driven microservices.
There is a lot of content in Spring Cloud Stream itself and it has many external dependencies. To get familiar with Spring Cloud Stream, you need to know the following.
 Spring Framework(Spring Messaging, Spring Environment) Spring Boot Actuator Spring Boot Externalized Configuration Spring Retry Spring Integration Spring Cloud Stream  The purpose of this article is to introduce Spring Cloud Stream, and with so much knowledge, we will try to take you through Spring Cloud Steam in the simplest way possible (we will replace Spring Cloud Stream with SCS later).</description>
    </item>
    
    <item>
      <title>A pitfall of comparing empty structs in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/a-pitfall-of-comparing-empty-structs-in-golang/</link>
      <pubDate>Wed, 30 Jun 2021 19:09:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/a-pitfall-of-comparing-empty-structs-in-golang/</guid>
      <description>A reader recently encountered a new problem with struct that he could not solve. Examples of Doubt The example 1 it gives is as follows. 1 2 3 4 5 6 7 type People struct {} func main() { a := &amp;amp;People{} b := &amp;amp;People{} fmt.Println(a == b) } What do you think the output will be? The output is: false. With a little more modification, Example 2 is as</description>
    </item>
    
    <item>
      <title>Pitfalls of os.popen function and Pipe in Python</title>
      <link>https://www.sobyte.net/post/2021-06/pitfalls-of-os.popen-function-and-pipe-in-python/</link>
      <pubDate>Tue, 29 Jun 2021 13:00:11 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/pitfalls-of-os.popen-function-and-pipe-in-python/</guid>
      <description>I recently wrote a few simple scripts in Python to process some data, and since it&amp;rsquo;s just a simple function, I just use print to print the log. The task occasionally throws some exceptions when running. Because I have print logs in different places, the place where the error is reported is not quite the same every time, which leads to very strange results; sometimes this piece of code is</description>
    </item>
    
    <item>
      <title>Golang - Number of Threads in the Running Program</title>
      <link>https://www.sobyte.net/post/2021-06/golang-number-of-threads-in-the-running-program/</link>
      <pubDate>Tue, 29 Jun 2021 11:05:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/golang-number-of-threads-in-the-running-program/</guid>
      <description>Programmers who are a little bit introduced to the Go language know that the GOMAXPROCS variable can limit the maximum number of threads that can concurrently run the user-state Go code operating system, and you can even change the size of the maximum number of threads at program runtime by calling the function func GOMAXPROCS(n int) int, but when you read the documentation further, or more When you read the documentation further, or go deeper into Go language development, you will find that the actual number of threads is larger than the number you set, sometimes much larger than the value you set, and even more tragically, even when your concurrent tasks are backed up to no more than a few, the number of threads has not come down, wasting memory space and CPU scheduling for nothing.</description>
    </item>
    
    <item>
      <title>The Underlying Implementation of Annotations in the Jdk</title>
      <link>https://www.sobyte.net/post/2021-06/the-underlying-implementation-of-annotations-in-the-jdk/</link>
      <pubDate>Mon, 28 Jun 2021 10:45:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/the-underlying-implementation-of-annotations-in-the-jdk/</guid>
      <description>Using Java for several years, annotations are a common type, especially in some frameworks will be a lot of annotations to do component identification, configuration or strategy. But has not been deeply to explore the JDK annotations in the end what is the bottom is how to achieve? So refer to some information, to do a slightly more detailed analysis.
JDK annotations description Refer to JLS-9.6 inside JavaSE-8 for a description of the annotations as follows.</description>
    </item>
    
    <item>
      <title>Spring Master Slave Databas Configuration and Dynamic Datasource Switching Principles</title>
      <link>https://www.sobyte.net/post/2021-06/spring-master-slave-databas-configuration-and-dynamic-datasource-switching-principles/</link>
      <pubDate>Sun, 20 Jun 2021 15:13:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/spring-master-slave-databas-configuration-and-dynamic-datasource-switching-principles/</guid>
      <description>In large applications, it is a common design pattern to configure master-slave databases and use read-write separation. In Spring applications, to implement read-write separation, it is best to not make changes to existing code, but to support it transparently at the bottom.
Spring has a built-in AbstractRoutingDataSource that can configure multiple data sources into a Map and then, depending on the key, return different data sources. Because AbstractRoutingDataSource is also a DataSource interface, the application can set the key first, and the code that accesses the database can get the corresponding real data source from AbstractRoutingDataSource to access the specified database.</description>
    </item>
    
    <item>
      <title>Tcp Network Programming Best Practices</title>
      <link>https://www.sobyte.net/post/2021-06/tcp-network-programming-best-practices/</link>
      <pubDate>Mon, 14 Jun 2021 11:29:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/tcp-network-programming-best-practices/</guid>
      <description>This article is based on years of TCP network programming experience of youzan middleware team. The purpose of this article is to avoid various unintended behaviors of applications due to various network anomalies, which can cause unintended effects and affect system stability and reliability. This document does not cover the basics of TCP, but mainly summarizes some of the problems that may be encountered in TCP network programming practice, as</description>
    </item>
    
    <item>
      <title>Several Cases of Goroutine Leaks in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/several-cases-of-goroutine-leaks-in-golang/</link>
      <pubDate>Mon, 14 Jun 2021 10:34:56 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/several-cases-of-goroutine-leaks-in-golang/</guid>
      <description>Goroutine 1 2 3  for { go func() {}() }   The threshold for using Goroutine is really low, and there are a lot of abuses.
Goroutine Leak The causes of Goroutine leaks are usually:
 Read/write operations such as channel/mutex are being performed inside Goroutine, but due to logic problems, they are blocked all the time in some cases. The business logic within the Goroutine enters a dead loop and resources are never released.</description>
    </item>
    
    <item>
      <title>Const in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/const-in-golang/</link>
      <pubDate>Mon, 14 Jun 2021 09:44:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/const-in-golang/</guid>
      <description>Constants are arguably present in every code file, and there are many benefits to using them.
 Avoid magic literals, i.e. numbers, strings, etc. that appear directly in the code. It is not possible to read the code and see what it means at a glance. It also avoids the inconsistencies that can occur when using literals. When their values need to be modified, constants only need to be modified in one place, while literals need to be modified in multiple places, making it easy to miss inconsistencies.</description>
    </item>
    
    <item>
      <title>Exploring the React Native Startup Version Checking Mechanism</title>
      <link>https://www.sobyte.net/post/2021-06/exploring-the-react-native-startup-version-checking-mechanism/</link>
      <pubDate>Sun, 13 Jun 2021 18:22:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/exploring-the-react-native-startup-version-checking-mechanism/</guid>
      <description>Colleague&amp;rsquo;s feedback React Native project startup reported an error indicating version mismatch, the error screenshot is as follows.
After some troubleshooting, we finally found that the old version of js file was packed locally, and the project itself depends on a different version, so we can delete the old version of the local file.
We can find out that RN has a version check at startup through this error, how is the specific mechanism, let&amp;rsquo;s follow the source code together.</description>
    </item>
    
    <item>
      <title>Redis Expired Key Removal Policy</title>
      <link>https://www.sobyte.net/post/2021-06/redis-expired-key-removal-policy/</link>
      <pubDate>Sun, 13 Jun 2021 17:20:41 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/redis-expired-key-removal-policy/</guid>
      <description>Redis stores key-value pairs, where the keys are strings and the values are of various types, such as string, list, hash, set, sorted set, and so on. When setting a key-value pair, we should also set the expiration time for it, which can be set by expire and pexpire commands, or by setnx command. So, after setting the expiration time, how exactly do you delete the expired key-value pairs? To find out, let&amp;rsquo;s take a look at Redis&#39; expired key deletion policy.</description>
    </item>
    
  </channel>
</rss>
