<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on SoByte</title>
    <link>https://www.sobyte.net/categories/web/</link>
    <description>Recent content in web on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 Oct 2021 21:10:49 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/categories/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSS content&#39;s new replacement element specification behavior explained</title>
      <link>https://www.sobyte.net/post/2021-10/css-content-url/</link>
      <pubDate>Fri, 15 Oct 2021 21:10:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/css-content-url/</guid>
      <description>Can a normal element become a replacement element By replacement elements, we usually mean elements such as images, videos, etc., corresponding to HTML tags &amp;lt;img&amp;gt; and &amp;lt;video&amp;gt;, while elements such as &amp;lt;div&amp;gt;, &amp;lt;p&amp;gt;, &amp;lt;span&amp;gt;, etc., which are normally used for layout, are non-replacement elements. In fact, from 2019 onwards, the above rule has become inaccurate, or a rule that only holds under constraints. In other words, elements such as &amp;lt;div&amp;gt;,</description>
    </item>
    
    <item>
      <title>In-depth understanding of the HTML slot element</title>
      <link>https://www.sobyte.net/post/2021-09/html-slot-dom/</link>
      <pubDate>Sun, 26 Sep 2021 18:06:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/html-slot-dom/</guid>
      <description>Whether it is an instance component or an HTML component, passing parameters is inevitable. In the case of the Web Components component, for example, if we want to pass width and height, we can use custom width or height properties, e.g., passing parameters is inevitable for both example components and HTML components. In the case of a Web Components component, for example, to pass width and height, we can use</description>
    </item>
    
    <item>
      <title>Trigger file uploads without using file type inputs</title>
      <link>https://www.sobyte.net/post/2021-08/file-system-access-api/</link>
      <pubDate>Sun, 22 Aug 2021 12:52:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/file-system-access-api/</guid>
      <description>Review the old and know the new Traditionally, file uploads on the web are done using a file type form input box.
1  &amp;lt;input type=&amp;#34;file&amp;#34;&amp;gt;   We can specify the type of file to be selected with the accept property, the directory property specifies whether a folder can be selected, and the capture property specifies the front or rear camera.
It&amp;rsquo;s still very powerful.
But the file input box has the fatal disadvantage that the UI is too ugly and not customizable.</description>
    </item>
    
    <item>
      <title>Safari does not support build-in custom elements for compatibility handling</title>
      <link>https://www.sobyte.net/post/2021-08/safari-buildin-custom-element-polyfill/</link>
      <pubDate>Tue, 17 Aug 2021 18:08:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/safari-buildin-custom-element-polyfill/</guid>
      <description>Safari browser does not support build-in custom elements, only anonymous custom elements.
Compatibility is shown in the following figure.
That is, Safari only supports the following HTML-formatted UI components by default.
1 2 3 4  &amp;lt;ui-tips&amp;gt;&amp;lt;/ui-tips&amp;gt; &amp;lt;ui-drop&amp;gt;&amp;lt;/ui-drop&amp;gt; &amp;lt;ui-tab&amp;gt;&amp;lt;/ui-tab&amp;gt; &amp;lt;ui-lighttip&amp;gt;&amp;lt;/ui-lighttip&amp;gt;   The following web components components, which extend on native HTML elements via the is attribute, are not supported.
1 2 3 4  &amp;lt;input is=&amp;#34;ui-color&amp;#34;&amp;gt; &amp;lt;select is=&amp;#34;ui-select&amp;#34;&amp;gt;&amp;lt;/select&amp;gt; &amp;lt;form is=&amp;#34;ui-form&amp;#34;&amp;gt;&amp;lt;/form&amp;gt; &amp;lt;table is=&amp;#34;ui-table&amp;#34;&amp;gt;&amp;lt;/table&amp;gt;   That&amp;rsquo;s a problem, otherwise great UI components are verbose and tedious when they can only be implemented using anonymous custom elements.</description>
    </item>
    
    <item>
      <title>Asm and Emscripten Tutorials</title>
      <link>https://www.sobyte.net/post/2021-08/asm-and-emscripten-tutorials/</link>
      <pubDate>Thu, 12 Aug 2021 10:18:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/asm-and-emscripten-tutorials/</guid>
      <description>Web technology has advanced by leaps and bounds, but there is one area that has been impossible to break through &amp;mdash;- games.
The performance requirements for games are so high that some large games struggle to run even on a PC, let alone in the sandbox model of a browser! However, despite the difficulties, many developers have never given up and want to make browsers run 3D games.
In 2012, Alon Zakai, an engineer at Mozilla, was working on the LLVM compiler and had the idea that many 3D games are written in C/C++, so if we could compile C/C++ into JavaScript code, they would run in the browser.</description>
    </item>
    
    <item>
      <title>Why is the HTML &lt;picture&gt; element so rarely used?</title>
      <link>https://www.sobyte.net/post/2021-08/html-picture/</link>
      <pubDate>Sat, 07 Aug 2021 19:17:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/html-picture/</guid>
      <description>The HTML &amp;lt;picture&amp;gt; element has been around for many years (it appeared in 2014), but it is rarely used, why? I have summarized the following 3 reasons. no one knows about it cumbersome to use it can be replaced This element is obviously very practical The HTML &amp;lt;picture&amp;gt; element is useful, and is often used in conjunction with the &amp;lt;source&amp;gt; element (which can be multiple) and the &amp;lt;img&amp;gt; element (which</description>
    </item>
    
    <item>
      <title>Interaction Between Pages - window.postMessage and BroadcastChannel Api</title>
      <link>https://www.sobyte.net/post/2021-07/interaction-between-pages-window-postmessage-and-broadcastchannel-api/</link>
      <pubDate>Fri, 23 Jul 2021 17:33:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/interaction-between-pages-window-postmessage-and-broadcastchannel-api/</guid>
      <description>In multi-page web applications, you will encounter scenarios of inter-page interaction, such as: passing data from navigation pages to iFrame pages, notifying events between tab pages, and so on.
This article introduces two common interfaces for inter-page interaction - window.postMessage and BroadcastChannel API - and compares the differences between them.
Messaging Direction window.postMessage An example of a window.postMessage call is as follows.
1 2 3  // A Page const B = window.</description>
    </item>
    
    <item>
      <title>Browser Database IndexedDB Getting Started Tutorial</title>
      <link>https://www.sobyte.net/post/2021-07/browser-database-indexeddb-getting-started-tutorial/</link>
      <pubDate>Sun, 18 Jul 2021 17:10:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/browser-database-indexeddb-getting-started-tutorial/</guid>
      <description>1. Overview With the increasing functionality of browsers, more and more websites are considering storing large amounts of data on the client side so that they can get less data from the server and get it directly from the local area. The existing browser data storage solutions are not suitable for storing large amounts of data: Cookie size is no more than 4KB and each request is sent back to</description>
    </item>
    
    <item>
      <title>Web Worker Tutorial</title>
      <link>https://www.sobyte.net/post/2021-07/web-worker-tutorial/</link>
      <pubDate>Tue, 13 Jul 2021 09:26:19 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/web-worker-tutorial/</guid>
      <description>1. Overview The JavaScript language uses a single-threaded model, which means that all tasks can only be done on one thread, one thing at a time. If the previous task is not done, the later task has to wait. With the increase in computing power of computers, especially with the advent of multi-core CPUs, single-threading poses a great inconvenience and cannot fully utilize the computing power of computers.
The role of the Web Worker is to create a multi-threaded environment for JavaScript, allowing the main thread to create Worker threads and assign some tasks to the latter to run.</description>
    </item>
    
    <item>
      <title>Web Components Getting Started Example Tutorial</title>
      <link>https://www.sobyte.net/post/2021-06/web-components-getting-started-example-tutorial/</link>
      <pubDate>Wed, 30 Jun 2021 11:46:28 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/web-components-getting-started-example-tutorial/</guid>
      <description>Components are the direction of front-end development, and the popular React and Vue are both component frameworks. Google has been pushing for native components for browsers due to its mastery of the Chrome browser, namely the Web Components API. Compared to third-party frameworks, native components are simple and straightforward, intuitive, don&amp;rsquo;t have to load any external modules, and have a small amount of code. It is still evolving, but is</description>
    </item>
    
    <item>
      <title>About Service Worker and Pwa</title>
      <link>https://www.sobyte.net/post/2021-06/about-service-worker-and-pwa/</link>
      <pubDate>Sun, 27 Jun 2021 18:18:13 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/about-service-worker-and-pwa/</guid>
      <description>Service Worker is a script that the browser runs in the background independent of the web page. A PWA (Progressive Web App) is a web application, but similar in look and feel to a native app. Before we talk about Service Worker and PWA, let&amp;rsquo;s take a brief look at what Web Worker is. Web Worker What is Web Worker? The Web Worker is a built-in thread in the browser</description>
    </item>
    
    <item>
      <title>Easily Print Web Pages And Generate Pdf Documents</title>
      <link>https://www.sobyte.net/post/2021-06/easily-print-web-pages-and-generate-pdf-documents/</link>
      <pubDate>Wed, 16 Jun 2021 16:32:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/easily-print-web-pages-and-generate-pdf-documents/</guid>
      <description>chromedp is a faster and simpler Go library that supports the Chrome DevTools Protocol, it is one of the most popular headless browser libraries, you can use it to do a lot of tasks that can only be performed through the browser, such as web screenshots, web rendering tests, downloading videos, simulating login, etc. Today Today I&amp;rsquo;m going to introduce a useful and simple feature: generating a pdf screenshot of</description>
    </item>
    
  </channel>
</rss>
