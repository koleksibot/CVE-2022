<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on SoByte</title>
    <link>https://www.sobyte.net/tags/golang/</link>
    <description>Recent content in golang on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 29 Mar 2022 10:48:51 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang http.Client&#39;s connection behavior control explained</title>
      <link>https://www.sobyte.net/post/2022-03/go-http-client-connection-control/</link>
      <pubDate>Tue, 29 Mar 2022 10:48:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-http-client-connection-control/</guid>
      <description>Go is known for its &amp;ldquo;self contained battery&amp;rdquo; and many developers are fond of the feature-rich standard library that comes with Go. Among the Go standard libraries, the net/http package is one of the most popular and commonly used packages, allowing us to generate a medium-performance http server with a few lines of code that supports large concurrency. http.Client is also the most widely used http client, and its performance</description>
    </item>
    
    <item>
      <title>The &#34;little trap&#34; of the Go standard library flag package</title>
      <link>https://www.sobyte.net/post/2022-03/pitfall-in-std-flag-pkg/</link>
      <pubDate>Tue, 29 Mar 2022 10:30:47 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/pitfall-in-std-flag-pkg/</guid>
      <description>The Go language is said to be &amp;ldquo;battery-included&amp;rdquo;, which means that the Go standard library is available out of the box, providing Gopher with a feature-rich set of common toolkits that are sufficient for most everyday development needs. In particular, the Go Standard Library toolkit is widely used in areas where the Go language excels. The following chart shows the results of the Official Go 2020 User Survey. We see</description>
    </item>
    
    <item>
      <title>Use the reflect package to read and write variables of all types in the reflection world</title>
      <link>https://www.sobyte.net/post/2022-03/golang-reflect/</link>
      <pubDate>Tue, 29 Mar 2022 09:54:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-reflect/</guid>
      <description>The reflection package provided by Go in the standard library gives Go programs the ability to reflect at runtime (reflection), but this reflection ability is also a &amp;ldquo;double-edged sword&amp;rdquo;, it has the advantage of solving a specific class of problems, but also brings a lack of logic, performance problems, and difficult to find problems and debug It also brings disadvantages such as unclear logic, performance problems, and difficulty in problem</description>
    </item>
    
    <item>
      <title>Things to know about the gRPC client</title>
      <link>https://www.sobyte.net/post/2022-03/golang-grpc/</link>
      <pubDate>Tue, 29 Mar 2022 09:22:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-grpc/</guid>
      <description>In the era of cloud-native and microservices-dominated architectural models, there are only two types of communication protocols used for internal service interactions: HTTP API (RESTful API) and RPC. With today&amp;rsquo;s hardware configurations and network conditions, modern RPC implementations generally perform better than HTTP API. We compare json over http with gRPC(insecure), using ghz and hey stress test the gRPC and json over http implementations. The performance of gRPC (Requests/sec: 59924.34)</description>
    </item>
    
    <item>
      <title>Go standard library http and fasthttp server-side performance comparison</title>
      <link>https://www.sobyte.net/post/2022-03/nethttp-vs-fasthttp/</link>
      <pubDate>Mon, 28 Mar 2022 20:30:31 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/nethttp-vs-fasthttp/</guid>
      <description>1. Background After writing the classic &amp;ldquo;hello, world&amp;rdquo; program, Go beginners may be eager to experience Go&amp;rsquo;s powerful standard library, for example, writing a fully functional web server like the following example in a few lines of code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // 来自https://tip.g</description>
    </item>
    
    <item>
      <title>Understanding Go escape analysis by example</title>
      <link>https://www.sobyte.net/post/2022-03/go-escape/</link>
      <pubDate>Mon, 28 Mar 2022 17:07:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-escape/</guid>
      <description>Most Gophers don&amp;rsquo;t really have to care about Go variable escape analysis, or can even ignore it. But if you&amp;rsquo;re using Go in a performance-sensitive domain, where you want to completely squeeze the performance out of your Go application, then understanding Go escape analysis can be very beneficial. In this article, we&amp;rsquo;ll take a look at understanding Go escape analysis together. 1. The problem to be solved by escape analysis</description>
    </item>
    
    <item>
      <title>Go project source code analysis with the help of functrace</title>
      <link>https://www.sobyte.net/post/2022-03/go-source-analysis-with-functrace/</link>
      <pubDate>Mon, 28 Mar 2022 10:52:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-source-analysis-with-functrace/</guid>
      <description>The daily life of a programmer cannot be separated from &amp;ldquo;source code reading and analysis&amp;rdquo;, and the daily reading of code can only be done in these ways (or a combination of them). Combining the powerful source code cross-indexing and jumping features provided by source code editors or IDEs to establish links between codes in a large source code base. running the code up, adding some print output to the</description>
    </item>
    
    <item>
      <title>A brief comparison of mainstream Kafka clients in the Go community</title>
      <link>https://www.sobyte.net/post/2022-03/the-comparison-of-the-go-community-leading-kakfa-clients/</link>
      <pubDate>Mon, 28 Mar 2022 09:57:23 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/the-comparison-of-the-go-community-leading-kakfa-clients/</guid>
      <description>I. Background As we all know, Kafka is a star open source project under the Apache Open Source Foundation. As an open source distributed event streaming platform, it is used by thousands of companies for high-performance data pipelines, stream analysis, data integration, and mission-critical applications. In China, large and small companies, whether they deploy their own or use Kafka cloud services like those provided by AliCloud, many Internet applications are</description>
    </item>
    
    <item>
      <title>Understanding Go Execution Tracer by Example</title>
      <link>https://www.sobyte.net/post/2022-03/go-execution-tracer-by-example/</link>
      <pubDate>Sun, 27 Mar 2022 16:52:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-execution-tracer-by-example/</guid>
      <description>Netflix&amp;rsquo;s performance architect Brendan Gregg in his book &amp;ldquo;BPF Performance Tools&amp;rdquo; gives a detailed description of tracing, sampling, and other concepts are described in detail to help developers understand these concepts and classify performance optimization aids based on these concepts and clarify their applicability. Some of them are cited here as follows. Sampling tools use a subset of measurements to paint a rough picture of the target; this is also</description>
    </item>
    
    <item>
      <title>Using go-metrics to add metrics to Go applications</title>
      <link>https://www.sobyte.net/post/2022-03/go-metrics/</link>
      <pubDate>Sun, 27 Mar 2022 16:32:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-metrics/</guid>
      <description>The Go language has a built-in expvar, and we can customize various metrics based on the support for basic metrics provided by expvar. But expvar only provides the lowest level of metric definition support, for some complex metric scenarios, third-party or self-implemented metrics packages are essential.
The go-metrics package is the most used metrics package in the Go domain, and it is an incomplete Go port of Coda Hale&amp;rsquo;s Metrics library, which is still very active in the Java community (I have to sigh: the Java ecosystem is really powerful).</description>
    </item>
    
    <item>
      <title>How to use the uber open source zap log library very well</title>
      <link>https://www.sobyte.net/post/2022-03/uber-zap-advanced-usage/</link>
      <pubDate>Sun, 27 Mar 2022 10:50:58 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/uber-zap-advanced-usage/</guid>
      <description>Logging has an important place in the back-end system. Not only can logs visualize the current running state of the program, but more importantly they can provide clues to developers when something goes wrong with the program. In the Go ecosystem, logrus is probably the most used Go logging library, which not only provides structured logs, but more importantly is compatible with the standard library log package at the api</description>
    </item>
    
    <item>
      <title>Figuring out the Golang plugin</title>
      <link>https://www.sobyte.net/post/2022-03/golang-plugin/</link>
      <pubDate>Sun, 27 Mar 2022 10:22:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-plugin/</guid>
      <description>To count the features in Go that I haven&amp;rsquo;t used yet, the go plugin introduced in Go 1.8 is one of them. Recently I wanted to design a plugin system for a gateway-type platform, so I thought of the go plugin ^_^. Go plugin supports compiling Go packages to be distributed separately as shared libraries (.so), and the main application can dynamically load these go plugins compiled as dynamic shared</description>
    </item>
    
    <item>
      <title>Go I/O multiplexing based TCP protocol stream parsing in practice</title>
      <link>https://www.sobyte.net/post/2022-03/go-multiplexing-tcp/</link>
      <pubDate>Sun, 27 Mar 2022 10:10:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-multiplexing-tcp/</guid>
      <description>In the article &amp;ldquo;Go Classical Blocking TCP Stream Parsing in Practice&amp;rdquo;, we implemented a custom TCP stream-based parsing protocol based on Go&amp;rsquo;s classical blocking I/O model. The advantage of this one-connection-per-goroutine model is that it is simple, well-written, and well-understood, reducing the mental burden on developers. However, once the number of connections is up, the number of goroutines increases linearly. When faced with a large number of connections, this model</description>
    </item>
    
    <item>
      <title>Go classical blocking TCP protocol stream parsing in practice</title>
      <link>https://www.sobyte.net/post/2022-03/go-block-tcp-parse/</link>
      <pubDate>Sun, 27 Mar 2022 09:48:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-block-tcp-parse/</guid>
      <description>1. Go&amp;rsquo;s TCP network programming model for classical blocking I/O The Go language has made rapid development over the past decade or so since its birth and has been widely accepted and used by developers around the world for a wide range of applications, including: Web services, databases, network programming, system programming, DevOps, security detection and control, data science, and artificial intelligence. The following are some of the results of</description>
    </item>
    
    <item>
      <title>When will variables caught by closures be recycled in Go?</title>
      <link>https://www.sobyte.net/post/2022-03/when-variables-captured-by-closures-are-recycled-in-go/</link>
      <pubDate>Sat, 26 Mar 2022 11:53:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/when-variables-captured-by-closures-are-recycled-in-go/</guid>
      <description>1. Go function closures The Go language provides native support for closures. In Go, closures are function literals. The Go specification interprets closures in the following way.
 function literals are closures: they can refer to variables defined in their wrapping function. These variables are then shared between the wrapping function and the function literals, and they continue to exist as long as they can be accessed.
 Closures have a wide range of applications in Go, most often used in conjunction with the go keyword to create a new goroutine, such as the following code from the net/http package in the standard library.</description>
    </item>
    
    <item>
      <title>Small company internal private Go module pulling solution</title>
      <link>https://www.sobyte.net/post/2022-03/private-go-module/</link>
      <pubDate>Sat, 26 Mar 2022 11:36:34 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/private-go-module/</guid>
      <description>1. The cause of the problem With the introduction of the Go module in Go 1.11, the Go command to pull the dependent public go module is no longer a &amp;ldquo;pain point&amp;rdquo;. This is shown in the figure below.
We only need to configure a public GOPROXY service for the environment variable GOPROXY within our company/organization to easily pull all public go modules (public mods are open source mods).
However, as the number of Go users in the company increases and the number of Go projects increases, the problem of &amp;ldquo;code duplication&amp;rdquo; arises.</description>
    </item>
    
    <item>
      <title>The first thing to do after switching to Go 1.18: replace all interfaces{} with any</title>
      <link>https://www.sobyte.net/post/2022-03/replace-empty-interface-with-any-first-after-switching-to-go-1-18/</link>
      <pubDate>Sat, 26 Mar 2022 10:53:41 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/replace-empty-interface-with-any-first-after-switching-to-go-1-18/</guid>
      <description>With the release of Go 1.18, many Gopher&amp;rsquo;s can&amp;rsquo;t wait to download the release and experience the new features! After Go 1.18 arrives, what is the first thing you want to do? Speaking of which, many people will ask: What meme is this? This meme comes from Russ Cox on December 1, 2021 a commit to the Go language project. As you can see from the commit log, the main</description>
    </item>
    
    <item>
      <title>How Go GC detects if a memory object contains a pointer</title>
      <link>https://www.sobyte.net/post/2022-03/how-gc-detect-pointer-in-mem-obj/</link>
      <pubDate>Sat, 26 Mar 2022 10:39:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/how-gc-detect-pointer-in-mem-obj/</guid>
      <description>As we all know, Go is a programming language with garbage collection (GC), so developers usually don&amp;rsquo;t need to think about memory management, which reduces the mental burden, and while the Go program is running, the GC is quietly working behind the scenes to do the &amp;ldquo;aftercare &amp;ldquo; for the developer: releasing the memory objects that can&amp;rsquo;t be reached periodically for subsequent reuse. GC only cares about pointer, as long</description>
    </item>
    
    <item>
      <title>Talking about engineering practices for Go application output logging</title>
      <link>https://www.sobyte.net/post/2022-03/go-logging-practice/</link>
      <pubDate>Fri, 25 Mar 2022 14:08:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-logging-practice/</guid>
      <description>Go is a back-end language that is known for developing various services, middleware and system platforms. When learning Go, logging is not indispensable or even unnecessary, but once we get to the real Go engineering practice, output logging is an inevitable problem we must face. Most of the services developed by Go have the property of continuous and autonomous operation, usually running 7×24 hours, and it is</description>
    </item>
    
    <item>
      <title>Why does the &#34;dependency hell&#34; problem persist with the Go module?</title>
      <link>https://www.sobyte.net/post/2022-03/dependency-hell-in-go/</link>
      <pubDate>Fri, 25 Mar 2022 13:46:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/dependency-hell-in-go/</guid>
      <description>If all Gophers abandoned the GOPATH build model and embraced the Go module build model, if all legacy Go package authors added go.mod to their legacy packages, and if all Go module authors adhered strictly to the semantic versioning (semver) specification, then Go would solve the &amp;ldquo;dependency hell&amp;rdquo; problem once and for all. But the reality is not so rosy! The &amp;ldquo;dependency hell problem&amp;rdquo; in Go still exists . In</description>
    </item>
    
    <item>
      <title>Does Go support incremental builds?</title>
      <link>https://www.sobyte.net/post/2022-03/golang-incremental-builds/</link>
      <pubDate>Fri, 25 Mar 2022 13:23:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-incremental-builds/</guid>
      <description>The Go language is known in the programmer community for its fast compilation speed. This is due to the fact that Go chose to abandon the header file inclusion mechanism of its C ancestor in favor of package as the basic unit of compilation, which makes dependency analysis very simple and avoids the huge overhead of analyzing dependencies through header files as in C. Three specific reasons for Go&amp;rsquo;s fast</description>
    </item>
    
    <item>
      <title>Is the result of the len(s) expression a constant or a variable?</title>
      <link>https://www.sobyte.net/post/2022-03/golang-len/</link>
      <pubDate>Fri, 25 Mar 2022 09:58:29 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-len/</guid>
      <description>len is a Go predefined identifier and also a Go built-in predefined function, through the go doc tool we can check the doc of the len function as follows. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $go doc builtin.len package builtin // import &amp;#34;builtin&amp;#34; func len(v Type) int The len built-in function returns the length of v, according to its type:</description>
    </item>
    
    <item>
      <title>Should I use 777 or 0777 for os.Chmod?</title>
      <link>https://www.sobyte.net/post/2022-03/0777-or-777/</link>
      <pubDate>Wed, 23 Mar 2022 17:44:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/0777-or-777/</guid>
      <description>Here&amp;rsquo;s the problem: I called os.Chmod(&amp;quot;test.txt&amp;quot;, 777) in the code, hoping to make the read/write and execute permissions of the file available to all users.
After executing the code, I used the command ls to look at the list of files by hand. Here is the list.
1 2  $ ls -l test.txt -r----x--x 1 cyhone 1085706827 0 Jun 20 13:27 test.txt   Surprisingly, the file permissions do not change to rwxrwxrwx as expected.</description>
    </item>
    
    <item>
      <title>Deep analysis of Golang sync.Pool underlying principles</title>
      <link>https://www.sobyte.net/post/2022-03/think-in-sync-pool/</link>
      <pubDate>Wed, 23 Mar 2022 17:11:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/think-in-sync-pool/</guid>
      <description>sync.Pool is Golang&amp;rsquo;s built-in object pooling technology, which can be used to cache temporary objects to avoid the consumption and pressure on GC caused by frequent creation of temporary objects. You can see sync.Pool used extensively in many well-known open source libraries. For example, the HTTP framework Gin uses sync.Pool to reuse the gin.Context object that is created with each request. sync.Pool can also be found in grpc-Go, kubernates, and</description>
    </item>
    
    <item>
      <title>Implementing a simple gRPC client using Golang</title>
      <link>https://www.sobyte.net/post/2022-03/golang-grcp-client/</link>
      <pubDate>Wed, 23 Mar 2022 09:14:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-grcp-client/</guid>
      <description>I recently mentioned the gRPC protocol in a discussion with a friend, and I&amp;rsquo;ve written about gRPC before. People usually use the official grpc library to communicate directly. But as far as I can see, most of them are Unary requests and very few are stream calls. Unary requests of gRPC are not much different from ordinary http/2 calls, so we can write a simple gRPC client by ourselves. Today,</description>
    </item>
    
    <item>
      <title>Zero-Copy Optimization in the Golang</title>
      <link>https://www.sobyte.net/post/2022-03/golang-zero-copy/</link>
      <pubDate>Tue, 22 Mar 2022 19:26:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-zero-copy/</guid>
      <description>Anyone familiar with the Go language should be familiar with interfaces and methods such as io.Copy()/io.CopyN()/io.CopyBuffer()/io.ReaderFrom. They are APIs that are often used to transfer data using Go to manipulate various types of I/O. The TCP-based socket makes use of Linux&amp;rsquo;s zero-copy technologies sendfile and splice when transferring data using these interfaces and methods.
splice After looking through Linux zero-copy techniques, splice is more suitable as a general-purpose zero-copy method than other techniques such as mmap, sendfile and MSG_ZEROCOPY in terms of cost, performance and applicability.</description>
    </item>
    
    <item>
      <title>Can you answer this Go question correctly?</title>
      <link>https://www.sobyte.net/post/2022-03/go-s-test-questions/</link>
      <pubDate>Mon, 21 Mar 2022 14:04:32 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-s-test-questions/</guid>
      <description>Bartłomiej Płotka, chief software engineer at Redhat and maintainer of projects such as Prometheus, asked a Go question on twitter with the following title.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  func aaa() (done func(), err error) { return func() { print(&amp;#34;aaa: done&amp;#34;) }, nil } func bbb() (done func(), _ error) { done, err := aaa() return func() { print(&amp;#34;bbb: surprise!</description>
    </item>
    
    <item>
      <title>Building and Using Go Private Packages</title>
      <link>https://www.sobyte.net/post/2022-03/building-and-using-go-private-packages/</link>
      <pubDate>Sun, 20 Mar 2022 12:19:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/building-and-using-go-private-packages/</guid>
      <description>1. Create a Go Modules project  Create a directory  1 2  mkdir go-test cd go-test    Initialization package  1 2 3 4 5  go mod init gitlab.private.com/shaowenchen/go-test go: creating new go.mod: module gitlab.private.com/shaowenchen/go-test go: to add module requirements and sums: go mod tidy    Add business code  main.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  package main import ( &amp;#34;github.</description>
    </item>
    
    <item>
      <title>Time and Time Zone in Go</title>
      <link>https://www.sobyte.net/post/2022-03/time-timezeon-tips/</link>
      <pubDate>Sun, 20 Mar 2022 10:57:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/time-timezeon-tips/</guid>
      <description>1. Time and Time Zone 1.1 Time standard UTC, Universal Time, is the current standard of time and is measured in atomic time.
GMT, Greenwich Mean Time, is the former time standard, which specifies that the sun passes the Royal Greenwich Observatory in the suburbs of London, England, at 12:00 noon each day.
UTC time is more accurate, but if accuracy is not required, the two standards can be considered equivalent.</description>
    </item>
    
    <item>
      <title>Go&#39;s distributed transaction framework - seata</title>
      <link>https://www.sobyte.net/post/2022-03/seata-golang/</link>
      <pubDate>Wed, 16 Mar 2022 11:03:59 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/seata-golang/</guid>
      <description>Seata Introduction Seata is a distributed transaction service open source by Ali , currently provides users with AT, TCC, SAGA, XA transaction mode , the overall use of a two-phase commit protocol. go version of seata-golang currently seems to implement only mysql AT, TCC mode , the author is not much updated now . Seata has several core roles. TC(Transaction Coordinator) - Transaction coordinator. (Maintains the state of global and</description>
    </item>
    
    <item>
      <title>Go Concurrency-working pool mode</title>
      <link>https://www.sobyte.net/post/2022-03/go-working-pool-mode/</link>
      <pubDate>Tue, 15 Mar 2022 09:41:31 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-working-pool-mode/</guid>
      <description>I read an article earlier: Handling 1 Million Requests per Minute with Go. Today I stumbled upon another article. The principle of the two articles is similar: there are a number of work tasks (jobs), through the work-pool (worker-pool) way, to achieve the effect of multiple worker concurrent processing job. There are still many differences between them, and the differences in implementation are quite big. Here is a picture, which</description>
    </item>
    
    <item>
      <title>Use of iota in Go</title>
      <link>https://www.sobyte.net/post/2022-03/go-iota/</link>
      <pubDate>Tue, 15 Mar 2022 09:31:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-iota/</guid>
      <description>Introduction The Go language doesn&amp;rsquo;t actually have direct support for the enumeration keyword. We generally implement enumeration capabilities via const + iota. One might ask, why do we have to use enums? There is a highly rated answer on stackoverflow. 1 2 3 4 5 You should always use enums when a variable (especially a method parameter) can only take one out of a small set of possible values. Examples</description>
    </item>
    
    <item>
      <title>How to Spoof Go Mod?</title>
      <link>https://www.sobyte.net/post/2022-03/gomod/</link>
      <pubDate>Tue, 15 Mar 2022 09:23:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/gomod/</guid>
      <description>Recently I was working on cortex optimization for prometheus ecosystem, and I came across a rather interesting go mod problem, which I&amp;rsquo;ll share here.
Why do I call the title: How to cheat Go mod? This is quite interesting, so I&amp;rsquo;ll sell it here, but it does break Go mod-related features.
Before we start this topic, we need to briefly introduce the cortex and thanos projects.
Limitations of Prometheus When it comes to business development, you can&amp;rsquo;t do without a monitoring system.</description>
    </item>
    
    <item>
      <title>Golang interface Principle - Type Conversion</title>
      <link>https://www.sobyte.net/post/2022-03/go-interface/</link>
      <pubDate>Tue, 15 Mar 2022 09:13:47 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-interface/</guid>
      <description>In this article, I&amp;rsquo;ll take a look at the interface from the internal degree assignment + assembly perspective, to understand how the interface works.
This article will focus on type conversions and related error-prone areas.
eface 1 2 3 4 5 6  func main() { var ti interface{} var a int = 100 ti = a fmt.Println(ti) }   This most common code now raises some questions.
 How to see if ti is eface or iface ?</description>
    </item>
    
    <item>
      <title>How Go timers are scheduled</title>
      <link>https://www.sobyte.net/post/2022-03/go-timer/</link>
      <pubDate>Tue, 15 Mar 2022 08:53:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-timer/</guid>
      <description>This article breaks down the content of Go timers. Timers are an important part of business development and infrastructure development, so you can see how important they are. AfterFun to initialize a timer, the timer will eventually be added to a global timer heap, which is managed by Go runtime. The global timer heap has undergone three major upgrades. Before Go 1.9, all timers were maintained by a globally unique</description>
    </item>
    
    <item>
      <title>Golang Common Concurrency Programming Tips</title>
      <link>https://www.sobyte.net/post/2022-03/golang-concurrency-programming-tips/</link>
      <pubDate>Fri, 11 Mar 2022 08:51:07 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-concurrency-programming-tips/</guid>
      <description>Golang was one of the first languages to incorporate the principles of CSP into its core and to introduce this style of concurrent programming to the general public.CSP refers to Communicating Sequential Processes, or communicating sequential processes, where each instruction needs to specify exactly whether it is an output variable (the case of reading a variable from a process), or a destination (in the case of sending input to a</description>
    </item>
    
    <item>
      <title>What is the Pause container</title>
      <link>https://www.sobyte.net/post/2022-03/what-is-pause-container/</link>
      <pubDate>Wed, 09 Mar 2022 10:23:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/what-is-pause-container/</guid>
      <description>We all know that the smallest unit of scheduling in k8s is the POD, and each POD has a so-called Infra container Pause, so what exactly is a Pause container? What does it look like? What does it do?
Analyze the source code From the official pause.c.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  #include &amp;lt;signal.</description>
    </item>
    
    <item>
      <title>Concurrency Safety for Go</title>
      <link>https://www.sobyte.net/post/2022-03/go-concurrency-safe/</link>
      <pubDate>Wed, 09 Mar 2022 09:39:13 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-concurrency-safe/</guid>
      <description>Concurrency safety is the most basic common sense, but also the most easily ignored premise, more test an engineer language fundamentals and code specification. Concurrent access to modify variables can lead to a variety of unpredictable results, the most serious is the program panic, such as the common go language map concurrent read/write panic. Let&amp;rsquo;s start with a few examples, the old cliché case, and</description>
    </item>
    
    <item>
      <title>The confusing socket udp connection problem</title>
      <link>https://www.sobyte.net/post/2022-03/golang-udp-connection-problem/</link>
      <pubDate>Wed, 09 Mar 2022 09:30:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/golang-udp-connection-problem/</guid>
      <description>The company&amp;rsquo;s internal golang middleware reported a UDP connection exception log, the problem is obvious, the service on the other side down. Restart it and it will be fine. But the question I&amp;rsquo;m wondering is how does udp detect when the other side is down? 1 2 3 4 5 6 7 err: write udp 172.16.44.62:62651-&amp;gt;172.16.0.46:29999: write: connection refused err: write udp 172.16.44.62:62651-&amp;gt;172.16.0.46:29999: write: connection refused err: write udp 172.16.44.62:62651-&amp;gt;172.16.0.46:29999:</description>
    </item>
    
    <item>
      <title>Go1.18 new features: efficient copy, strings, bytes standard library new Clone API</title>
      <link>https://www.sobyte.net/post/2022-03/go-string-bytes-clone/</link>
      <pubDate>Wed, 09 Mar 2022 09:13:36 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-string-bytes-clone/</guid>
      <description>Go1.18 will be released in a few weeks (March), and we have already updated several new version features, today we bring you a new optimization class that is related to strings and bytes standard library. Background Want to copy faster In everyday programming, bytes []byte are often copied. The following code needs to be written. 1 2 dup := make([]byte, len(data)) copy(dup, data) @Ilia Choly thinks this would be too</description>
    </item>
    
    <item>
      <title>Go Context Best Practices</title>
      <link>https://www.sobyte.net/post/2022-03/go-ctx-best-practice/</link>
      <pubDate>Tue, 08 Mar 2022 14:35:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-ctx-best-practice/</guid>
      <description>Usage Scenarios There are three main usage scenarios for Context
 Passing timeout information, which is most used. Passing signals, used for message notification, handling multi-process communication Passing data, commonly used in the framework layer trace-id, metadata  Let&amp;rsquo;s take an example of etcd watch to get a better understanding.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  func watch(ctx context.</description>
    </item>
    
    <item>
      <title>Using Mock and Interface for Golang Unit Testing</title>
      <link>https://www.sobyte.net/post/2022-03/use-mock-to-test/</link>
      <pubDate>Mon, 07 Mar 2022 15:46:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/use-mock-to-test/</guid>
      <description>In my work I often find that many engineers&#39; Golang unit tests are written in a problematic way, simply calling the code for output and including various IO operations, making it impossible to run the unit tests everywhere.
Golang Unit Testing with Mock and Interface This article explains how to do unit tests properly in Golang.
What is unit testing? Features of unit testing Unit testing is a very important part of quality assurance.</description>
    </item>
    
    <item>
      <title>Go doesn&#39;t need a Java-style GC</title>
      <link>https://www.sobyte.net/post/2022-03/go-does-not-need-a-java-style-gc/</link>
      <pubDate>Sun, 06 Mar 2022 16:41:32 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-does-not-need-a-java-style-gc/</guid>
      <description>Modern languages like Go, Julia and Rust don&amp;rsquo;t need a garbage collector as complex as the one used by Java c#. But why is that? We first need to understand how garbage collectors work and how the various languages differ in the way they allocate memory. First, let&amp;rsquo;s look at why Java needs such a complex garbage collector. This article will cover many different garbage collector topics. Why Java relies</description>
    </item>
    
    <item>
      <title>How to use docker buildx to build multi-architecture Go images</title>
      <link>https://www.sobyte.net/post/2022-03/building-multi-architecture-images-with-docker-buildx/</link>
      <pubDate>Thu, 03 Mar 2022 10:49:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/building-multi-architecture-images-with-docker-buildx/</guid>
      <description>Running applications on different operating systems and processor architectures is a common scenario, so it is a common practice to build separate distributions for different platforms. This is not easy to achieve when the platform we use to develop the application is different from the target platform for deployment. For example, developing an application on an x86 architecture and deploying it to a machine on an ARM platform usually requires preparing the ARM platform infrastructure for development and compilation.</description>
    </item>
    
    <item>
      <title>New proposal for Go language &#34;arena&#34;: optimizing memory allocation</title>
      <link>https://www.sobyte.net/post/2022-03/go-proposal-arena/</link>
      <pubDate>Tue, 01 Mar 2022 19:14:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-proposal-arena/</guid>
      <description>The Go language community is discussing a new proposal called &amp;ldquo;arena&amp;rdquo;.
According to the proposal, &amp;ldquo;Go arena&amp;rdquo; is used to optimize memory allocation. arena is a method of allocating a set of memory objects from contiguous memory regions, with the advantage that allocating objects from arena is generally more efficient than general memory allocation. More importantly, objects in arena can be released all at once with minimal memory management or garbage collection overhead.</description>
    </item>
    
    <item>
      <title>Go development team leader criticizes AWS article for being seriously misleading about Go</title>
      <link>https://www.sobyte.net/post/2022-02/rsc-critique-on-the-recent-aws/</link>
      <pubDate>Fri, 25 Feb 2022 09:22:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/rsc-critique-on-the-recent-aws/</guid>
      <description>The incident started with a blog post by AWS a few days ago: &amp;ldquo;Sustainability with Rust&amp;rdquo;.
In this article, AWS compares Rust and Go as examples. AWS believes the reason for this is that Go is a garbage collection (GC) language, so when objects are created and released, the garbage collector needs to stop the program every once in a while and run a garbage collection. When the garbage collector is running, the process cannot respond to requests.</description>
    </item>
    
    <item>
      <title>Go Modules - checksum mismatch error resolution</title>
      <link>https://www.sobyte.net/post/2022-02/checksum-mismatch-error/</link>
      <pubDate>Wed, 23 Feb 2022 10:13:07 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/checksum-mismatch-error/</guid>
      <description>Problem Description After executing go clean -modcache locally, executing go mod download gives the following error.
1 2 3 4  verifying git.xxx.com/neirong/app-framework@v0.7.8/go.mod: checksum mismatch downloaded: h1:/8A+C1sjRPdK/06I7b2egOVjo8+ECKV3vJ3Cqz5vEzc= go.sum: h1:7HfHuMOcinPkTDMNEf6Otcy4+TBvDQ/+f2UO0N23l3o= SECURITY ERROR   If you encounter a checksum mismatch error, delete go.sum, execute go clean -modcache, and then execute go mod download. That&amp;rsquo;s what I did, and after that, no more errors were reported. When I commit the new go.sum file to GitLab, I get the same error when I run it to lint.</description>
    </item>
    
    <item>
      <title>Implementation of jsonrpc2.0 in Go</title>
      <link>https://www.sobyte.net/post/2022-02/go-jsonrpc2.0/</link>
      <pubDate>Sat, 19 Feb 2022 12:22:00 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/go-jsonrpc2.0/</guid>
      <description>request Request can represent a request or notification from jsorpc2.0. 1 2 3 4 5 6 7 8 type Request struct { Method string `json:&amp;#34;method&amp;#34;` Params *json.RawMessage `json:&amp;#34;params,omitempty&amp;#34;` ID ID `json:&amp;#34;id&amp;#34;` Notif bool `json:&amp;#34;-&amp;#34;` Meta *json.RawMessage `json:&amp;#34;meta,omitempty&amp;#34;` } The Meta field is not specified in the jsonrpc spec, but is an aid to tracking context. The Notif field indicates whether it is a notification or not. The Params/Meta fields are</description>
    </item>
    
    <item>
      <title>The History of Version Control with Go: It Started with SVN and Ended with Git</title>
      <link>https://www.sobyte.net/post/2022-02/go-version-contro/</link>
      <pubDate>Fri, 18 Feb 2022 09:29:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/go-version-contro/</guid>
      <description>Go development team technical leader Russ Cox (rsc) post describes the history of version control for Go. The reason is that every once in a while, someone always uses the following code to indicate that the first commit of Go was in 1972.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  % git log --reverse --stat commit 7d7c6a97f815e9279d08cfaea7d5efb5e90695a8 Author: Brian Kernighan &amp;lt;bwk&amp;gt; AuthorDate: Tue Jul 18 19:05:45 1972 -0500 Commit: Brian Kernighan &amp;lt;bwk&amp;gt; CommitDate: Tue Jul 18 19:05:45 1972 -0500 hello, world R=ken DELTA=7 (7 added, 0 deleted, 0 changed) src/pkg/debug/macho/testdata/hello.</description>
    </item>
    
    <item>
      <title>Go Programming Patterns - Pipeline</title>
      <link>https://www.sobyte.net/post/2022-02/go-pipline/</link>
      <pubDate>Thu, 17 Feb 2022 09:52:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/go-pipline/</guid>
      <description>Flow line work models are common in industry, dividing the workflow into multiple segments, each with the right number of personnel depending on the intensity of the work. A good assembly line design tries to balance the flow rate of each step to maximize productivity.
Go is a practical language, and the pipeline work model is very well integrated with Go.
pipeline A pipeline consists of multiple links, specifically in Go, where the links communicate with each other via channels and the same link task can be processed by multiple goroutines at the same time.</description>
    </item>
    
    <item>
      <title>Complete mastery of Go math/rand</title>
      <link>https://www.sobyte.net/post/2022-02/go-math-rand/</link>
      <pubDate>Thu, 17 Feb 2022 09:41:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/go-math-rand/</guid>
      <description>Go Rand is a feature often used in development, but there are some pitfalls in it. This article will completely break down Go math/rand and make it easy for you to use Go Rand. First of all, a question: Do you think rand will panic ? Source Code Analysis The math/rand source code is actually quite simple, with just two important functions. 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>How to use higher-order function programming to improve the simplicity of your code</title>
      <link>https://www.sobyte.net/post/2022-02/go-higher-order-function/</link>
      <pubDate>Wed, 16 Feb 2022 15:12:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/go-higher-order-function/</guid>
      <description>Functions are first-class citizens of Go language. This article adopts a high-order function approach to abstract the query conditions for querying DB using gorm, abstracting various complex combinations of queries for multiple tables into a unified method and a configuration class, improving the simplicity and elegance of the code, and at the same time can improve the efficiency of developers. Background There is a DB table, and the business needs</description>
    </item>
    
    <item>
      <title>Go1.18 new feature: deprecate strings.Title method</title>
      <link>https://www.sobyte.net/post/2022-02/go-deprecate-strings-title/</link>
      <pubDate>Wed, 16 Feb 2022 09:33:21 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/go-deprecate-strings-title/</guid>
      <description>Recently, while reading Go1.18 Release Notes, I found that the Title method of the strings, bytes standard library has been deprecated. Why is this?
Introduction Here is an example of the strings standard library. The strings.Title method does the following: maps all Unicode letters at the beginning of a word to its Unicode title case.
The example is as follows.
1 2 3 4 5 6 7 8 9 10  import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main() { fmt.</description>
    </item>
    
    <item>
      <title>Go1.18 New feature: TryLock that has been tossed many times</title>
      <link>https://www.sobyte.net/post/2022-02/go-try-lock/</link>
      <pubDate>Mon, 14 Feb 2022 10:31:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/go-try-lock/</guid>
      <description>Proposing new features definitely involves user scenarios. When the time comes to 2018, @deanveloper mentions a classic loading scenario: several very large files need to be loaded and I want a progress bar to show how close I am to completion.
He considered that this progress bar could be well implemented using TryLock, and the following is his sample code:
1 2 3 4 5 6 7 8 9 10 11 12 13  func (b *ProgressBar) Add(n int) { atomic.</description>
    </item>
    
    <item>
      <title>Getting to Know the Power of Ast</title>
      <link>https://www.sobyte.net/post/2022-02/getting-to-know-the-power-of-ast/</link>
      <pubDate>Tue, 08 Feb 2022 10:24:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/getting-to-know-the-power-of-ast/</guid>
      <description>The abstract syntax tree is an intermediate product of the compilation process, and is generally just a simple thing to understand. But we can take the whole parser and ast package from Go and use it directly, which can be very powerful in some scenarios. What is ast? I took an excerpt from Wikipedia. In computer science, an Abstract Syntax Tree (AST), or Syntax tree for short, is an abstract</description>
    </item>
    
    <item>
      <title>Where did goexit come from?</title>
      <link>https://www.sobyte.net/post/2022-02/where-is-goexit-from/</link>
      <pubDate>Tue, 08 Feb 2022 10:08:47 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/where-is-goexit-from/</guid>
      <description>A colleague saw the puzzling goexit when debugging with dlv: what is the goexit function and why is it on top of go fun(){}()? It looks like an &amp;ldquo;exit&amp;rdquo; function, so why is it at the top?
In fact, if you have seen the pprof flame chart, you will often see the goexit function.
Let&amp;rsquo;s reproduce it with an example.
1 2 3 4 5 6 7 8 9 10 11  package main import &amp;#34;time&amp;#34; func main() { go func () { println(&amp;#34;hello world&amp;#34;) }() time.</description>
    </item>
    
    <item>
      <title>Understanding of non-addressability in Golang</title>
      <link>https://www.sobyte.net/post/2022-01/not-addressable-in-golang/</link>
      <pubDate>Sat, 29 Jan 2022 16:48:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/not-addressable-in-golang/</guid>
      <description>If you haven&amp;rsquo;t heard of Golang&amp;rsquo;s not addressable concept, it doesn&amp;rsquo;t matter, it literally means that you can&amp;rsquo;t get the address of a value. Let&amp;rsquo;s start with a simple example.
1 2 3 4 5 6 7 8  package main import &amp;#34;fmt&amp;#34; func main() { m := map[int]string{0: &amp;#34;hello&amp;#34;} fmt.Printf(&amp;#34;%p&amp;#34;, &amp;amp;m[0]) }   m is of type map[int]string and contains only one key-value pair. Printing the address of the value of this key-value pair directly compiles with the error: cannot take the address of m[0] , and cannot get the address of the value in map.</description>
    </item>
    
    <item>
      <title>Detailed analysis of the source code of Go sync.Mutex</title>
      <link>https://www.sobyte.net/post/2022-01/go-mutex/</link>
      <pubDate>Wed, 26 Jan 2022 10:44:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-mutex/</guid>
      <description>Introduction to Mutex The Mutex structure contains two fields. Field state: indicates the current state of the mutex lock. Field sema: is a semaphore variable to control blocking hibernation and wake-up of waiting goroutines. 1 2 3 4 type Mutex struct { state int32 sema uint32 } In version 1.9 of Go, in order to solve the waiting goroutine may have been unable to obtain the lock, the hunger mode</description>
    </item>
    
    <item>
      <title>Detailed analysis of the source code of Go sync.Pool</title>
      <link>https://www.sobyte.net/post/2022-01/go-sync-pool/</link>
      <pubDate>Wed, 26 Jan 2022 10:21:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-sync-pool/</guid>
      <description>Introduction to Pool Go is known to be an automatic garbage collection programming language that uses a three-color concurrent tagging algorithm to tag objects and recycle them. If you want to develop a high-performance application using Go, you have to consider the performance impact of garbage collection. Because Go has a STW (stop-the-world) time during garbage collection, and it takes time to mark objects if there are too many. So</description>
    </item>
    
    <item>
      <title>Detailed analysis of the Channel source code in Go</title>
      <link>https://www.sobyte.net/post/2022-01/go-channel-source-code/</link>
      <pubDate>Tue, 25 Jan 2022 14:25:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-channel-source-code/</guid>
      <description>chan introduction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import &amp;#34;fmt&amp;#34; func main() { c := make(chan int) go func() { c &amp;lt;- 1 // send to channel }() x := &amp;lt;-c // recv from channel fmt.Println(x) } We can view the assembly results like this. 1 2 3 4 go tool compile -N -l -S hello.go -N表示</description>
    </item>
    
    <item>
      <title>Thinking about memory alignment by WaitGroup in Go</title>
      <link>https://www.sobyte.net/post/2022-01/go-waitgroup-memory-alignment/</link>
      <pubDate>Tue, 25 Jan 2022 14:09:19 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-waitgroup-memory-alignment/</guid>
      <description>We all know how to use WaitGroup, but we also need to know how it is implemented, so that we can avoid the panic caused by incorrect use in the project as much as possible, and this article will also write about the memory alignment aspect to do a resolution, I hope you like it. WaitGroup Introduction WaitGroup provides three methods. 1 2 3 func (wg *WaitGroup) Add(delta int) func</description>
    </item>
    
    <item>
      <title>Explaining the Golang memory allocation implementation from source code</title>
      <link>https://www.sobyte.net/post/2022-01/go-memory-allocation/</link>
      <pubDate>Tue, 25 Jan 2022 10:52:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-memory-allocation/</guid>
      <description>Introduction The Go language&amp;rsquo;s memory allocator takes its cue from TCMalloc&amp;rsquo;s design for high-speed memory allocation. The core idea is to use a multi-level cache to sort objects by size and implement different allocation strategies by class. Information about TCMalloc can be found here: http://goog-perftools.sourceforge.net/doc/tcmalloc.html. If the object to be allocated is a small object (&amp;lt;= 32k), there is a lock-free cache of small objects in each thread that can</description>
    </item>
    
    <item>
      <title>Explaining the Golang I/O multiplexing netpoller model</title>
      <link>https://www.sobyte.net/post/2022-01/go-netpoller/</link>
      <pubDate>Tue, 25 Jan 2022 10:26:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-netpoller/</guid>
      <description>The Go source code directory structure and corresponding code files provide an insight into Go&amp;rsquo;s implementation of network I/O modes on different platforms. For example, it is based on epoll on Linux, kqueue on freeBSD, and iocp on Windows. Since our code is deployed on Linux, this article uses the epoll wrapper implementation as an example to explain the source code implementation of I/O multiplexing in Go. Introduction I/O multiplexing</description>
    </item>
    
    <item>
      <title>Implementation of the time wheel in the Golang</title>
      <link>https://www.sobyte.net/post/2022-01/go-timingwheel/</link>
      <pubDate>Mon, 24 Jan 2022 15:10:08 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-timingwheel/</guid>
      <description>Recently I had a requirement at work, which simply means that millions of timer tasks will be created in a short period of time, and the corresponding amounts will be added up when they are created to prevent overselling, and the data will need to be checked again after half an hour, and if the data does not match, the added amount will need to be subtracted back. This is</description>
    </item>
    
    <item>
      <title>Explaining the Golang dispatch loop source code implementation</title>
      <link>https://www.sobyte.net/post/2022-01/go-dispatch-loop/</link>
      <pubDate>Mon, 24 Jan 2022 14:39:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-dispatch-loop/</guid>
      <description>Overview When we think of &amp;ldquo;scheduling&amp;rdquo;, the first thing that comes to mind is the scheduling of processes and threads by the operating system. The operating system scheduler schedules multiple threads on the system to run on the physical CPU according to a certain algorithm. Although threads are relatively lightweight, they do have a large additional overhead when scheduling. Each thread takes up more than 1M of memory space, and</description>
    </item>
    
    <item>
      <title>Golang implementation of cuckoo filters</title>
      <link>https://www.sobyte.net/post/2022-01/go-cuckoo-filter/</link>
      <pubDate>Mon, 24 Jan 2022 11:56:28 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-cuckoo-filter/</guid>
      <description>Introduction In our work, if we encounter such things as web URL de-duplication, spam identification, or the determination of duplicate elements in a large collection, we usually think of saving all the elements in the collection and then determining them by comparison. If we use the best performance Hash table to make the determination, then as the number of elements in the collection increases, the storage space we need will</description>
    </item>
    
    <item>
      <title>The principle of timer implementation in Go and source code analysis</title>
      <link>https://www.sobyte.net/post/2022-01/go-timer-analysis/</link>
      <pubDate>Mon, 24 Jan 2022 11:41:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-timer-analysis/</guid>
      <description>Introduction Version 1.13 timers Go uses 64 minimal heaps until version 1.14. All timers created at runtime are added to the minimal heap, and timers created by each processor (P) are maintained by the corresponding minimal heap. The following is the source code for version 1.13 of runtime.time. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description>
    </item>
    
    <item>
      <title>Go language GC implementation principle and source code analysis</title>
      <link>https://www.sobyte.net/post/2022-01/go-gc/</link>
      <pubDate>Sun, 23 Jan 2022 16:02:01 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-gc/</guid>
      <description>20,000 words long article takes you from the source code to dissect the Go language GC implementation. Introduction Three-color marking method The three-color marking method divides the color of the object into three colors: black, gray, and white. Black: the object has been marked and all the properties under the object have been marked (the object required by the program). gray: the object has been marked, but the properties under</description>
    </item>
    
    <item>
      <title>Signal-based preemptive scheduling in Go dissected from source code</title>
      <link>https://www.sobyte.net/post/2022-01/go-scheduling/</link>
      <pubDate>Sun, 23 Jan 2022 12:15:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-scheduling/</guid>
      <description>Introduction Prior to 1.14 of Go, preemptive scheduling was collaborative and required self-initiated ceding of execution, but this could not handle edge cases that could not be preempted. Some of these problems were not solved until 1.14 by signal-based preemptive scheduling, such as for loops or garbage collection of long-running threads. Here is an example to verify the difference in preemption between 1.14 and 1.13. 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>How to compile and debug Go runtime source code</title>
      <link>https://www.sobyte.net/post/2022-01/go-runtime/</link>
      <pubDate>Sat, 22 Jan 2022 17:06:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-runtime/</guid>
      <description>Compile and modify Golang source code for debugging First download and compile I&amp;rsquo;m using a centos environment, so I need to install yum -y install gcc first. Then download the go source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [root@localhost src]# git clone https://github.com/golang/go.git #进入到src 目录执</description>
    </item>
    
    <item>
      <title>An article to help you understand stack operations in Go</title>
      <link>https://www.sobyte.net/post/2022-01/go-stack/</link>
      <pubDate>Sat, 22 Jan 2022 16:39:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-stack/</guid>
      <description>This article will teach you how to understand Go&amp;rsquo;s plan9 assembly through stack operations. Knowledge points Linux process in memory layout Each process in a multitasking operating system runs in its own memory sandbox. In 32-bit mode, it is always 4GB of memory address space, and memory allocation is to allocate virtual memory to processes. When a process actually accesses a virtual memory address, the OS allocates a corresponding space</description>
    </item>
    
    <item>
      <title>Understanding Go function calls from the stack</title>
      <link>https://www.sobyte.net/post/2022-01/go-func-call/</link>
      <pubDate>Sat, 22 Jan 2022 13:38:21 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-func-call/</guid>
      <description>This time together, we will understand common function calls, struct method calls, and closure calls in depth assembly from the stack perspective. Preamble Function call types Functions in this article refer to any executable block of code in Go. As mentioned in Go 1.1 Function Calls, there are four types of functions in Go. top-level func method with value receiver method with pointer receiver func literal top-level func is what</description>
    </item>
    
    <item>
      <title>In-depth implementation of the Go language defer principle</title>
      <link>https://www.sobyte.net/post/2022-01/go-defer-principle/</link>
      <pubDate>Sat, 22 Jan 2022 13:15:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-defer-principle/</guid>
      <description>This article explains the rules for executing defer and introduces the defer type. It explains how defer function calls are done, mainly through heap allocation. Introduction defer execution rules The order of execution of multiple defers is &amp;ldquo;Last In First Out LIFO &amp;quot; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( &amp;#34;fmt&amp;#34; ) func main() { name := &amp;#34;Naveen&amp;#34; fmt.Printf(&amp;#34;Original</description>
    </item>
    
    <item>
      <title>Go language implementation of Snowflake algorithm</title>
      <link>https://www.sobyte.net/post/2022-01/go-snowflakeid/</link>
      <pubDate>Sat, 22 Jan 2022 13:06:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-snowflakeid/</guid>
      <description>Introduction Sometimes in business, it is necessary to use some unique ID to record the identification of one of our data. The most common ones are none other than the following: UUID, database self-incrementing primary key, Redis&#39; Incr command, and other methods to get a unique value. Below we talk about the advantages and disadvantages of each of them in order to introduce our distributed snowflake algorithm. UUID First is</description>
    </item>
    
    <item>
      <title>How to build a high-performance Go caching library</title>
      <link>https://www.sobyte.net/post/2022-01/high-performance-go-caching-library/</link>
      <pubDate>Sat, 22 Jan 2022 12:01:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/high-performance-go-caching-library/</guid>
      <description>I was looking at some excellent open source libraries when I saw an interesting cache library fastcache, in its introduction mainly has the following characteristics: read and write data to be fast, even under concurrency. maintain good performance even in a cache of several gigabytes, as well as minimize the number of GCs. the design should be as simple as possible. This article will examine how its kernel achieves such</description>
    </item>
    
    <item>
      <title>A deep dive into each of the high-performance JSON parsing libraries in Go</title>
      <link>https://www.sobyte.net/post/2022-01/go-json/</link>
      <pubDate>Sat, 22 Jan 2022 11:41:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-json/</guid>
      <description>In fact, I had no intention of looking at the performance of JSON libraries, but I recently did a pprof on my project and found from the flame chart below that more than half of the performance consumption in business logic processing is in the JSON parsing process, so this article came about. This article dives into the source code to analyze how the standard library in Go parses JSON,</description>
    </item>
    
    <item>
      <title>Design and implementation of zap, a high-performance Go logging library</title>
      <link>https://www.sobyte.net/post/2022-01/go-log-zap/</link>
      <pubDate>Sat, 22 Jan 2022 11:25:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-log-zap/</guid>
      <description>Recently I&amp;rsquo;ve been learning how to make code run more efficiently in development, and while browsing through various good logging designs, I came across a logging library called zap from uber that caught my attention, with its main feature of extreme performance and memory allocation optimizations. For me, I was originally using logrus as log output in my project, but when I saw the benchmark of zap, I felt that</description>
    </item>
    
    <item>
      <title>Analysis of the Go language HTTP standard library</title>
      <link>https://www.sobyte.net/post/2022-01/go-http/</link>
      <pubDate>Fri, 21 Jan 2022 15:48:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-http/</guid>
      <description>This article looks at how the Go language HTTP standard library is implemented. The HTTP-based service standard model consists of two ends, a client (&amp;lsquo;Client&amp;rsquo;) and a server (&amp;lsquo;Server&amp;rsquo;). HTTP requests are sent from the client, and the server receives the request, processes it and returns the response to the client. So the job of the HTTP server is to accept requests from the client and return a response to</description>
    </item>
    
    <item>
      <title>How does endless achieve a non-stop restart of Go programs?</title>
      <link>https://www.sobyte.net/post/2022-01/endless-restart/</link>
      <pubDate>Fri, 21 Jan 2022 14:35:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/endless-restart/</guid>
      <description>For a non-stop restart of a Go program we need to address two issues. the process restart does not need to close the listening port. pre-existing requests should be fully processed or timeout. We&amp;rsquo;ll see how endless does both of these things later. Basic concepts The following is a brief introduction to two knowledge points for the content that follows. Signal handling Go signal notification works by sending the os.Signal</description>
    </item>
    
    <item>
      <title>Using Failpoint to inject faults in Go</title>
      <link>https://www.sobyte.net/post/2022-01/go-failpoint/</link>
      <pubDate>Fri, 21 Jan 2022 14:04:36 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-failpoint/</guid>
      <description>When I was looking at the TiDB source code recently, I found it very interesting that failpoint is used for fault injection. It uses code generation and code AST tree parsing and replacement to implement failpoint, I will also try to parse it to learn how to parse the AST tree to generate code. I will also try to parse it and learn how to parse the AST tree to</description>
    </item>
    
    <item>
      <title>Exploring Go-YCSB for database benchmarking</title>
      <link>https://www.sobyte.net/post/2022-01/go-ycsb/</link>
      <pubDate>Fri, 21 Jan 2022 13:12:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-ycsb/</guid>
      <description>Recently we have been doing a technical selection of databases and inevitably we need to do a benchmark test of the databases so that we can compare the performance of different databases across the board. Cloud Serving Benchmark (YCSB) is a tool developed by Yahoo for basic testing of cloud services. Redis, etc. As a go developer, we used the Go YCSB developed by pingcap for benchmarking purposes. Installation First</description>
    </item>
    
    <item>
      <title>Exploring what are the pitfalls of panic &amp; recover in Go source code?</title>
      <link>https://www.sobyte.net/post/2022-01/go-source-code-panic-and-recover/</link>
      <pubDate>Fri, 21 Jan 2022 10:06:23 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-source-code-panic-and-recover/</guid>
      <description>Preface The reason for writing this article is that a colleague at work recently wrote a Goroutine directly using the Go keyword, and then had a null pointer problem that caused the whole program to go down because there was no recover. The code looks like this. 1 2 3 4 5 6 7 8 9 10 11 12 13 func main() { defer func() { if err := recover();</description>
    </item>
    
    <item>
      <title>Golang Simple Architecture in Action</title>
      <link>https://www.sobyte.net/post/2022-01/go-simple-architecture/</link>
      <pubDate>Fri, 21 Jan 2022 09:16:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-simple-architecture/</guid>
      <description>Since golang does not have a uniform coding pattern like java, we, like the rest of the team, used some of the theory presented in the article Go Package Oriented Design and Architecture Layering and then combined it with our previous project experience to define the packge. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ├── cmd/</description>
    </item>
    
    <item>
      <title>New in Go 1.18: Multi-Module workspace mode</title>
      <link>https://www.sobyte.net/post/2022-01/go-multi-module/</link>
      <pubDate>Thu, 20 Jan 2022 10:15:08 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-multi-module/</guid>
      <description>Go&amp;rsquo;s dependency management, or Go Module, has been around for some years now, and has been the subject of much criticism and refinement. Go 1.18 will introduce a new feature, Multi-Module Workspaces, to support multiple workspaces for modules, which will solve a number of problems. Background When working with Go projects on a daily basis, there are 2 classic problems that are particularly tedious. They are as follows. relying on</description>
    </item>
    
    <item>
      <title>string and []byte conversion problem in golang</title>
      <link>https://www.sobyte.net/post/2022-01/go-string-bytes/</link>
      <pubDate>Wed, 19 Jan 2022 10:41:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-string-bytes/</guid>
      <description>Let&amp;rsquo;s look at the problematic code, similar string and []byte conversion code is very common on the web.
1 2 3 4 5 6 7 8  func StringToSliceByte(s string) []byte { l := len(s) return *(*[]byte)(unsafe.Pointer(&amp;amp;reflect.SliceHeader{ Data: (*(*reflect.StringHeader)(unsafe.Pointer(&amp;amp;s))).Data, Len: l, Cap: l, })) }   The reason why people don&amp;rsquo;t want to convert a string to a []byte directly via []byte(string) is because that would involve a memory copy, whereas a type conversion via unsafe.</description>
    </item>
    
    <item>
      <title>Notes on the use of Golang&#39;s defer keyword</title>
      <link>https://www.sobyte.net/post/2022-01/defer-keyword-in-golang/</link>
      <pubDate>Wed, 19 Jan 2022 10:30:58 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/defer-keyword-in-golang/</guid>
      <description>Golang provides the defer keyword to perform cleanup before a function exits. We won&amp;rsquo;t go into the basics of how to use it. Here&amp;rsquo;s a summary of some things to keep in mind. defer execution order 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import &amp;#34;fmt&amp;#34; func TestFunc() { defer func() { fmt.Println(&amp;#34;A&amp;#34;) }() defer</description>
    </item>
    
    <item>
      <title>Three new concepts related to interfaces since Go 1.18</title>
      <link>https://www.sobyte.net/post/2022-01/three-new-concepts-of-go-interface-since-1-18/</link>
      <pubDate>Tue, 18 Jan 2022 13:48:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/three-new-concepts-of-go-interface-since-1-18/</guid>
      <description>The meaning of Go&amp;rsquo;s interfaces has changed since Go 1.18, and there are three new concepts related to Go interfaces that many people are not aware of: type set, specific type and structural type. type set The type set is called a type set and is a new concept added to Go 1.18 for those who follow Go generics. Unlike Java, which requires a class to be defined explicitly to</description>
    </item>
    
    <item>
      <title>Implementing VIP functionality with Raft</title>
      <link>https://www.sobyte.net/post/2022-01/raft-vip/</link>
      <pubDate>Mon, 17 Jan 2022 13:33:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/raft-vip/</guid>
      <description>Background When deploying an application that is highly available, we usually place a HAProxy in front of the application so that when any one Server fails, the HAProxy will automatically switch over, but HAProxy also has a single point of failure, so we need more than one HAProxy to ensure that the business is not interrupted, and this time we need another software to work with: Keepalived. Keepalived is only</description>
    </item>
    
    <item>
      <title>Marshal serialization of numeric types such as int64 safely in Go</title>
      <link>https://www.sobyte.net/post/2022-01/golang-json/</link>
      <pubDate>Sat, 15 Jan 2022 11:58:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/golang-json/</guid>
      <description>Javascript&amp;rsquo;s base type (POD) and JSON actually have only one numeric type: Number. Number is usually represented by the 64-bit floating-point standard in IEEE-754 in mainstream browser implementations (i.e., double-precision floating-point), which represents valid numbers in the range \(-(2^{53} - 1)\) ~ \(2^{53} - 1\) . While 64-bit data types are often used in Go language, e.g., int64/uint64, such values are not safe to use in Javascript.
If you look at the JSON specification document, there is no limit to the number of bits, and any large value can be placed in JSON.</description>
    </item>
    
    <item>
      <title>A little research on the connection reuse problem caused by unread http.Response.Body</title>
      <link>https://www.sobyte.net/post/2022-01/golang-http-response-body/</link>
      <pubDate>Sat, 15 Jan 2022 11:40:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/golang-http-response-body/</guid>
      <description>In the source code of Golang&amp;rsquo;s HTTP library, the description of http.Response.Body is as follows. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Body represents the response body. // // The response body is streamed on demand as the Body field // is read. If the network connection fails or the server // terminates the response, Body.Read</description>
    </item>
    
    <item>
      <title>Simply defer file.Close() is probably a misuse</title>
      <link>https://www.sobyte.net/post/2022-01/golang-defer-file-close/</link>
      <pubDate>Sat, 15 Jan 2022 11:30:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/golang-defer-file-close/</guid>
      <description>The use of defer statements in Go can be considered as a language style or habit. But while convenience is convenient, being able to use the defer statement to delay closing/cleaning files without errors is not so easy to guarantee. Writing files and closing them For example, in the code related to Go language file operations, you can see code like the following everywhere. 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title> A problem with time and time zone resolution in Go</title>
      <link>https://www.sobyte.net/post/2022-01/golang-time/</link>
      <pubDate>Fri, 14 Jan 2022 13:37:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/golang-time/</guid>
      <description>Almost all examples of time resolution in Go take the full time including the date, and the official example is no exception. But few people have used the following code as an example to explain the behavior until the day the user makes a mistake.
Background of the problem Trying to get the user to enter a readable time as input from the terminal, but I find that I am parsing the input incorrectly.</description>
    </item>
    
    <item>
      <title>Using the Tokyo Cabinet Key/Value Database in Golang</title>
      <link>https://www.sobyte.net/post/2022-01/golang-tokyo-cabinet/</link>
      <pubDate>Fri, 14 Jan 2022 13:23:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/golang-tokyo-cabinet/</guid>
      <description>Tokyo Cabinet is an early KV database developed in C. It also supports a wide range of data structures, mainly for its fast read and write performance at certain levels of data volume.
Tokyo Cabinet data structure.
Here is a simple read/write comparison with goleveldb and boltdb, using Tokyo Cabinet&amp;rsquo;s Hash data structure.
10 data tests 1 2 3 4 5 6 7 8 9 10 11 12 13 14  % go test -bench &amp;#34;Benchmark*&amp;#34; -benchmem -benchtime 10s kvLst len 20 db size 7847B 0MB goos: darwin goarch: amd64 pkg: tk cpu: Intel(R) Core(TM) i7-4870HQ CPU @ 2.</description>
    </item>
    
    <item>
      <title>How is the Go timer scheduled?</title>
      <link>https://www.sobyte.net/post/2022-01/go-timer/</link>
      <pubDate>Thu, 13 Jan 2022 15:21:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-timer/</guid>
      <description>This article breaks down the Go timer. Timers are an important part of both business and infrastructure development, which shows how important they are. Whether we initialise a timer with NewTimer, timer.After, or timer.AfterFun, the timer is eventually added to a global timer heap, which is managed by Go runtime. The global timer heap has also undergone three major upgrades. Before Go 1.9, all timers were maintained by a globally</description>
    </item>
    
    <item>
      <title>Go Generic Programming: Specialization Support</title>
      <link>https://www.sobyte.net/post/2022-01/go-generic-supports-specialization-no/</link>
      <pubDate>Wed, 12 Jan 2022 10:01:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-generic-supports-specialization-no/</guid>
      <description>Some programming languages such as C++ and Rust support generic specialization, does Go generic support it? Specialization is an extension of the generic function code. For example, for a generic function, its implementation is the same for all types (type sets) that satisfy the generic argument. If we want to do a special implementation of the function for one of these type sets, some languages that support generic specialization can</description>
    </item>
    
    <item>
      <title>Auto-tuning GOGC - optimizes GO&#39;s GC CPU usage</title>
      <link>https://www.sobyte.net/post/2022-01/dynamic-gogc/</link>
      <pubDate>Wed, 12 Jan 2022 09:44:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/dynamic-gogc/</guid>
      <description>Uber recently posted an article that focuses on dynamically tuning GOGC on core services to reduce the mark phase CPU usage of GC. Basically, it is effective, low-risk, scalable and semi-automated.
Uber&amp;rsquo;s current service scale is about a few thousand microservices, based on the scheduling infrastructure on the cloud for deployment. Most of the services are written by GO, and the author of this article is doing Maps Production Engineering, a group that has helped some Java systems to adjust GC parameters before (this should be the starting point for them to help Go to do optimization and think about how to adjust parameters).</description>
    </item>
    
    <item>
      <title>Control the number of concurrent goroutines</title>
      <link>https://www.sobyte.net/post/2022-01/hpg-concurrency-control/</link>
      <pubDate>Mon, 10 Jan 2022 14:52:13 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/hpg-concurrency-control/</guid>
      <description>Concurrency overload causes program crashes Let&amp;rsquo;s start by looking at a very simple example. 1 2 3 4 5 6 7 8 9 10 11 12 func main() { var wg sync.WaitGroup for i := 0; i &amp;lt; math.MaxInt32; i++ { wg.Add(1) go func(i int) { defer wg.Done() fmt.Println(i) time.Sleep(time.Second) }(i) } wg.Wait() } This example implements concurrency of math.MaxInt32 concurrently, about 2^31 = 200 million, with each concurrently doing</description>
    </item>
    
    <item>
      <title>Golang bytes performance comparison of two functions Compare, Equal</title>
      <link>https://www.sobyte.net/post/2022-01/go-bytes-compare-equal/</link>
      <pubDate>Mon, 10 Jan 2022 09:12:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-bytes-compare-equal/</guid>
      <description>The bytes library in Go has two useful byte comparison functions: Compare, Equal
bytes.Compare Compare is a comparison of the size of two [][]bytes, returning the value
 0 : a == b -1 : a &amp;lt; b +1 : a &amp;gt; b  bytes.Equal Equal directly determines whether the two are equal, a simple task, and definitely faster than Compare
Performance comparison 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  var bs1 = [][]byte{ []byte(&amp;#34;12a7.</description>
    </item>
    
    <item>
      <title>Two efficient methods for generating combinations of Golang Slice and performance comparison</title>
      <link>https://www.sobyte.net/post/2022-01/go-slice/</link>
      <pubDate>Mon, 10 Jan 2022 09:00:56 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-slice/</guid>
      <description>There are various ways to implement the Go language to generate a Slice with a specified number of combinations, here are two with better performance.
The first two are specified to take the combination length, the first one is faster, the second one has simple code and slightly worse performance, and the third one is a full combination.
The algorithm of the first one is implemented by Python&amp;rsquo;s itertools algorithm and is really fast.</description>
    </item>
    
    <item>
      <title>Interpreting Go Language 2021: Stability is King</title>
      <link>https://www.sobyte.net/post/2022-01/go-2021/</link>
      <pubDate>Sun, 09 Jan 2022 13:36:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-2021/</guid>
      <description>There seems to be a &amp;ldquo;two ends in one&amp;rdquo; phenomenon in the computing world. On the one hand, more and more computing needs are being moved to the cloud (i.e., the cloud computing side). If you are a practitioner, you should be used to &amp;ldquo;deploying programs to the cloud&amp;rdquo;; on the other hand, some terminals are becoming more and more intelligent. Some manufacturers have even built neural network engines (a</description>
    </item>
    
    <item>
      <title>Go generic programming: interface is no longer the interface</title>
      <link>https://www.sobyte.net/post/2022-01/the-interface-is-not-that-interface-in-go-1-18/</link>
      <pubDate>Sun, 09 Jan 2022 11:08:01 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/the-interface-is-not-that-interface-in-go-1-18/</guid>
      <description>Since Go 1.18 supported generics, the meaning of the Go interface has changed radically, and is used as a type constraint for generics in addition to the set of methods it previously represented. interface is no longer the simple interface it once was. In Go 1.17.x and previous versions, interface was defined as follows An interface type specifies a method set called its interface. A variable of interface type can</description>
    </item>
    
    <item>
      <title>Go Reflection: Chunking slices to a specified size</title>
      <link>https://www.sobyte.net/post/2022-01/slice-chunking-in-go/</link>
      <pubDate>Sat, 08 Jan 2022 13:31:36 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/slice-chunking-in-go/</guid>
      <description>In the process of writing code, sometimes we need to do some bulk queries/operations, which often involve chunking a large array or slice.
For example, if we have an array of ids and we want to request an interface to query information based on the ids, the interface supports batch queries, but the maximum number of queries per query is 100. the best practice is to take up to 100 ids from the array each time and do a batch query until the array is traversed.</description>
    </item>
    
    <item>
      <title>Understanding the Embedding Features of the go Language</title>
      <link>https://www.sobyte.net/post/2022-01/type-embedding-in-go/</link>
      <pubDate>Fri, 07 Jan 2022 14:28:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/type-embedding-in-go/</guid>
      <description>The Go language has no classes, so there is no inheritance, so you can only combine various functions by embedding features (for convenience, we will call them embedding). The simplest is the interface embedding interface, for example, we have defined Reader and Writer interfaces. 1 2 3 4 5 6 7 type Reader interface { Read(p []byte) (n int, err error) } type Writer interface { Write(p []byte) (n int,</description>
    </item>
    
    <item>
      <title>Go is a better PHP</title>
      <link>https://www.sobyte.net/post/2022-01/go-is-better-php/</link>
      <pubDate>Fri, 07 Jan 2022 14:17:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-is-better-php/</guid>
      <description>Many php programmers switch to go because of the current environment. Today I bring you a new perspective - &amp;ldquo;go is a better php&amp;rdquo;.
It starts with the article PHP showing its maturity in release 7.4. The article says that PHP is maturing from version 7.4 and lists the following advantages of PHP.
Complete object-oriented programming support, mainly including
 namespace to handle naming conflicts interface separates implementation from interface traits code mixin support type system restricts the types of function parameters, return values, and class members  A comprehensive dependency management system, which is mainly implemented by composer.</description>
    </item>
    
    <item>
      <title>Concurrency safety for Go language maps</title>
      <link>https://www.sobyte.net/post/2022-01/go-map-concurrent-misue/</link>
      <pubDate>Fri, 07 Jan 2022 10:26:24 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-map-concurrent-misue/</guid>
      <description>It is well known that Go&amp;rsquo;s map is not a concurrency-safe data structure. If more than one goroutine reads and writes the same map, an error is reported. I&amp;rsquo;m ashamed to say that I always thought this error could be caught with recover. Until yesterday, a colleague raised this question and sent me a demo code. Today, I took the time to study the knowledge, organize it and share it with you.</description>
    </item>
    
    <item>
      <title>Go language implementation of text to image</title>
      <link>https://www.sobyte.net/post/2022-01/go-text-image/</link>
      <pubDate>Fri, 07 Jan 2022 10:08:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-text-image/</guid>
      <description>I recently needed to convert a large section of text into a picture. After checking the web, I found the project hqbobo/text2pic and found that it adds a box to each character when rendering the Song-like font. So I simply researched how to render text in Go. Finally developed the txtimg widget. Today I&amp;rsquo;ll share the relevant experience in summary. The body of the code is taken from the official</description>
    </item>
    
    <item>
      <title>Go 1.18 will introduce a new network address packet</title>
      <link>https://www.sobyte.net/post/2022-01/go-1.18-netip/</link>
      <pubDate>Wed, 05 Jan 2022 13:00:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-1.18-netip/</guid>
      <description>A long time ago, I came across an article by Brad Fitzpatrick called netaddr.IP: a new IP address type for Go. Brad is the core developer of the Go language and founder of tailscale, and in this article he analyzes the problems with the Go language net.IP type and their solution to them and how it evolved. Eventually Brad and his team open sourced the inet.af/netaddr package. I took a</description>
    </item>
    
    <item>
      <title>Go HTTP Service Timeout Control</title>
      <link>https://www.sobyte.net/post/2022-01/go-http-server-timeout/</link>
      <pubDate>Wed, 05 Jan 2022 12:40:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-http-server-timeout/</guid>
      <description>The system must control the timeout time of each link when providing HTTP services to the outside world, otherwise it is vulnerable to DDos attacks. The business framework used by our department is based on the Go language net/http standard library secondary development. When I was developing the framework, I did not have a deep understanding of the timeout control of the Go HTTP server. TimeoutHandler in the outermost layer</description>
    </item>
    
    <item>
      <title>Rob opposes changes to the Go 1.18 generic standard library</title>
      <link>https://www.sobyte.net/post/2022-01/no-change-lib-in-go-1.18/</link>
      <pubDate>Wed, 05 Jan 2022 11:57:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/no-change-lib-in-go-1.18/</guid>
      <description>Rob Pike, the father of the Go language, previously created issue to oppose the introduction of generic support in the standard library in Go 1.18. Rob&amp;rsquo;s move was both unexpected and justified. Rob&amp;rsquo;s rationale was twofold: the scope of the change was too large, and the lack of real-world experience. So Rob suggested not to change the standard library in Go 1.18, but to provide a generic version of the</description>
    </item>
    
    <item>
      <title>Use systemd to listen to the service port</title>
      <link>https://www.sobyte.net/post/2022-01/systemd-socket-activation/</link>
      <pubDate>Wed, 05 Jan 2022 11:46:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/systemd-socket-activation/</guid>
      <description>The http service of the website is developed in Go. Because it listens to the standard ports 80 and 443, the http service is always run under the root account. But running with root is very risky. If the code is vulnerable and the bad guys break it, they will get root access and the consequences will be unthinkable. That&amp;rsquo;s why http services like nginx support setting the account under which the worker processes run.</description>
    </item>
    
    <item>
      <title>Using JWT for user authentication in Golang</title>
      <link>https://www.sobyte.net/post/2022-01/golang-jwt/</link>
      <pubDate>Tue, 04 Jan 2022 20:51:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/golang-jwt/</guid>
      <description>Doing user authentication with JWT is a relatively simple way. Common authentication methods The mainstream methods of user authentication are broadly classified as session-based and token-based. User authentication with JWT sesion-based authentication method User sends username and password to the server. The server authenticates and saves relevant data in the current conversation (sesion), such as user role, login time, etc. The server returns a session_id to the user, which is</description>
    </item>
    
    <item>
      <title>Quickly editing Go struct tags under vim</title>
      <link>https://www.sobyte.net/post/2022-01/vim-go-struct-tag/</link>
      <pubDate>Tue, 04 Jan 2022 18:50:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/vim-go-struct-tag/</guid>
      <description>I have written a previous article How to configure Vim&amp;rsquo;s Golang development environment. Go language jump completions use NeoVim&amp;rsquo;s built-in lsp functionality, so there is no need to integrate additional plugins. However, lsp does not seem to support adding or modifying tags to structs. My colleagues in the group started tinkering with it, and they found a small plugin developed in lua and introduced it to me. I thought about</description>
    </item>
    
    <item>
      <title>How to Configure Golang Development Environment for Vim</title>
      <link>https://www.sobyte.net/post/2022-01/go-vim/</link>
      <pubDate>Tue, 04 Jan 2022 18:35:41 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-vim/</guid>
      <description>Today we will introduce you how to configure Go development environment under Vim. If you are interested, you may want to give it a try. System Dependencies Before we start, we need a handy terminal emulation software. There are many such programs, but make sure to choose one that supports utf-8 encoding and 24-bit true color. Here I recommend. linux platform st macos platform iTerm2 window platform Windows Terminal There</description>
    </item>
    
    <item>
      <title>Go Language Generic Design</title>
      <link>https://www.sobyte.net/post/2022-01/go-language-generic-design/</link>
      <pubDate>Tue, 04 Jan 2022 18:04:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-language-generic-design/</guid>
      <description>After several years of work, the generic feature is finally going to follow the 1.18 release. This is a milestone. Considering that the original design document of Go generic is rather difficult and has a messy structure, I&amp;rsquo;ll compile my understanding into a document and share it with you today. Since there is a lot of content and my own understanding of the English design document is limited (especially the</description>
    </item>
    
    <item>
      <title>Go Language Generics Example</title>
      <link>https://www.sobyte.net/post/2022-01/go-language-generics-example/</link>
      <pubDate>Tue, 04 Jan 2022 17:22:11 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-language-generics-example/</guid>
      <description>Slicing Operations Functions like Map/Reduce/Filter are often used in functional programming. Because of generics, we can also write Map/Reduce/Filter functions that can be adapted to any type 😂.
All three of these functions are used to process sliced data, so Go officially wanted to provide a standard slices package. But it&amp;rsquo;s subject to Rob&amp;rsquo;s objection, so it has to go under exp package underneath.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  // The slices package implements a series of slicing algorithms.</description>
    </item>
    
    <item>
      <title>Implementing a Socks5 Secure Proxy with Go</title>
      <link>https://www.sobyte.net/post/2022-01/go-socket5/</link>
      <pubDate>Mon, 03 Jan 2022 11:25:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/go-socket5/</guid>
      <description>I recently finished reading The Go Programming Language , and wanted to write something to practice. Go is more suitable for writing server software, and before that I learned Socks5 protocol, so I decided to write a Socks5 proxy server. The basic function is finished, part of the idea is referred to ginuerzh/gost. I named it Subsocks, sub- meaning under &amp;hellip; (similar to &amp;ldquo;subway&amp;rdquo;). The project Repository is here: lyuhuang/subsocks. Here&amp;rsquo;s an introduction and a brief summary of its implementation.</description>
    </item>
    
    <item>
      <title>Go sets up socket port multiplexing</title>
      <link>https://www.sobyte.net/post/2022-01/reuse-port/</link>
      <pubDate>Mon, 03 Jan 2022 11:08:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/reuse-port/</guid>
      <description>We know that, in general, TCP/UDP ports can only be bound to one socket. When we try to listen to a port that is already listened to by another process, the bind call fails and errno is set to 98 EADDRINUSE. This is also known as port occupation.
1 2 3 4 5 6 7 8 9 10  int fd1 = socket(AF_INET, SOCK_DGRAM, 0); int fd2 = socket(AF_INET, SOCK_DGRAM, 0); struct sockaddr_in addr = {0}; addr.</description>
    </item>
    
    <item>
      <title>It&#39;s a sad story that Go generics don&#39;t support generic methods</title>
      <link>https://www.sobyte.net/post/2021-12/no-parameterized-methods/</link>
      <pubDate>Wed, 22 Dec 2021 15:50:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/no-parameterized-methods/</guid>
      <description>According to the description of the Go generalization proposal, Go does not support generalized methods:No parameterized methods. The main reason Go generic processing is implemented at compile time, and generic methods are difficult to determine how the generic scheme should be instantiated without contextual analysis and inference at compile time, or even impossible to determine, resulting in the current (Go 1.18) Go implementation not supporting generic schemes. However, the lack</description>
    </item>
    
    <item>
      <title>Golang&#39;s approach to comparing two structs of the same type and its performance</title>
      <link>https://www.sobyte.net/post/2021-12/struct-compare/</link>
      <pubDate>Fri, 17 Dec 2021 15:00:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/struct-compare/</guid>
      <description>You can use reflect.DeepEqual and cmp.Equal to compare two structs of the same type to see if they are equal, or you can use hard-coded comparisons, see below how they perform.
Define a struct with multiple data types, e.g.
1 2 3 4 5 6  type T struct { X int Y string Z []int M map[string]string }   reflect.DeepEqual This is a built-in function
1  reflect.DeepEqual(t2, t1)   cmp.</description>
    </item>
    
    <item>
      <title>Creating CLI Applications with Cobra in Golang</title>
      <link>https://www.sobyte.net/post/2021-12/create-cli-app-with-cobra/</link>
      <pubDate>Sat, 11 Dec 2021 15:19:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/create-cli-app-with-cobra/</guid>
      <description>Although most of the software we use today is visual and easy to use, that doesn&amp;rsquo;t mean that CLI (command line) applications are useless, especially for developers who deal with CLI applications on a regular basis. Golang is perfect for building CLI applications, and we will introduce how to build a CLI application in Golang in the following. For developers, there are a lot of CLI tools like npm, node,</description>
    </item>
    
    <item>
      <title>Implementation principles of Go language arrays</title>
      <link>https://www.sobyte.net/post/2021-12/golang-array/</link>
      <pubDate>Wed, 08 Dec 2021 15:35:04 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/golang-array/</guid>
      <description>Arrays and slices are common data structures in the Go language, and many developers new to Go tend to confuse these two concepts. In addition to arrays, Go introduces another concept - slicing. Slicing has some similarities to arrays, but their differences lead to significant differences in usage. In this section we will introduce the underlying implementation of arrays from the Go compile-time runtime, which will include several common operations for initializing, accessing, and assigning values to arrays.</description>
    </item>
    
    <item>
      <title>Why the Go language doesn&#39;t have generics</title>
      <link>https://www.sobyte.net/post/2021-12/whys-the-design-go-generics/</link>
      <pubDate>Wed, 08 Dec 2021 15:25:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/whys-the-design-go-generics/</guid>
      <description>Go is a programming language with few syntactic elements and a simple design, which often means less expressiveness and more time for engineers to write repetitive logic. There has been a lot of community discussion and outcry about generics, and here are some of the discussions and feedback related to generics.
 proposal: spec: generic programming facilities has over 500 generic-related discussions. Generics - ExperienceReports lists a number of articles discussing Go language generics.</description>
    </item>
    
    <item>
      <title>The principle of Go language system monitoring implementation</title>
      <link>https://www.sobyte.net/post/2021-12/golang-sysmon/</link>
      <pubDate>Tue, 07 Dec 2021 15:16:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/golang-sysmon/</guid>
      <description>Many systems have daemons that monitor the running state of the system in the background and respond to unexpected situations as they arise. The system monitor is an important part of the Go language runtime, checking the Go language runtime at regular intervals to ensure that the program has not entered an abnormal state. This section describes the design and implementation of the Go system monitor, including its startup, execution process, and main responsibilities.</description>
    </item>
    
    <item>
      <title>Principle of memory allocator implementation in Go language</title>
      <link>https://www.sobyte.net/post/2021-12/golang-memory-allocator/</link>
      <pubDate>Mon, 06 Dec 2021 15:51:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/golang-memory-allocator/</guid>
      <description>The data and variables in a program are allocated to the virtual memory where the program resides, which contains two important areas: the Stack and the Heap. Most of the arguments, return values, and local variables of function calls are allocated to the stack, which is managed by the compiler; different programming languages use different methods to manage the memory in the heap area. The objects in the heap are</description>
    </item>
    
    <item>
      <title>go-faker: a mock data generator</title>
      <link>https://www.sobyte.net/post/2021-12/go-faker/</link>
      <pubDate>Mon, 06 Dec 2021 14:57:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/go-faker/</guid>
      <description>go-faker go-faker can generate all kinds of mock data, which is good for testing scenarios. For example, when you need a fake user record in order to complete some kind of registration process unit test, you can use. 1 2 &amp;gt; docker run -it --rm hedzr/faker internet {&amp;#34;Internet&amp;#34;:{&amp;#34;DomainName&amp;#34;:&amp;#34;ziemann.net&amp;#34;,&amp;#34;DomainSuffix&amp;#34;:&amp;#34;com&amp;#34;,&amp;#34;DomainWord&amp;#34;:&amp;#34;green&amp;#34;,&amp;#34;Email&amp;#34;:&amp;#34;garry@hintz.biz&amp;#34;,&amp;#34;FreeEmail&amp;#34;:&amp;#34;christian@yahoo.com&amp;#34;,&amp;#34;IpV4Address&amp;#34;:&amp;#34;48.107.223.211&amp;#34;,&amp;#34;IpV6Address&amp;#34;:&amp;#34;bc8e:e770:c962:4004:8045:86e2:2658:bfc7&amp;#34;,&amp;#34;MacAddress&amp;#34;:&amp;#34;52:6b:0d:24:7d:67&amp;#34;,&amp;#34;Password&amp;#34;:&amp;#34;Za9pR1hfV7yJXw3Mhf9I5EvL1uvo0M&amp;#34;,&amp;#34;SafeEmail&amp;#34;:&amp;#34;sheridan.gibson@example.net&amp;#34;,&amp;#34;Slug&amp;#34;:&amp;#34;adipisci-inventore&amp;#34;,&amp;#34;Url&amp;#34;:&amp;#34;http://roobroberts.name/americo.lindgren&amp;#34;,&amp;#34;UserName&amp;#34;:&amp;#34;lenny.trantow&amp;#34;}} This gives you a user record with a limited but almost sufficient number of fields. Installation Using the docker run will work</description>
    </item>
    
    <item>
      <title>The principle of Go language garbage collector implementation</title>
      <link>https://www.sobyte.net/post/2021-12/golang-garbage-collector/</link>
      <pubDate>Sun, 05 Dec 2021 11:38:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/golang-garbage-collector/</guid>
      <description>In almost all modern programming languages, the garbage collector is a complex system that requires a lot of effort in order to reclaim the deprecated memory without affecting the user program. Java&amp;rsquo;s garbage collection mechanism is a good example. Java 8 contains four garbage collectors, linear, concurrent, parallel marker removal, and G1. It takes a lot of effort to understand how they work and the details of their implementation. In</description>
    </item>
    
    <item>
      <title>Stack memory and escape analysis in Go language</title>
      <link>https://www.sobyte.net/post/2021-12/golang-stack-management/</link>
      <pubDate>Sun, 05 Dec 2021 11:22:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/golang-stack-management/</guid>
      <description>The memory of an application is generally divided into heap and stack areas, and the program can actively request memory space from the heap area during runtime. This memory is allocated by the memory allocator and reclaimed by the garbage collector. We have analyzed the process of requesting and releasing heap memory in detail in the last two sections, and this section will introduce the management of Go language stack</description>
    </item>
    
    <item>
      <title>Principles of the Go language HTTP standard library implementation</title>
      <link>https://www.sobyte.net/post/2021-12/golang-net-http/</link>
      <pubDate>Sat, 04 Dec 2021 11:54:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/golang-net-http/</guid>
      <description>The Hypertext Transfer Protocol (HTTP) is today&amp;rsquo;s most widely used application layer protocol, drafted by Tim Berners-Lee at CERN in 1989, and has become the core of data transfer on the Internet. Over the past few years, HTTP/2 and HTTP/3 have also updated the existing protocol to provide more secure and faster transfers. The existing protocols have been updated to provide more secure and faster transfers. Most programming languages implement HTTP/1.</description>
    </item>
    
    <item>
      <title>The principle of JSON implementation in Go language</title>
      <link>https://www.sobyte.net/post/2021-12/golang-json/</link>
      <pubDate>Sat, 04 Dec 2021 11:41:06 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/golang-json/</guid>
      <description>JSON (JavaScript Object Notation), a lightweight data interchange format1, holds almost a majority of the market share today. Although it lacks serialization and deserialization performance compared to more compact data interchange formats, JSON offers good readability and ease of use, and it is a very good choice for using JSON as a serialization format when extreme mechanical performance is not sought.
Design Principles Almost all modern programming languages incorporate functions for handling JSON directly into the standard library, and the Go language is no exception.</description>
    </item>
    
    <item>
      <title>Dynamic libraries and plug-in system for Go language</title>
      <link>https://www.sobyte.net/post/2021-12/golang-plugin/</link>
      <pubDate>Sat, 04 Dec 2021 11:23:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/golang-plugin/</guid>
      <description>Developers familiar with the Go language are generally very familiar with the principles of Goroutine and Channel, including how to design applications based on the CSP model, but the Go language&amp;rsquo;s plug-in system is a module that few people know about. With the plug-in system, we can load dynamic libraries at runtime to implement some of the more interesting features.
Design Principles The plug-in system of Go language is implemented based on C dynamic libraries, so it also inherits the advantages and disadvantages of C dynamic libraries.</description>
    </item>
    
    <item>
      <title>Write an interface pressure testing tool</title>
      <link>https://www.sobyte.net/post/2021-11/go-benchmark-test/</link>
      <pubDate>Wed, 17 Nov 2021 14:48:19 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/go-benchmark-test/</guid>
      <description>Some time ago, a project was about to go live, and we needed to pressure test the core interface; since our interface is gRPC protocol, we found that there are not as many pressure testing tools as HTTP.
Finally I found the tool ghz, which is also very full-featured.
Afterwards I wondered why there are so few tools for gRPC piezos, what are the difficulties? In order to verify this problem, I am going to write a tool myself.</description>
    </item>
    
    <item>
      <title>Go Concurrent Programming Year in Review (2021)</title>
      <link>https://www.sobyte.net/post/2021-11/the-state-of-go-sync-2021/</link>
      <pubDate>Wed, 10 Nov 2021 12:50:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/the-state-of-go-sync-2021/</guid>
      <description>2021 is also almost over, Go 1.18 features have been frozen and the US is soon in holiday mode, so let&amp;rsquo;s take this node to review the progress of Go concurrent programming in the last year.
TryLock is finally being released For a long time (dating back to 2013 #6123), it was proposed to add the TryLock method to Mutex, which was ruthlessly rejected by the big boys, and intermittently, intermittently, it has been proposed that this method is needed, and now in 2021, the Go team bigwigs finally relented and added the corresponding method (#45435).</description>
    </item>
    
    <item>
      <title>Timeout control in Go</title>
      <link>https://www.sobyte.net/post/2021-10/go-timeout/</link>
      <pubDate>Sun, 31 Oct 2021 17:12:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/go-timeout/</guid>
      <description>In daily development we will probably encounter timeout control scenarios, such as a batch of time-consuming tasks, network requests, etc.; a good timeout control can effectively avoid some problems (such as goroutine leakage, resource non-release, etc.). Timer The first option is Time.After(d Duration): the timeout control in go is very simple. 1 2 3 4 5 func main() { fmt.Println(time.Now()) x := &amp;lt;-time.After(3 * time.Second) fmt.Println(x) } output: 1 2</description>
    </item>
    
    <item>
      <title>Go Generics - Simplify again, omitting interfaces</title>
      <link>https://www.sobyte.net/post/2021-10/go-generic-eliding-interface/</link>
      <pubDate>Sun, 31 Oct 2021 17:06:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/go-generic-eliding-interface/</guid>
      <description>If you have been paying attention to the design and implementation of Go generic type, you must know that Go generic code implementation is implemented by type parameter (type parameter), which is replaced by type argument (type argument) when running generic code. (unfortunately both parameter and argument are translated into Chinese parameters)
The type parameter also has a type, which is the metadata that describes the behavior of the parameter type, and is called a constraint.</description>
    </item>
    
    <item>
      <title>Golang - About Pointers and Performance</title>
      <link>https://www.sobyte.net/post/2021-10/go-pointer/</link>
      <pubDate>Sun, 17 Oct 2021 15:04:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/go-pointer/</guid>
      <description>A pointer is an address value that points to the start of an area of memory. So you need to have a good knowledge of computer composition principles. Generally speaking, it is important to maintain a deep memory of what is told in this course and then accumulate it day by day to really reach an understanding.
The concept of a pointer in a high-level language is not fundamentally different from a pointer on a low-level interface.</description>
    </item>
    
    <item>
      <title>golang from kernel to epoll</title>
      <link>https://www.sobyte.net/post/2021-10/golang-from-kernel-to-epoll/</link>
      <pubDate>Sun, 17 Oct 2021 14:41:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/golang-from-kernel-to-epoll/</guid>
      <description>Basic implementation of linux networking In the TCP/IP network hierarchy model, the entire protocol stack is divided into physical layer, link layer, network layer, transport layer, and application layer. The physical layer corresponds to the grid card and the grid line, and the application layer corresponds to various applications such as Nginx, FTP, etc. Linux implements the link layer, the grid layer, and the transport layer. In the Linux kernel</description>
    </item>
    
    <item>
      <title>Forcing changes to the Go standard library implementation</title>
      <link>https://www.sobyte.net/post/2021-10/replace-implementations-in-go-std-libs-at-runtime/</link>
      <pubDate>Sun, 10 Oct 2021 12:40:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/replace-implementations-in-go-std-libs-at-runtime/</guid>
      <description>There are some singleton implementations in the Go standard library, such as the default Logger and net.DefaultResolver in the log package, which provide convenient methods, but there are times when we need to do some customization and need to change these objects. There are even times when we need to change specific methods of the standard library, and the conventional means do not work, we must use some &amp;ldquo;hacking&amp;rdquo; methods.</description>
    </item>
    
    <item>
      <title>Golang http.Server graceful exit: the easily misused Shutdown() method</title>
      <link>https://www.sobyte.net/post/2021-10/go-http-server-shudown-done-right/</link>
      <pubDate>Mon, 04 Oct 2021 18:33:32 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/go-http-server-shudown-done-right/</guid>
      <description>Writing an HTTP service in Go is easy, but getting a running service to exit safely is not so straightforward. If you are new to the term graceful shutdown, it refers to an HTTP service that stops accepting new requests after receiving a user&amp;rsquo;s exit command, and then actively exits after processing and responding to the batch of requests it is currently processing. Unlike SIGKILL (kill -9 or force stop),</description>
    </item>
    
    <item>
      <title>golang netpoll Explained</title>
      <link>https://www.sobyte.net/post/2021-09/golang-netpoll/</link>
      <pubDate>Fri, 24 Sep 2021 11:24:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/golang-netpoll/</guid>
      <description>Computer io models are distinguished into a variety of, currently the most used is also nio, epoll, select. Combining different scenarios with different io models is the right solution. Network io in golang golang is naturally suited for concurrency, why? One is the lightweight concurrency, and the other is the abstraction of complex io, which simplifies the process. For example, if we simply access an http service, a few simple</description>
    </item>
    
    <item>
      <title>How to get the client&#39;s real IP, starting with a &#34;bug&#34; in Gin</title>
      <link>https://www.sobyte.net/post/2021-09/gin-get-client-real-ip/</link>
      <pubDate>Fri, 24 Sep 2021 10:45:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/gin-get-client-real-ip/</guid>
      <description>Request IP, as one of the user&amp;rsquo;s identity attributes, is a very important basic data. In many scenarios, we will do network security attack prevention or access risk control based on the client request IP. Usually, we can get the real IP through the X-Forwarded-For header in the HTTP protocol Request Headers, but is it really reliable to get the real IP through the X-Forwarded-For header? Concept The X-Forwarded-For is</description>
    </item>
    
    <item>
      <title>Go 100 lines to implement HTTP(S) forward proxy</title>
      <link>https://www.sobyte.net/post/2021-09/https-proxy-in-golang-in-less-than-100-lines-of-code/</link>
      <pubDate>Fri, 10 Sep 2021 16:27:29 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/https-proxy-in-golang-in-less-than-100-lines-of-code/</guid>
      <description>The goal is to implement a realistic HTTP HTTPS proxy server, and there are currently two ways to implement a proxy
Plain Proxy : This proxy plays the role of a middleman, for the client it is the server, for the server it is the client, it is responsible for passing HTTP messages back and forth in the middle
Tunnel Proxy : It is a proxy that is done through the HTTP body, which is a TCP-based application layer proxy that uses the CONNECT method of HTTP to establish a connection.</description>
    </item>
    
    <item>
      <title>Etcdraft consensus in Fabric</title>
      <link>https://www.sobyte.net/post/2021-09/etcdraft-exploration-in-fabric-orderer/</link>
      <pubDate>Fri, 10 Sep 2021 15:46:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/etcdraft-exploration-in-fabric-orderer/</guid>
      <description>Why consensus via etcdraft? I think there are the following reasons solo is not suitable for most scenarios, e.g. organization A, organization B, both want to place consensus nodes in themselves kafka can meet the above requirements, but kafka plus zookeeper requires extra deployment and is too heavy to deploy So here comes the consensus based on etcdraft, which solves the above pain points Say it three times! Don&amp;rsquo;t miss</description>
    </item>
    
    <item>
      <title>EOF error caused by Go HTTP Response write timeout</title>
      <link>https://www.sobyte.net/post/2021-09/http-response-write-timeout/</link>
      <pubDate>Fri, 10 Sep 2021 15:36:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/http-response-write-timeout/</guid>
      <description>The day before yesterday, there was a miraculous error in the process of the call, the error in the client side of the http request error Get &amp;quot;http://127.0.0.1:8800&amp;quot;: EOF , but the server side does not have any exception all the logs are normal execution
Since the error is only on the client side, the Google search results are not caused by the actual scenario (there is no suspicion that there is a problem on the server side), so we have no choice but to capture the packets, and finally the problem is solved</description>
    </item>
    
    <item>
      <title>A practical application of the Observer Pattern</title>
      <link>https://www.sobyte.net/post/2021-09/practical-application-of-the-observer-pattern/</link>
      <pubDate>Mon, 06 Sep 2021 17:24:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/practical-application-of-the-observer-pattern/</guid>
      <description>Design patterns are encountered in both interviews and at work, but I often come across complaints from my partners that they have very little chance of applying design patterns in practice.
I have recently encountered a problem solving scenario using the Observer pattern at work, and I would like to share it with you.
The background is as follows.
Some additional things need to be done in the standard process after a user has created an order.</description>
    </item>
    
    <item>
      <title>How is the Go generic implemented?</title>
      <link>https://www.sobyte.net/post/2021-08/how-is-go-generic-implemented/</link>
      <pubDate>Tue, 31 Aug 2021 21:27:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/how-is-go-generic-implemented/</guid>
      <description>You can use generics in Go 1.17. The current master branch, by default, already supports generics, so you don&amp;rsquo;t need to add the -G=3 parameter.
You can try the latest branch of go by following these steps:
1 2  go get golang.org/dl/gotip gotip download   Just use the gotip command instead of go when compiling your code.
With the release of Go 1.17, there have been a lot of articles on Go generics, but they are basically brief introductory articles.</description>
    </item>
    
    <item>
      <title>A brief look at the new Go 1.17 call statute</title>
      <link>https://www.sobyte.net/post/2021-08/go1-17-new-calling-convention/</link>
      <pubDate>Mon, 30 Aug 2021 21:33:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/go1-17-new-calling-convention/</guid>
      <description>Go 1.17 changed the long-standing stack-based calling convention. Before we can understand Go&amp;rsquo;s calling convention, we need to know what it is. The x86 calling convention is, in a nutshell, the language&amp;rsquo;s convention for passing parameters between functions. The caller knows what parameters to pass to the called function in what form and in what order, and the called function follows this convention to find the contents of the passed</description>
    </item>
    
    <item>
      <title>Go 1.17 Released, Promised Generic Support Fails Again</title>
      <link>https://www.sobyte.net/post/2021-08/go-1.17-is-released/</link>
      <pubDate>Thu, 26 Aug 2021 21:40:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/go-1.17-is-released/</guid>
      <description>On 16 August 2021, the Go team released Go 1.17, which you can get by visiting the download page. This release brings an additional improvement to the compiler in the form of a new way of passing function arguments and results. This change shows an approximate 5% improvement in the performance of Go programs and an approximate 2% reduction in binary file size for the amd64 platform. Future versions will support more platforms.</description>
    </item>
    
    <item>
      <title>golang.org Will Be History</title>
      <link>https://www.sobyte.net/post/2021-08/golang-org-will-be-history/</link>
      <pubDate>Mon, 23 Aug 2021 10:35:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/golang-org-will-be-history/</guid>
      <description>Two days ago I saw the official blog &amp;ldquo;Tidying up the Go web experience&amp;rdquo;, which has made clear the plans and arrangements for optimizing Go sites, so today I&amp;rsquo;m sharing the good news with you.
Go officials have previously launched a new site, go.dev, a new Go developer center: the
and the companion website pkg.go.dev, which provides developers with access to Go package and module information.
As wonderful as it may seem, the original golang.</description>
    </item>
    
    <item>
      <title>How can I avoid Go command line execution creating &#34;orphan&#34; processes?</title>
      <link>https://www.sobyte.net/post/2021-08/avoid-go-command-orphan-processes/</link>
      <pubDate>Fri, 13 Aug 2021 11:50:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/avoid-go-command-orphan-processes/</guid>
      <description>exec.Command is usually used in Go programs if we want to execute a command, and it works well enough to achieve our goal. If we logically need to terminate the process, we can quickly use the cmd.Process.Kill() method to end the process. But what happens when the command we want to execute will start other child processes to operate? Generation of orphan processes Test. 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>GoReplay Manual</title>
      <link>https://www.sobyte.net/post/2021-08/go-replay-manual/</link>
      <pubDate>Sat, 07 Aug 2021 12:56:19 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/go-replay-manual/</guid>
      <description>1. Installation GoReplay is written in Go and has a single executable file, which can be downloaded from the official Release page and placed in the PATH directory.
1 2 3  wget https://github.com/buger/goreplay/releases/download/v1.2.0/gor_v1.2.0_x64.tar.gz tar -zxvf gor_v1.2.0_x64.tar.gz mv gor /usr/local/bin   2. Basic Use The overall use of the GoReplay command line is to specify the input and input side, and then GoReplay copies the traffic from the input side to the output side.</description>
    </item>
    
    <item>
      <title>Slice Principle Analysis</title>
      <link>https://www.sobyte.net/post/2021-08/slice-principle-analysis/</link>
      <pubDate>Fri, 06 Aug 2021 19:15:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/slice-principle-analysis/</guid>
      <description>As a Go novice, I&amp;rsquo;m curious to see any &amp;ldquo;weird&amp;rdquo; code; for example, I recently saw a few methods; the pseudo-code is as follows.
1 2 3 4 5 6 7 8  func FindA() ([]*T,error) { } func FindB() ([]T,error) { } func SaveA(data *[]T) error { } func SaveB(data *[]*T) error { }   I believe that most newcomers to Go are confused when they see this code, the most confusing of which is</description>
    </item>
    
    <item>
      <title>Simple Usage of Colly</title>
      <link>https://www.sobyte.net/post/2021-07/simple-usage-of-colly/</link>
      <pubDate>Mon, 19 Jul 2021 17:09:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/simple-usage-of-colly/</guid>
      <description>colly is a powerful crawler framework written in Go language . It provides a simple API, has strong performance, can automatically handle cookies &amp;amp; sessions, and provides a flexible extension mechanism. First, we introduce the basic concept of colly. Then we introduce the usage and features of colly with a few examples: pulling GitHub Treading, pulling Baidu novel hotlist, downloading images from Unsplash . Quick Use Create the directory and</description>
    </item>
    
    <item>
      <title>Data Reading in Golang</title>
      <link>https://www.sobyte.net/post/2021-07/data-reading-in-golang/</link>
      <pubDate>Thu, 15 Jul 2021 10:48:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/data-reading-in-golang/</guid>
      <description>The standard library of Go provides several methods to read data from io.Reader (io, ioutil), and this article demonstrates the application scenarios by reading data from net.
Accessing a website using a TCP connection, using the HTTP 1.0 protocol, keeping the TCP connection short and closing it after reading the response, thus simulating the io.EOF error.
1 2 3 4 5 6  conn, err := net.Dial(&amp;#34;tcp&amp;#34;, &amp;#34;rpcx.site:80&amp;#34;) if err !</description>
    </item>
    
    <item>
      <title>Implementing Lock Free Queues With Go</title>
      <link>https://www.sobyte.net/post/2021-07/implementing-lock-free-queues-with-go/</link>
      <pubDate>Fri, 09 Jul 2021 14:41:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/implementing-lock-free-queues-with-go/</guid>
      <description>A queue is a very common data structure that allows only outgoing (dequeue) operations at the front end of a table (head) and incoming (enqueue) operations at the back end of a table (tail). Like the stack data structure, a queue is a linear table with restricted operations. The end that performs the insert operation is called the tail and the end that performs the delete operation is called the header.</description>
    </item>
    
    <item>
      <title>Golang Context Source Code Analysis</title>
      <link>https://www.sobyte.net/post/2021-07/golang-context-source-code-analysis/</link>
      <pubDate>Mon, 05 Jul 2021 11:48:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/golang-context-source-code-analysis/</guid>
      <description>All source code analysis in this article is based on Go 1.16.4. 1. Context Introduction Context in the standard library is an interface with various implementations; Context was added to the standard library in Go 1.7 and is mainly used for setting deadlines, synchronizing signals, passing context request values, etc. across multiple Goroutines. Because of the need to pass signals across multiple Goroutines, multiple Contexts often need to be associated</description>
    </item>
    
    <item>
      <title>Go Implements Prioritization in Select Statements</title>
      <link>https://www.sobyte.net/post/2021-07/go-implements-prioritization-in-select-statements/</link>
      <pubDate>Sat, 03 Jul 2021 16:36:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/go-implements-prioritization-in-select-statements/</guid>
      <description>This article reviews some of the uses of the select statement in the Go language and extends a tip on how to implement priority in select, which I hope will be helpful to you.
Introduction to the select statement The select statement in Go is used to monitor and select a set of case statements to execute the corresponding code. It looks similar to the switch statement, but all the expressions in the case in the select statement must be send or receive operations of the channel.</description>
    </item>
    
    <item>
      <title>Go Reflect Performance</title>
      <link>https://www.sobyte.net/post/2021-07/go-reflect-performance/</link>
      <pubDate>Sat, 03 Jul 2021 16:24:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/go-reflect-performance/</guid>
      <description>Go reflect package provides the ability to get the type and value of an object at runtime, which can help us to abstract and simplify the code, achieve dynamic data acquisition and method invocation, improve development efficiency and readability, and make up for Go&amp;rsquo;s ability to handle data uniformly in the absence of generics.
With reflect, we can achieve the ability to get object types, object fields, object methods, get tag information of struct, dynamically create objects, whether objects implement specific interfaces, convert objects, get and set object values, call Select branches dynamically, etc.</description>
    </item>
    
    <item>
      <title>Dateparse Usage Guide</title>
      <link>https://www.sobyte.net/post/2021-07/dateparse-usage-guide/</link>
      <pubDate>Sat, 03 Jul 2021 15:56:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/dateparse-usage-guide/</guid>
      <description>Handling time is always a headache, no matter what time it is. The time format is too diverse, and it is even more difficult to deal with time zones, daylight saving time, leap seconds and other minor details. Therefore, we usually use standard libraries or time libraries provided by third parties to handle time in our programs. The dateparse we are going to introduce today focuses on a very small area of time processing - parsing strings in date time format.</description>
    </item>
    
    <item>
      <title>Go Channel vs Java BlockingQueue</title>
      <link>https://www.sobyte.net/post/2021-07/go-channel-vs-java-blockingqueue/</link>
      <pubDate>Fri, 02 Jul 2021 18:09:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/go-channel-vs-java-blockingqueue/</guid>
      <description>Recently, I was implementing two requirements and wanted to decouple them using a queue since there is no dependency between them; however, there is no readily available and concurrency-safe data structure in Go&amp;rsquo;s standard library; however, Go provides a more elegant solution, which is channel. Using Channel One of the major differences between Go and Java is the different concurrency model; Go uses the CSP (Communicating sequential processes) model; in</description>
    </item>
    
    <item>
      <title>Pulsar Getting Started and Introduction</title>
      <link>https://www.sobyte.net/post/2021-07/pulsar-getting-started-and-introduction/</link>
      <pubDate>Thu, 01 Jul 2021 17:55:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/pulsar-getting-started-and-introduction/</guid>
      <description>We are recently doing the technology selection for new business, which involves the selection of messaging middleware; combined with our actual situation we hope it can meet the following requirements.
 Cloud-friendly native support: because the main language is now Go, while being able to be simple enough in terms of operation and maintenance. Official SDK support for multiple languages: There is still some Python, Java related code to maintain. Preferably with some convenient and useful features, such as: delayed messages, dead letter queues, multi-tenancy, etc.</description>
    </item>
    
    <item>
      <title>Various Database Connection Strings Commonly Used by Go</title>
      <link>https://www.sobyte.net/post/2021-07/various-database-connection-strings-commonly-used-by-go/</link>
      <pubDate>Thu, 01 Jul 2021 17:27:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/various-database-connection-strings-commonly-used-by-go/</guid>
      <description>1. Relational Databases 1.1 MySQL  https://github.com/go-sql-driver/mysql/
 1 2 3 4 5 6 7 8 9 10 11 12  [username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;amp;...¶mN=valueN] // user@unix(/path/to/socket)/dbname // root:pw@unix(/tmp/mysql.sock)/myDatabase?loc=Local // user:password@tcp(localhost:5555)/dbname?tls=skip-verify&amp;amp;autocommit=true // user:password@/dbname?sql_mode=TRADITIONAL // user:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname?timeout=90s&amp;amp;collation=utf8mb4_unicode_ci // id:password@tcp(your-amazonaws-uri.com:3306)/dbname // user@cloudsql(project-id:instance-name)/dbname // user@cloudsql(project-id:regionname:instance-name)/dbname // user:password@tcp/dbname?charset=utf8mb4,utf8&amp;amp;sys_var=esc%40ped // user:password@/dbname // user:password@/   1.2 Postgres (pure Go)  https://github.com/lib/pq
 1 2 3 4 5 6 7 8 9  postgres://[user[:password]@][netloc][:port][,...][/dbname][?param1=value1&amp;amp;...] postgres:// postgres://localhost postgres://localhost:5433 postgres://localhost/mydb postgres://user@localhost postgres://user:secret@localhost postgres://other@localhost/otherdb?</description>
    </item>
    
    <item>
      <title>A pitfall of comparing empty structs in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/a-pitfall-of-comparing-empty-structs-in-golang/</link>
      <pubDate>Wed, 30 Jun 2021 19:09:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/a-pitfall-of-comparing-empty-structs-in-golang/</guid>
      <description>A reader recently encountered a new problem with struct that he could not solve. Examples of Doubt The example 1 it gives is as follows. 1 2 3 4 5 6 7 type People struct {} func main() { a := &amp;amp;People{} b := &amp;amp;People{} fmt.Println(a == b) } What do you think the output will be? The output is: false. With a little more modification, Example 2 is as</description>
    </item>
    
    <item>
      <title>Golang Cron V3 Timed Tasks</title>
      <link>https://www.sobyte.net/post/2021-06/golang-cron-v3-timed-tasks/</link>
      <pubDate>Wed, 30 Jun 2021 12:06:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/golang-cron-v3-timed-tasks/</guid>
      <description>Recently I need to use the timed task function in golang, I use a cron library, the current version is v3, the Internet is quite a lot of v2 tutorials, record the use of the method.
In the old version of the library, the default cron expression is not the standard format, the first bit is the definition of the second level. Now the v3 version can use the standard cron expression directly, mainly see the godoc documentation section</description>
    </item>
    
    <item>
      <title>Tutorials for using resty</title>
      <link>https://www.sobyte.net/post/2021-06/tutorials-for-using-resty/</link>
      <pubDate>Tue, 29 Jun 2021 11:35:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/tutorials-for-using-resty/</guid>
      <description>resty is an HTTP client library for the Go language. resty is powerful and feature-rich. It supports almost all HTTP methods (GET/POST/PUT/DELETE/OPTION/HEAD/PATCH, etc.) and provides an easy-to-use API.
Quick Use  The code in this article uses Go Modules.
 Create the directory and initialize.
1 2  $ mkdir resty &amp;amp;&amp;amp; cd resty $ go mod init github.com/darjun/go-daily-lib/resty   Install the resty library.
1  $ go get -u github.</description>
    </item>
    
    <item>
      <title>Golang - Number of Threads in the Running Program</title>
      <link>https://www.sobyte.net/post/2021-06/golang-number-of-threads-in-the-running-program/</link>
      <pubDate>Tue, 29 Jun 2021 11:05:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/golang-number-of-threads-in-the-running-program/</guid>
      <description>Programmers who are a little bit introduced to the Go language know that the GOMAXPROCS variable can limit the maximum number of threads that can concurrently run the user-state Go code operating system, and you can even change the size of the maximum number of threads at program runtime by calling the function func GOMAXPROCS(n int) int, but when you read the documentation further, or more When you read the documentation further, or go deeper into Go language development, you will find that the actual number of threads is larger than the number you set, sometimes much larger than the value you set, and even more tragically, even when your concurrent tasks are backed up to no more than a few, the number of threads has not come down, wasting memory space and CPU scheduling for nothing.</description>
    </item>
    
    <item>
      <title>Deeper Into the Go Module - the Pesky V2</title>
      <link>https://www.sobyte.net/post/2021-06/deeper-into-the-go-module-the-pesky-v2/</link>
      <pubDate>Mon, 28 Jun 2021 18:51:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/deeper-into-the-go-module-the-pesky-v2/</guid>
      <description>The Go module not only follows the semantic version specification 2.0.0, but also goes a step further by giving deeper meaning to the major in the semantic version.
 X.X: For the case where the major version number (major) is 0, it implies that your current API is still in an unstable state, and the new minor version may not be backward compatible. X.X: the current API is in a stable state, the increase of minor only means the increase of new feature, the API is still backward compatible X.</description>
    </item>
    
    <item>
      <title>Some Tips for Using Json in Go</title>
      <link>https://www.sobyte.net/post/2021-06/some-tips-for-using-json-in-go/</link>
      <pubDate>Mon, 28 Jun 2021 18:08:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/some-tips-for-using-json-in-go/</guid>
      <description>This article summarizes the problems and solutions I usually encounter in my projects regarding the interconversion between go language JSON data and structs.
Basic Serialization First let&amp;rsquo;s look at the basic usage of json.Marshal() (serialization) and json.Unmarshal (deserialization) in the Go language.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  type Person struct { Name string Age int64 Weight float64 } func main() { p1 := Person{ Name: &amp;#34;Qimi&amp;#34;, Age: 18, Weight: 71.</description>
    </item>
    
    <item>
      <title>Running Go Generic Code Locally</title>
      <link>https://www.sobyte.net/post/2021-06/running-go-generic-code-locally/</link>
      <pubDate>Sat, 26 Jun 2021 15:25:56 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/running-go-generic-code-locally/</guid>
      <description>Last year Ian Lance Taylor and Robert Griesemer released a new draft of Go generics (The Next Step for Generics), and the response from Gopher at home and abroad was overwhelming, with everyone interpreting the draft and this article, and feeling that this version of Go generic design is basically close to Go&amp;rsquo;s generic goals, and in short, much better than the previous one.
Ian also provided an online compilation tool, go2go, to get a taste of Go generic programming.</description>
    </item>
    
    <item>
      <title>Sqlx Library Usage Guide</title>
      <link>https://www.sobyte.net/post/2021-06/sqlx-library-usage-guide/</link>
      <pubDate>Sat, 26 Jun 2021 11:26:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/sqlx-library-usage-guide/</guid>
      <description>In projects we may usually use database/sql to connect to MySQL databases. This article introduces the sqlx.In and DB.NamedExec methods in sqlx that you may have overlooked, with the help of an example of using sqlx to achieve bulk insert data. Introduction to sqlx In a project we may usually use database/sql to connect to a MySQL database. sqlx can be thought of as a superset of the Go language&amp;rsquo;s</description>
    </item>
    
    <item>
      <title>Several Ways to Convert Struct to map[string]interface{}</title>
      <link>https://www.sobyte.net/post/2021-06/several-ways-to-convert-struct-to-mapstringinterface/</link>
      <pubDate>Fri, 25 Jun 2021 16:54:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/several-ways-to-convert-struct-to-mapstringinterface/</guid>
      <description>This article describes the &amp;ldquo;pitfalls&amp;rdquo; you need to know when converting struct to map[string]interface{} in Go, and also some of the methods you need to know.
We usually use struct in Go to store our data, for example, to store user information, we might define the following struct.
1 2 3 4 5 6 7  // UserInfo type UserInfo struct { Name string `json:&amp;#34;name&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } u1 := UserInfo{Name: &amp;#34;q1mi&amp;#34;, Age: 18}   struct to map[string]interface JSON serialization method Serialize u1 with JSON, then deserialize to map</description>
    </item>
    
    <item>
      <title>Real Time Hot Reloading of Go Programs Using Air</title>
      <link>https://www.sobyte.net/post/2021-06/real-time-hot-reloading-of-go-programs-using-air/</link>
      <pubDate>Sat, 19 Jun 2021 12:28:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/real-time-hot-reloading-of-go-programs-using-air/</guid>
      <description>Today we want to introduce a magic tool - Air can listen to the project&amp;rsquo;s code files in real time, and automatically recompile and execute the code after changes, greatly improving the development efficiency of gin framework projects.
Why do I need real-time loading When using Python to write Web projects, the common Flask or Django frameworks support live-loading, and after you modify the project code, the program can automatically reload and execute (live-reload), which is very convenient in the daily development phase.</description>
    </item>
    
    <item>
      <title>Fasttemplate Simple Tutorial</title>
      <link>https://www.sobyte.net/post/2021-06/fasttemplate-simple-tutorial/</link>
      <pubDate>Fri, 18 Jun 2021 14:06:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/fasttemplate-simple-tutorial/</guid>
      <description>fasttemplate is a relatively simple and easy to use small template library . The author of fasttemplate, valyala, has additionally open sourced a number of excellent libraries, such as the famous fasthttp.
fasttemlate only focuses on a very small area - string replacement. Its goal is to replace strings.Replace, fmt.Sprintf and other methods to provide a simple, easy-to-use, high-performance string replacement method.
Quick Use Create the directory and initialize.
1 2  $ mkdir fasttemplate &amp;amp;&amp;amp; cd fasttemplate $ go mod init github.</description>
    </item>
    
    <item>
      <title>Go os/exec Short Tutorial</title>
      <link>https://www.sobyte.net/post/2021-06/go-os-exec-short-tutorial/</link>
      <pubDate>Fri, 18 Jun 2021 10:53:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/go-os-exec-short-tutorial/</guid>
      <description>The Go standard library provides convenient methods to run external commands easily. Generally we use the methods under the os/exec package to execute external commands and interact with external commands. os/exec wraps the os.StartProcess method for easier access to input and output, providing I/O pipe and other features. I will dedicate two articles to Go&amp;rsquo;s methods for starting new processes and executing external commands, this is the first one, dedicated to the os/exec library.</description>
    </item>
    
    <item>
      <title>Using Gomock for Unit Testing in Go</title>
      <link>https://www.sobyte.net/post/2021-06/using-gomock-for-unit-testing-in-go/</link>
      <pubDate>Thu, 17 Jun 2021 20:27:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/using-gomock-for-unit-testing-in-go/</guid>
      <description>In real projects, when you need to do unit testing. But often you find that there are a lot of dependencies. That&amp;rsquo;s where Gomock comes in handy!
Gomock is an official mock framework for the Go language
Installation 1 2  $ go get -u github.com/golang/mock/gomock $ go install github.com/golang/mock/mockgen     Step 1: We will install the gomock third-party library and the mock code generation tool, mockgen, which will save us a lot of work.</description>
    </item>
    
    <item>
      <title>Several Ways to Stop Goroutine in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/several-ways-to-stop-goroutine-in-golang/</link>
      <pubDate>Thu, 17 Jun 2021 10:16:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/several-ways-to-stop-goroutine-in-golang/</guid>
      <description>goroutine case In our daily work, we often have code that starts a goroutine using the go keyword.
1 2 3 4 5 6 7 8  func main() { ch := make(chan string, 6) go func() { for { ch &amp;lt;- &amp;#34;Hello&amp;#34; } }() }   A first-time goroutine developer may think it&amp;rsquo;s over, but after running for a while, he may run into some problems and struggle to figure out&amp;hellip;</description>
    </item>
    
    <item>
      <title>Easily Print Web Pages And Generate Pdf Documents</title>
      <link>https://www.sobyte.net/post/2021-06/easily-print-web-pages-and-generate-pdf-documents/</link>
      <pubDate>Wed, 16 Jun 2021 16:32:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/easily-print-web-pages-and-generate-pdf-documents/</guid>
      <description>chromedp is a faster and simpler Go library that supports the Chrome DevTools Protocol, it is one of the most popular headless browser libraries, you can use it to do a lot of tasks that can only be performed through the browser, such as web screenshots, web rendering tests, downloading videos, simulating login, etc. Today Today I&amp;rsquo;m going to introduce a useful and simple feature: generating a pdf screenshot of</description>
    </item>
    
    <item>
      <title>Use of the Go Empty Struct</title>
      <link>https://www.sobyte.net/post/2021-06/use-of-the-go-empty-struct/</link>
      <pubDate>Tue, 15 Jun 2021 19:37:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/use-of-the-go-empty-struct/</guid>
      <description>1 Does an empty structure take up space? In Go, we can use unsafe.Sizeof to calculate the number of bytes an instance of a data type needs to occupy.
1 2 3 4 5 6 7 8 9 10  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;unsafe&amp;#34; ) func main() { fmt.Println(unsafe.Sizeof(struct{}{})) }   Running the above example will output:
1 2  $ go run main.go 0   That is, an instance of the empty struct struct{} does not occupy any memory space.</description>
    </item>
    
    <item>
      <title>How to Import Local Packages Using Go Module</title>
      <link>https://www.sobyte.net/post/2021-06/how-to-import-local-packages-using-go-module/</link>
      <pubDate>Tue, 15 Jun 2021 11:15:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/how-to-import-local-packages-using-go-module/</guid>
      <description>go module is the official version management tool introduced after Go 1.11, and since Go 1.13, go module has been the default dependency management tool for the Go language. Since Go 1.14, the go modules feature has been officially recommended for use in production environments.
Here is a detailed description of how to use the go module to import local packages.
Prerequisites Suppose we now have two packages, moduledemo and mypackage, where the moduledemo package will import the mypackage package and use its New method.</description>
    </item>
    
    <item>
      <title>Go Embed Brief Tutorial</title>
      <link>https://www.sobyte.net/post/2021-06/go-embed-brief-tutorial/</link>
      <pubDate>Tue, 15 Jun 2021 10:50:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/go-embed-brief-tutorial/</guid>
      <description>Go compiles programs that are perfect for deployment, and if no other libraries are referenced through CGO, we generally compile executable binaries that are single files, perfect for copying and deployment. In practice, in addition to binaries, you may also need some configuration files, or static files, such as html templates, static images, CSS, javascript, etc. How these files can also be typed into the binary would be fantastic, and we could just copy and follow the single executable.</description>
    </item>
    
    <item>
      <title>Several Cases of Goroutine Leaks in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/several-cases-of-goroutine-leaks-in-golang/</link>
      <pubDate>Mon, 14 Jun 2021 10:34:56 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/several-cases-of-goroutine-leaks-in-golang/</guid>
      <description>Goroutine 1 2 3  for { go func() {}() }   The threshold for using Goroutine is really low, and there are a lot of abuses.
Goroutine Leak The causes of Goroutine leaks are usually:
 Read/write operations such as channel/mutex are being performed inside Goroutine, but due to logic problems, they are blocked all the time in some cases. The business logic within the Goroutine enters a dead loop and resources are never released.</description>
    </item>
    
    <item>
      <title>Const in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/const-in-golang/</link>
      <pubDate>Mon, 14 Jun 2021 09:44:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/const-in-golang/</guid>
      <description>Constants are arguably present in every code file, and there are many benefits to using them.
 Avoid magic literals, i.e. numbers, strings, etc. that appear directly in the code. It is not possible to read the code and see what it means at a glance. It also avoids the inconsistencies that can occur when using literals. When their values need to be modified, constants only need to be modified in one place, while literals need to be modified in multiple places, making it easy to miss inconsistencies.</description>
    </item>
    
    <item>
      <title>Implementing Unlimited Cached Channels in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/implementing-unlimited-cached-channels-in-golang/</link>
      <pubDate>Sun, 13 Jun 2021 17:08:29 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/implementing-unlimited-cached-channels-in-golang/</guid>
      <description>There are two types of channels in Go language, a channel without cache and a buffer with cache, both of which we are familiar with.
Why am I suddenly talking about this infinite cache channel? The main reason is that I was recently reviewing a colleague&amp;rsquo;s code and I had a problem with a certain design idea that would have been solved by using an infinite cache channel.
 A dispatcher contains a channel, which holds the URLs to be processed A bunch of workers read tasks from the channel, download and parse the page, extract the links, and put the links into the dispatcher.</description>
    </item>
    
  </channel>
</rss>
