<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dropbox on SoByte</title>
    <link>https://www.sobyte.net/tags/dropbox/</link>
    <description>Recent content in dropbox on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 18 Dec 2021 11:29:25 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/dropbox/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using DropBox as a Private Git Repository</title>
      <link>https://www.sobyte.net/post/2021-12/using-dropbox-as-git-remote-rep/</link>
      <pubDate>Sat, 18 Dec 2021 11:29:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/using-dropbox-as-git-remote-rep/</guid>
      <description>I. Preface I&amp;rsquo;ve been working on some small projects that I can&amp;rsquo;t easily make public on GitHub, but I wanted to have a simple private repository.
So I came up with DropBox.
However, we couldn&amp;rsquo;t simply put the project in the DropBox directory, because that would cause every simple save to initiate a file sync, and some temporary file changes during compilation would cause the DropBox to sync, which would drive the CPU usage of the computer very high.</description>
    </item>
    
    <item>
      <title>Dropbox account password storage practices</title>
      <link>https://www.sobyte.net/post/2021-11/how-dropbox-securely-stores-your-passwords/</link>
      <pubDate>Fri, 05 Nov 2021 13:14:21 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/how-dropbox-securely-stores-your-passwords/</guid>
      <description>As we all know, storing plaintext passwords is a very bad thing. If a database stores a plaintext password, if the data is leaked, then the user account is in danger. Because of this, back in 1976, industry came up with a set of standards for storing passwords securely using a one-way hashing mechanism (starting with Unix Crypt). Unfortunately, while this approach prevents you from reading the password directly, all the hashing mechanism does is prevent an attacker from brute-force cracking it in an offline environment, where the attacker simply traverses a list of possible passwords containing the correct password, hashes each possible password and then compares it to the obtained password (the one stored using the hashing mechanism).</description>
    </item>
    
  </channel>
</rss>
