<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>structopt on SoByte</title>
    <link>https://www.sobyte.net/tags/structopt/</link>
    <description>Recent content in structopt on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 19 Jul 2021 10:50:12 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/structopt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Manual for structopt library</title>
      <link>https://www.sobyte.net/post/2021-07/rust-lib-structopt/</link>
      <pubDate>Mon, 19 Jul 2021 10:50:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/rust-lib-structopt/</guid>
      <description>The standard library provides std::env::args() to get command line arguments, the first value is the name of the program, similar to the way arguments are obtained in other languages:
1 2 3 4 5  letargs: Vec&amp;lt;String&amp;gt;=env::args().collect();letquery=&amp;amp;args[1];letfilename=&amp;amp;args[2];println!(&amp;#34;Searching for {}&amp;#34;,query);println!(&amp;#34;In file {}&amp;#34;,filename);  But in the process of product development, we need more program parameters, and need certain rules and checks, this time we need to use some other libraries to parse these parameters, such as the structopt library.</description>
    </item>
    
  </channel>
</rss>
