<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pulsar on SoByte</title>
    <link>https://www.sobyte.net/tags/pulsar/</link>
    <description>Recent content in pulsar on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 18 Mar 2022 16:29:32 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/pulsar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pulsar Repeat Consumption</title>
      <link>https://www.sobyte.net/post/2022-03/pulsar-repeat-consume/</link>
      <pubDate>Fri, 18 Mar 2022 16:29:32 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/pulsar-repeat-consume/</guid>
      <description>I recently helped a colleague troubleshoot a problem where the same message was being consumed repeatedly when using Pulsar.
Troubleshoot I was skeptical when he told me about this phenomenon, based on my previous experience with Pulsar, which is explained in the official documentation and API.
Only when the ackTimeout for consumption is set and the consumption timeout is timed out will the message be recast, which is off by default and really not on by looking at the code.</description>
    </item>
    
    <item>
      <title>Pulsar transaction implementation principle</title>
      <link>https://www.sobyte.net/post/2022-03/pulsar-transaction/</link>
      <pubDate>Fri, 04 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/pulsar-transaction/</guid>
      <description>Apache Pulsar is a multi-tenant, high-performance inter-service messaging solution that supports multi-tenancy, low latency, read/write separation, cross-territory replication, fast scaling, flexible fault tolerance, and other features. This article will briefly introduce some concepts and principles of Pulsar server-side message acknowledgement. Preface Before transactional messages were available, the highest level of messaging assurance supported in Pulsar was to ensure that a Producer&amp;rsquo;s messages were saved exactly once on a single partition</description>
    </item>
    
    <item>
      <title>Pulsar characteristics explained [Effectively once]</title>
      <link>https://www.sobyte.net/post/2021-08/pulsar-effectively-once/</link>
      <pubDate>Sun, 29 Aug 2021 18:52:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/pulsar-effectively-once/</guid>
      <description>https://www.splunk.com/en_us/blog/it/effectively-once-semantics-in-apache-pulsar.html
 The article by pulsar describes in detail how Effectively once is supported, so I will not repeat it in this article, but will just summarise the conclusions described in the article below. The source code will be parsed later.
In order to implement Effectively once, pulsar supports it in two ways.
 Effectively-once publishing: ensuring that messages are sent only once Effectively-once consumer: ensuring that messages are consumed only once  Effectively-once publishing pulsar supports the guarantee that only one copy of a message will be stored in pulsar in the event of extreme conditions such as broker failure, producer failure, network failure, etc.</description>
    </item>
    
    <item>
      <title>Pulsar Getting Started and Introduction</title>
      <link>https://www.sobyte.net/post/2021-07/pulsar-getting-started-and-introduction/</link>
      <pubDate>Thu, 01 Jul 2021 17:55:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/pulsar-getting-started-and-introduction/</guid>
      <description>We are recently doing the technology selection for new business, which involves the selection of messaging middleware; combined with our actual situation we hope it can meet the following requirements.
 Cloud-friendly native support: because the main language is now Go, while being able to be simple enough in terms of operation and maintenance. Official SDK support for multiple languages: There is still some Python, Java related code to maintain. Preferably with some convenient and useful features, such as: delayed messages, dead letter queues, multi-tenancy, etc.</description>
    </item>
    
  </channel>
</rss>
