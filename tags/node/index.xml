<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>node on SoByte</title>
    <link>https://www.sobyte.net/tags/node/</link>
    <description>Recent content in node on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 09 Feb 2022 13:17:53 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/node/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Communicating with C&#43;&#43; code in NodeJS</title>
      <link>https://www.sobyte.net/post/2022-02/communicate-with-cpp-code-in-node/</link>
      <pubDate>Wed, 09 Feb 2022 13:17:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/communicate-with-cpp-code-in-node/</guid>
      <description>I recently encountered a problem in my project where I needed to call C++ code in NodeJS, so here&amp;rsquo;s a quick summary.
The main options In NodeJS, there are two main options for communicating with code written in other languages.
 Using the AddOn technique, write an extension to NodeJS using C++ and then call the source code or dynamic libraries written in other languages in the code using the FFI (Foreign Function Interface) technique, which brings in dynamic libraries written in other languages directly in Node  A comparison of these two approaches shows that each has its own advantages and disadvantages.</description>
    </item>
    
  </channel>
</rss>
