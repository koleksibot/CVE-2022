<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>electron on SoByte</title>
    <link>https://www.sobyte.net/tags/electron/</link>
    <description>Recent content in electron on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Jan 2022 11:36:55 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/electron/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Electron application multiple open indexedDB open exception problem analysis and solution</title>
      <link>https://www.sobyte.net/post/2022-01/multiple-electron-instances-indexeddb-domexception/</link>
      <pubDate>Sun, 09 Jan 2022 11:36:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/multiple-electron-instances-indexeddb-domexception/</guid>
      <description>Multiple application instances in electron will have indexedDB multiple open exceptions due to session sharing. Roughly, you will encounter an error like the following. 1 DOMException: Internal error opening backing store for indexedDB.open. When indexedDB is used in an application, this is a problem that will definitely be faced and needs to be solved. If it is not necessary, you can detect and disable multiple application sessions at startup. If</description>
    </item>
    
    <item>
      <title>Electron self-compiled application crash debugging analysis method</title>
      <link>https://www.sobyte.net/post/2021-09/electron-crash-sentry/</link>
      <pubDate>Wed, 22 Sep 2021 16:09:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/electron-crash-sentry/</guid>
      <description>Application crashes in Electron If the exception is only caused by Javascript, you can listen for the relevant Error type event in the application logic and handle it. By listening for crashed related events, you can listen for and respond to application crashes within the application. 1 2 3 4 app.on(&amp;#39;gpu-process-crashed&amp;#39;, (_event, killed) =&amp;gt; {}); app.on(&amp;#39;renderer-process-crashed&amp;#39;, (_e, _w, killed) =&amp;gt; {}); mainWindow.webContents.on(&amp;#39;plugin-crashed&amp;#39;, (_ev, name, version) =&amp;gt; {}); mainWindow.webContents.on(&amp;#39;crashed&amp;#39;, (ev, killed)</description>
    </item>
    
    <item>
      <title>System information gathering and performance monitoring in Electron applications</title>
      <link>https://www.sobyte.net/post/2021-09/electron-app-sysinfo-stats/</link>
      <pubDate>Wed, 22 Sep 2021 15:58:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/electron-app-sysinfo-stats/</guid>
      <description>When analyzing problems with Electron applications, relevant system operation information is sometimes essential, so naturally there is a need for system base information collection and operation performance monitoring. The native capabilities in Electron are based on Node.js, so most of the system data collection for Electron applications is based on the capabilities provided by Node.js. In Node.js applications, various system-related information can be obtained mainly through the process and os</description>
    </item>
    
  </channel>
</rss>
