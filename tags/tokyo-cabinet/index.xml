<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tokyo-cabinet on SoByte</title>
    <link>https://www.sobyte.net/tags/tokyo-cabinet/</link>
    <description>Recent content in tokyo-cabinet on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Jan 2022 13:23:27 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/tokyo-cabinet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using the Tokyo Cabinet Key/Value Database in Golang</title>
      <link>https://www.sobyte.net/post/2022-01/golang-tokyo-cabinet/</link>
      <pubDate>Fri, 14 Jan 2022 13:23:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/golang-tokyo-cabinet/</guid>
      <description>Tokyo Cabinet is an early KV database developed in C. It also supports a wide range of data structures, mainly for its fast read and write performance at certain levels of data volume.
Tokyo Cabinet data structure.
Here is a simple read/write comparison with goleveldb and boltdb, using Tokyo Cabinet&amp;rsquo;s Hash data structure.
10 data tests 1 2 3 4 5 6 7 8 9 10 11 12 13 14  % go test -bench &amp;#34;Benchmark*&amp;#34; -benchmem -benchtime 10s kvLst len 20 db size 7847B 0MB goos: darwin goarch: amd64 pkg: tk cpu: Intel(R) Core(TM) i7-4870HQ CPU @ 2.</description>
    </item>
    
  </channel>
</rss>
