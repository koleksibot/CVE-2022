<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>badger on SoByte</title>
    <link>https://www.sobyte.net/tags/badger/</link>
    <description>Recent content in badger on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Jan 2022 13:11:30 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/badger/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>badger transaction process</title>
      <link>https://www.sobyte.net/post/2022-01/badger-tx/</link>
      <pubDate>Wed, 12 Jan 2022 13:11:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/badger-tx/</guid>
      <description>badger is dgraph&amp;rsquo;s open source LSMTree KV engine, which has KV separation, transaction, concurrent merge and other enhancements compared to leveldb, and is a more production-level storage engine in the go ecosystem. Here is a look at its transaction implementation. badger implements Serializable Snapshot isolation level (SSI) for optimistic concurrency-controlled transactions. Compared to Snapshot isolation level (SI), SSI tracks read operations in a transaction in addition to write operations for</description>
    </item>
    
  </channel>
</rss>
