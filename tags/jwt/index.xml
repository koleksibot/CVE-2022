<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jwt on SoByte</title>
    <link>https://www.sobyte.net/tags/jwt/</link>
    <description>Recent content in jwt on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Mar 2022 15:48:37 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/jwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript Object Signing and Encryption</title>
      <link>https://www.sobyte.net/post/2022-03/jose/</link>
      <pubDate>Thu, 03 Mar 2022 15:48:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/jose/</guid>
      <description>The rise of mobile and the popularity of OAuth2 has led to JWT being a hot mess these past few years. Today we are going to introduce another specification set, JOSE, called Javascript Object Signing and Encryption, which has a lot to do with JWT.
JOSE Introduction JOSE is a Javascript object signing and encryption protocol designed to provide a method for securely transmitting declarations (claims, such as authorization information) between communicating parties, purposely built on top of JSON and BASE64 for easy use in Web applications.</description>
    </item>
    
    <item>
      <title>Using JWT for user authentication in Golang</title>
      <link>https://www.sobyte.net/post/2022-01/golang-jwt/</link>
      <pubDate>Tue, 04 Jan 2022 20:51:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/golang-jwt/</guid>
      <description>Doing user authentication with JWT is a relatively simple way. Common authentication methods The mainstream methods of user authentication are broadly classified as session-based and token-based. User authentication with JWT sesion-based authentication method User sends username and password to the server. The server authenticates and saves relevant data in the current conversation (sesion), such as user role, login time, etc. The server returns a session_id to the user, which is</description>
    </item>
    
  </channel>
</rss>
