<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lua on SoByte</title>
    <link>https://www.sobyte.net/tags/lua/</link>
    <description>Recent content in lua on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 04 Jan 2022 12:26:51 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why there are no more global variables in Lua 5.3</title>
      <link>https://www.sobyte.net/post/2022-01/lua53-environment/</link>
      <pubDate>Tue, 04 Jan 2022 12:26:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/lua53-environment/</guid>
      <description>I&amp;rsquo;ve been using Lua 5.1 in the past, and I don&amp;rsquo;t know much about _ENV in Lua 5.3. Recently, I used Lua 5.3 in a new project, so I looked into it. This article summarizes the meaning of the environment and global variables in Lua 5.3, _ENV and their usage.
Types of Lua variables Lua variables can be classified as local, upvalue and global variables. Anyone who has used Lua a lot should be familiar with it, as an example:</description>
    </item>
    
    <item>
      <title>Parsing syntax using LPeg</title>
      <link>https://www.sobyte.net/post/2022-01/lpeg/</link>
      <pubDate>Mon, 03 Jan 2022 11:47:07 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/lpeg/</guid>
      <description>LPeg is a pattern matching library for Lua. When I was first introduced to LPeg, I thought it was just another form of regular expression; I found out that it is much more powerful than regular expressions, and can easily match complex patterns that are difficult to match with regular expressions, and even parse syntax. In fact, LPeg is Parsing Expression Grammars for Lua, which is designed to parse grammars. LPeg makes it easy to parse all kinds of grammars, for example in 400 lines of code parsing Lua source code into abstract syntax trees.</description>
    </item>
    
    <item>
      <title>An interesting problem with the Lua next function</title>
      <link>https://www.sobyte.net/post/2022-01/lua-next/</link>
      <pubDate>Mon, 03 Jan 2022 11:34:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/lua-next/</guid>
      <description>Anyone familiar with Lua knows that Lua allows you to modify and delete elements in a for ... pairs loop. pairs` loops to modify and delete elements in a table. There is nothing wrong with the following code:
1 2 3 4 5 6  local t = {a = 1, b = 2, c = 3} for k, v in pairs(t) do if v == 1 then t[k] = nil end end   However, if we delete elements and add new elements while traversing, there will be a problem.</description>
    </item>
    
    <item>
      <title>Automatic generation of Lua hot update code</title>
      <link>https://www.sobyte.net/post/2022-01/hotfix-gen/</link>
      <pubDate>Mon, 03 Jan 2022 11:02:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/hotfix-gen/</guid>
      <description>One of the main reasons why game servers use Lua is that it is easy to hot update. Even if the server is running, you can rewrite some of its functions for hot update purposes by simply having it execute a piece of code. For example, the module app has a function foo
1 2 3 4 5 6 7  local M = {} function M.foo(a, b) return a + b end return M   If we want to hot change foo to multiply a and b, we just need to have the server load and run the following code:</description>
    </item>
    
    <item>
      <title>Lua &#43; Redis does dynamic routing to nginx</title>
      <link>https://www.sobyte.net/post/2021-10/fastdfs-lua-redis/</link>
      <pubDate>Mon, 04 Oct 2021 10:13:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/fastdfs-lua-redis/</guid>
      <description>Since FastDFS distributed file storage does not retain the original file name when uploading files, when the file is uploaded it returns a file ID in the following format, which contains the group the file is in, the secondary directory, and a base64-encoded file name generated from the client&amp;rsquo;s IP, timestamp, and file size. The file ID is stored in the client database and can only be accessed by the</description>
    </item>
    
  </channel>
</rss>
