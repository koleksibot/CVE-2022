<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chan on SoByte</title>
    <link>https://www.sobyte.net/tags/chan/</link>
    <description>Recent content in chan on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Jun 2021 17:08:29 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/chan/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing Unlimited Cached Channels in Golang</title>
      <link>https://www.sobyte.net/post/2021-06/implementing-unlimited-cached-channels-in-golang/</link>
      <pubDate>Sun, 13 Jun 2021 17:08:29 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/implementing-unlimited-cached-channels-in-golang/</guid>
      <description>There are two types of channels in Go language, a channel without cache and a buffer with cache, both of which we are familiar with.
Why am I suddenly talking about this infinite cache channel? The main reason is that I was recently reviewing a colleague&amp;rsquo;s code and I had a problem with a certain design idea that would have been solved by using an infinite cache channel.
 A dispatcher contains a channel, which holds the URLs to be processed A bunch of workers read tasks from the channel, download and parse the page, extract the links, and put the links into the dispatcher.</description>
    </item>
    
  </channel>
</rss>
