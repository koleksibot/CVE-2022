<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphql on SoByte</title>
    <link>https://www.sobyte.net/tags/graphql/</link>
    <description>Recent content in graphql on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Jan 2022 20:43:07 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/graphql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using graphql in ts </title>
      <link>https://www.sobyte.net/post/2022-01/ts-graphql/</link>
      <pubDate>Sun, 16 Jan 2022 20:43:07 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/ts-graphql/</guid>
      <description>Scenarios graphql provides consistent api architecture metadata on the front and back ends, while speeding up the performance of web-backend interactions through request merging and on-demand fetching.
Use with ts Basic idea
 scan all gql strings in the code get the graphql strings in the code and generate type definitions use these type definitions  Steps to use  Here is a demonstration using github api@v4
 Get the back-end metadata</description>
    </item>
    
    <item>
      <title>GraphQL and REST: Two API Architectures</title>
      <link>https://www.sobyte.net/post/2021-12/graphql-rest/</link>
      <pubDate>Mon, 27 Dec 2021 19:31:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/graphql-rest/</guid>
      <description>GraphQL is both a query language for the API and a runtime for your data queries. GraphQL provides a complete set of easy-to-understand descriptions of the data in your API, allowing the client to get exactly the data it needs without any redundancy, and making it easier for the API to evolve over time, as well as for building powerful developer tools.
 Over the last decade, REST has become the design standard for Web APIs, providing some great ideas such as stateless servers and structured access to resources.</description>
    </item>
    
  </channel>
</rss>
