<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hyperledger fabric on SoByte</title>
    <link>https://www.sobyte.net/tags/hyperledger-fabric/</link>
    <description>Recent content in hyperledger fabric on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Sep 2021 15:46:09 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/hyperledger-fabric/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Etcdraft consensus in Fabric</title>
      <link>https://www.sobyte.net/post/2021-09/etcdraft-exploration-in-fabric-orderer/</link>
      <pubDate>Fri, 10 Sep 2021 15:46:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/etcdraft-exploration-in-fabric-orderer/</guid>
      <description>Why consensus via etcdraft? I think there are the following reasons solo is not suitable for most scenarios, e.g. organization A, organization B, both want to place consensus nodes in themselves kafka can meet the above requirements, but kafka plus zookeeper requires extra deployment and is too heavy to deploy So here comes the consensus based on etcdraft, which solves the above pain points Say it three times! Don&amp;rsquo;t miss</description>
    </item>
    
  </channel>
</rss>
