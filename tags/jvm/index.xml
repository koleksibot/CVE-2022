<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jvm on SoByte</title>
    <link>https://www.sobyte.net/tags/jvm/</link>
    <description>Recent content in jvm on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Jan 2022 13:20:26 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZGC Notes: Colored Pointers</title>
      <link>https://www.sobyte.net/post/2022-01/notes-zgc/</link>
      <pubDate>Wed, 12 Jan 2022 13:20:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/notes-zgc/</guid>
      <description>ZGC is a new generation of garbage collector introduced from jdk11, the expected stopping time is less than 10ms, and the stopping time is independent of heap size, and it can support tb-level heap.
As a fan of go, isn&amp;rsquo;t go&amp;rsquo;s GC already pretty good? The Initial Mark has a little STW, and the usual gc pause is less than ms? In fact, the effect of go GC is still far from the promise of ZGC, not when it comes to large heaps.</description>
    </item>
    
    <item>
      <title>Microsoft open source GCToolkit, a tool for parsing GC logs</title>
      <link>https://www.sobyte.net/post/2021-08/microsoft-gctoolkit-open-source/</link>
      <pubDate>Tue, 10 Aug 2021 17:55:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/microsoft-gctoolkit-open-source/</guid>
      <description>Microsoft&amp;rsquo;s Java Engineering Group has announced the open source availability of GCToolkit, a set of libraries for analyzing Java garbage collection (GC) log files.
According to the introduction, the GCToolkit toolkit parses GC log files into discrete events and provides an API for aggregating data from these events, enabling users to perform arbitrarily complex analyses of the state of managed memory in the Java Virtual Machine (JVM) as represented by garbage collection logs.</description>
    </item>
    
  </channel>
</rss>
