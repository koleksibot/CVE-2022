<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on SoByte</title>
    <link>https://www.sobyte.net/tags/docker/</link>
    <description>Recent content in docker on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Mar 2022 08:58:18 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rails on Docker: Build a development environment with Docker Compose</title>
      <link>https://www.sobyte.net/post/2022-03/rails-on-docker/</link>
      <pubDate>Tue, 22 Mar 2022 08:58:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rails-on-docker/</guid>
      <description>Why use Docker First of all, why should I use Docker in a development environment when it&amp;rsquo;s better to build it directly on my local system? Using Docker in a development environment provides the following benefits. Solidify the development environment into a configuration file, which makes it easy for new developers to start. Isolating system dependencies across projects to avoid interactions. Make the development environment as close to the production</description>
    </item>
    
    <item>
      <title>How to cache third-party dependencies in a phased build</title>
      <link>https://www.sobyte.net/post/2022-03/how-to-cache-third-party-package-whilie-building-in-stage/</link>
      <pubDate>Sat, 19 Mar 2022 11:39:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/how-to-cache-third-party-package-whilie-building-in-stage/</guid>
      <description>In non-phased build scenarios, when using containers for builds, we can mount the cache directory in the container to the build host to perform the build task; then copy the product to the run image to make the application image. However, in a phased build, the build image and the run image are in the same Dockerfile, which makes it difficult to optimize the cache for third-party dependencies.
1. Create a Vue instance project   Install the Vue CLI</description>
    </item>
    
    <item>
      <title>Migrating Docker storage to a new drive</title>
      <link>https://www.sobyte.net/post/2022-03/how-to-migrate-docker-storage-to-new-disk/</link>
      <pubDate>Sat, 19 Mar 2022 11:34:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/how-to-migrate-docker-storage-to-new-disk/</guid>
      <description>1. hard disk formatting   View new disk
1  fdisk -l     Usually, the name of the second hard disk will be /dev/sdb.
  Disk partition
1  fdisk /dev/sdb     There will be a prompt to enter the following parameters.
1 2 3 4  command (m for help):n Partition number(1-4):1 First cylinder (1-22800,default 1):Enter command (m for help):w     Format the disk as ext4</description>
    </item>
    
    <item>
      <title>Build container images in the pipeline using the docker in pod method</title>
      <link>https://www.sobyte.net/post/2022-03/docker-in-pod/</link>
      <pubDate>Fri, 18 Mar 2022 09:03:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/docker-in-pod/</guid>
      <description>docker has been criticized in the Kubernetes community for being a CRI, but it&amp;rsquo;s important to understand that CRIs are only part of docker&amp;rsquo;s functionality. There are still many areas that rely heavily on docker for local development testing or CI/CD streamline image builds. For example, docker&amp;rsquo;s official build-push-action is the preferred method for building container images on GitHub. Even docker&amp;rsquo;s rivals podman + skopeo + buildah are using docker</description>
    </item>
    
    <item>
      <title>Container tool without Daemon process: Podman</title>
      <link>https://www.sobyte.net/post/2022-03/podman/</link>
      <pubDate>Mon, 14 Mar 2022 09:19:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/podman/</guid>
      <description>What is a container Linux container technology A Linux container is a process with specific isolation provided by the Linux Kernel. Linux container technology allows you to package or isolate your application and its entire runtime environment (including all required files) together. This allows users to easily migrate applications between environments while retaining the full functionality of the application. Docker&amp;rsquo;s problem Docker is a famous open source container engine, which</description>
    </item>
    
    <item>
      <title>Container persistence methods</title>
      <link>https://www.sobyte.net/post/2022-03/container-persistence-methods/</link>
      <pubDate>Sat, 12 Mar 2022 11:56:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/container-persistence-methods/</guid>
      <description>A container acts as an instance of a image, a runtime for stateless applications in the images. Stateless is so-called because the lifecycle of a container is very flexible. When a container&amp;rsquo;s lifecycle ends, the data generated during that time does not persist, but is removed with the deletion of the container. However, most applications are for data now, so the persistence of containers is explored here.
Storage for containers Before we discuss container persistence, let&amp;rsquo;s explore what data storage looks like without persistence, i.</description>
    </item>
    
    <item>
      <title>Jib builds Docker images efficiently</title>
      <link>https://www.sobyte.net/post/2022-03/jib-docker/</link>
      <pubDate>Tue, 08 Mar 2022 09:22:31 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/jib-docker/</guid>
      <description>1. Preface Jib is a class library developed by Google to build Docker and OCI images of Java applications directly, provided as Maven and Gradle plugins. The best part is that it can be built without the Docker daemon, i.e. you don&amp;rsquo;t have to install the docker daemon on your computer! Although Spring Boot 2.3.0.RELEASE has already been released with the ability to build images, I couldn&amp;rsquo;t resist trying Jib.</description>
    </item>
    
    <item>
      <title>Deploying magento2 with docker-compose</title>
      <link>https://www.sobyte.net/post/2022-03/docker-compose-magento2/</link>
      <pubDate>Mon, 07 Mar 2022 10:11:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/docker-compose-magento2/</guid>
      <description>Environment centos 7 2-core 8g docker 1.13.1 docker-compose 1.24.1 Versions of each container php:7.3-fpm-buster mysql:8.0 nginx:1.21 redis:6.2 frp using debian:10-slim as the base image build The specific version is 0.38.0 frp&amp;rsquo;s main role is to act as a proxy for xdebug elasticsearch:7.9 The magento version is 2.3.4 The following section assumes that docker and docker-compose are already installed. This is intended as a development environment, so the code is not</description>
    </item>
    
    <item>
      <title>How to use docker buildx to build multi-architecture Go images</title>
      <link>https://www.sobyte.net/post/2022-03/building-multi-architecture-images-with-docker-buildx/</link>
      <pubDate>Thu, 03 Mar 2022 10:49:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/building-multi-architecture-images-with-docker-buildx/</guid>
      <description>Running applications on different operating systems and processor architectures is a common scenario, so it is a common practice to build separate distributions for different platforms. This is not easy to achieve when the platform we use to develop the application is different from the target platform for deployment. For example, developing an application on an x86 architecture and deploying it to a machine on an ARM platform usually requires preparing the ARM platform infrastructure for development and compilation.</description>
    </item>
    
    <item>
      <title>Deploy Jenkins services using Docker</title>
      <link>https://www.sobyte.net/post/2022-02/deploy-jenkins/</link>
      <pubDate>Wed, 23 Feb 2022 09:41:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/deploy-jenkins/</guid>
      <description>This article documents the process of building a Jenkins service from scratch using Docker.
Before you start This article assumes that you already have some basic knowledge of Linux, command line operations, ssh, and other tools.
Installing Docker Docker offers unprecedented ease of deployment of services, and an introduction to it can be found at official website.
To install Docker, just follow the steps, here is the link to the official tutorial.</description>
    </item>
    
    <item>
      <title>Run the sshd service inside the container</title>
      <link>https://www.sobyte.net/post/2022-01/container-sshd/</link>
      <pubDate>Sat, 15 Jan 2022 11:48:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/container-sshd/</guid>
      <description>I want to share data with different friends, but I don&amp;rsquo;t really want to create new users on my system. Because in most Linux distributions, the default umask is 022, which means that other users can access my home directory and read files at will, which means no privacy and no security. If my friend&amp;rsquo;s account/password is accidentally leaked, it will also endanger all the data in my system, I</description>
    </item>
    
    <item>
      <title>Docker install mysql</title>
      <link>https://www.sobyte.net/post/2022-01/docker-mysql/</link>
      <pubDate>Fri, 14 Jan 2022 13:02:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/docker-mysql/</guid>
      <description>MySQL is the world&amp;rsquo;s most popular open source database. With its reliability, ease of use and performance, MySQL has become the database of choice for web applications. 1. Check the available MySQL versions mirror of mysql Alternatively, you can search for available versions by docker search mysql. 2. Pull the mysql image 1 2 3 4 5 6 docker pull mysql:latest 或者拉取其他版本 docker</description>
    </item>
    
    <item>
      <title>Iptables And Docker Container Network Analysis</title>
      <link>https://www.sobyte.net/post/2022-01/iptables-and-container-networks/</link>
      <pubDate>Sat, 08 Jan 2022 13:49:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/iptables-and-container-networks/</guid>
      <description>This article is only for ipv4 networks This article first introduces the basic concept and common commands of iptables, and then analyzes how docker/podman is a standalone container network implemented with iptables and Linux virtual network interface. iptables iptables provides packet filtering, NAT and other packet handling capabilities. iptables is most used in firewall and NAT scenarios. Both iptables and the new nftables are based on netfilter and are subprojects</description>
    </item>
    
    <item>
      <title>Avoid files gaining root privileges when docker mounts</title>
      <link>https://www.sobyte.net/post/2021-12/mount-docker-without-creating-root-file/</link>
      <pubDate>Fri, 31 Dec 2021 22:00:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/mount-docker-without-creating-root-file/</guid>
      <description>When docker mounts the disk, as many containers use root to run programs inside the container, it will cause the files generated in the mount belong to root:root. generally the user outside the container is not root, which will make file sharing or even reading logs unnecessary trouble. This article aims to solve the problem of generating root privileged files from the root without changing the container.
The files generated by docker often need to be accessed by sudo chmod o+rw *, which is troublesome, but at least you have sudo privileges.</description>
    </item>
    
    <item>
      <title>Dockerfile Best Practices for Accelerating the Development Process</title>
      <link>https://www.sobyte.net/post/2021-12/speed-up-develop-flow-dockerfile-best-practices/</link>
      <pubDate>Wed, 15 Dec 2021 18:01:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/speed-up-develop-flow-dockerfile-best-practices/</guid>
      <description>A Dockerfile is the starting point for creating a Docker image, which provides a well-defined set of instructions that allow us to copy files or folders, run commands, set environment variables, and perform other tasks needed to create a container image. It is important to write Dockerfile to ensure that the generated images are safe, small, fast to build and fast to update.
In this article we&amp;rsquo;ll see how to write good Dockerfiles to speed up the development process, ensure build reusability, and generate images that are safe to deploy to production.</description>
    </item>
    
    <item>
      <title>Why Kubernetes is replacing Docker</title>
      <link>https://www.sobyte.net/post/2021-11/whys-the-design-kubernetes-deprecate-docker/</link>
      <pubDate>Sat, 27 Nov 2021 11:39:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/whys-the-design-kubernetes-deprecate-docker/</guid>
      <description>Kubernetes is the de facto standard in container orchestration today, and Docker has played a pivotal role in containers from its inception to today, and is the default container engine in Kubernetes. However, in December 2020, the Kubernetes community decided to move forward with removing Dockershim-related code from its repositories, which was significant for both the Kubernetes and Docker communities.
I&amp;rsquo;m sure most developers have heard of Kubernetes and Docker and know that we can use Kubernetes to manage Docker containers, but they may not have heard of Dockershim, the Docker shim.</description>
    </item>
    
    <item>
      <title>Php Image Installation Module</title>
      <link>https://www.sobyte.net/post/2021-11/php-image-installation-module/</link>
      <pubDate>Wed, 24 Nov 2021 15:03:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/php-image-installation-module/</guid>
      <description>The default php:7.0.33-fpm image is missing a lot of modules, so building it directly using Dockerfile would be a bit of a hassle, and it&amp;rsquo;s also quite large. So I went directly into the container and installed it, and finally generated an image of my own tmaize/php7-fpm based on the container. I&amp;rsquo;ll record the steps here, maybe I&amp;rsquo;ll use them later Description The original image already has the following source</description>
    </item>
    
    <item>
      <title>Docker installation of multi-user version of JupyterHub</title>
      <link>https://www.sobyte.net/post/2021-11/docker-jupyterhub/</link>
      <pubDate>Sat, 20 Nov 2021 16:10:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/docker-jupyterhub/</guid>
      <description>The host server is using Ubuntu 18.04. Note that Docker does not currently support Ubuntu 19.10. To use Docker in 19.10, you need to set the Ubuntu 18.04 version identifier: bionic in the Docker source configuration. 1 deb[arch=amd64]https://download.docker.com/linux/ubuntubionicstable Docker installation The installation process of Docker is very simple, just execute the following command. 1 2 3 4 5 6 7 8 9 sudo apt remove docker docker-engine docker.io sudo apt</description>
    </item>
    
    <item>
      <title>Gitlab CI&#39;s Docker Cache in Kubernetes</title>
      <link>https://www.sobyte.net/post/2021-11/gitlab-ci-docker-layer-cache-for-k8s-executor/</link>
      <pubDate>Sat, 13 Nov 2021 13:53:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/gitlab-ci-docker-layer-cache-for-k8s-executor/</guid>
      <description>In the previous article on how to use GitLab CI for CI/CD in a Kubernetes cluster, we basically used the Docker On Docker model for building images, because the Kubernetes cluster uses a container runtime like Docker, so we could mount the host docker.sock file from the host to the container to build the image, but recently we changed the container runtime to Containerd after using Kubernetes version 1.22.X, so</description>
    </item>
    
    <item>
      <title>Building images without Dockerfile: BuildPack vs Dockerfile</title>
      <link>https://www.sobyte.net/post/2021-11/buildpack-vs-dockerfile/</link>
      <pubDate>Mon, 01 Nov 2021 13:27:34 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/buildpack-vs-dockerfile/</guid>
      <description>In the past, we have built technology platforms using microservices, containerization, and service orchestration. To improve the efficiency of our development teams, we also provide the CICD platform for rapid deployment of code to Openshift (an enterprise-class Kubernetes) clusters. The first step of deployment is to containerize the application, and the continuous integration deliverables have changed from jar packages, webpack, etc. to container images. Containerization packages the software code and</description>
    </item>
    
    <item>
      <title>Earthly A more powerful image builder </title>
      <link>https://www.sobyte.net/post/2021-10/the-best-image-build-tool-earthly/</link>
      <pubDate>Sun, 31 Oct 2021 17:21:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/the-best-image-build-tool-earthly/</guid>
      <description>Introduction to Earthly Earthly is a more advanced Docker image builder, Earthly replaces the traditional Dockerfile with its own Earthfile; Earthfile is as Earthly officially describes: Makefile + Dockerfile = Earthfile Earthly supports some Dockerfile extension syntax through buildkit, and integrates Dockerfile with Makefile, making it easier to build and code Dockerfile for multiple platforms; Earthly makes it easier to reuse Dockerfile code and more CI-friendly automatic integration. Quick Start</description>
    </item>
    
    <item>
      <title>Docker Deployment FastDFS</title>
      <link>https://www.sobyte.net/post/2021-10/docker-deploy-fastdfs/</link>
      <pubDate>Mon, 04 Oct 2021 09:49:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/docker-deploy-fastdfs/</guid>
      <description>If your FastDFS file system needs high availability and needs to be deployed on multiple machines, and you only run FastDFS on these servers, then FastDFS may not be suitable for deployment with Docker, it can be deployed directly on the machines according to the official documentation, there is no need to use containers to deploy. In fact, FastDFS is not suitable for containerized deployment, because the tracker server reports</description>
    </item>
    
    <item>
      <title>docker registry migration to harbor</title>
      <link>https://www.sobyte.net/post/2021-09/docker-registry-to-harbor/</link>
      <pubDate>Wed, 29 Sep 2021 16:25:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/docker-registry-to-harbor/</guid>
      <description>Registry Docker Distribution Docker Distribution is the first tool that implements packaging, distribution, storage and image distribution, acting as a Docker registry. (Currently Distribution has been donated to CNCF). The spec specification in Docker Distribution has since become the OCI distribution-spec specification. It can be assumed that Docker Distribution implements most of the OCI image distribution specifications, and that the two are largely compatible. OCI&amp;rsquo;s guiding philosophy is to have</description>
    </item>
    
    <item>
      <title>Understanding the Container Runtime Containerd in one article</title>
      <link>https://www.sobyte.net/post/2021-09/containerd-usage/</link>
      <pubDate>Mon, 27 Sep 2021 14:38:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/containerd-usage/</guid>
      <description>Before learning Containerd we need to do a brief review of Docker&amp;rsquo;s development history, because it involves a bit more components in practice, there are many we will often hear, but it is not clear what these components are really for, such as libcontainer, runc, containerd, CRI, OCI and so on. Docker Since Docker 1.11, Docker containers are not simply started by Docker Daemon, but by integrating containerd, runc and</description>
    </item>
    
    <item>
      <title>Automating Docker Publishing With GitHub Action</title>
      <link>https://www.sobyte.net/post/2021-07/automating-docker-publishing-with-github-action/</link>
      <pubDate>Sat, 17 Jul 2021 11:22:01 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/automating-docker-publishing-with-github-action/</guid>
      <description>Recently, I&amp;rsquo;ve been using GitHub Actions for my company&amp;rsquo;s internal project release process, and it&amp;rsquo;s been a great experience.
The main goal of this article is to help newcomers to GitHub Actions to quickly build automated tests and package and push Docker images.
Create project This article focuses on Go as an example, but of course other languages are similar and have little to do with the language itself.
Here we start by creating a project on GitHub and writing a few simple pieces of code main.</description>
    </item>
    
    <item>
      <title>Docker Serious Error Causes Enterpris Data to Be Deleted by Hackers</title>
      <link>https://www.sobyte.net/post/2021-06/docker-serious-error-causes-enterpris-data-to-be-deleted-by-hackers/</link>
      <pubDate>Wed, 30 Jun 2021 18:17:41 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/docker-serious-error-causes-enterpris-data-to-be-deleted-by-hackers/</guid>
      <description>Be cautious of popular technologies that promise to make work easy - they often cut corners, and security is often one of them.
A few days ago, the database of NewsBlur (a web-based RSS reader) was deleted by a hacker due to a bug that existed in Docker for years.
In a blog post this week, NewsBlur founder Samuel Clay detailed his ordeal: during a migration of a MongoDB cluster to a Docker container, a hacker gained access to the NewsBlur database, deleted 250GB of raw data, and demanded a 0.</description>
    </item>
    
    <item>
      <title>Building a Docker Private Registry</title>
      <link>https://www.sobyte.net/post/2021-06/building-a-docker-private-registry/</link>
      <pubDate>Wed, 16 Jun 2021 10:32:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/building-a-docker-private-registry/</guid>
      <description>Registry Classification  Sponsor Registry: a third-party registry for customers and communities Mirror Registry: third-party registry, only available to users Vendor Registry: The registry provided by the vendor that published the image Private Registry: Private registry with fire period and extra security layer (ssl)  Why you need a private registry Generally deployed locally self-built (using intranet), if you use aliyun directly use the registry of ali can be.
 Hosted Mirror Low bandwidth consumption Fast download speed Rapid Deployment  Install docker-registry To install registry in ubuntu 16.</description>
    </item>
    
  </channel>
</rss>
