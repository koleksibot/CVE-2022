<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>json on SoByte</title>
    <link>https://www.sobyte.net/tags/json/</link>
    <description>Recent content in json on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 12 Feb 2022 11:20:29 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; implementation for friendly handling of Json data</title>
      <link>https://www.sobyte.net/post/2022-02/cpp-json/</link>
      <pubDate>Sat, 12 Feb 2022 11:20:29 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/cpp-json/</guid>
      <description>Background C/C++ client needs to receive and send JSON format data to the backend to achieve communication and data interaction, but there is no ready-made interface for handling JSON format data in C++, so we can&amp;rsquo;t avoid splitting and splicing by directly referring to third-party libraries. Considering that there will be a lot of JSON data to be processed in this project, we can&amp;rsquo;t avoid the repetitive splitting and splicing.</description>
    </item>
    
    <item>
      <title>Interconversion between Protobuf and JSON</title>
      <link>https://www.sobyte.net/post/2021-12/potobuf-to-json-conversion/</link>
      <pubDate>Sun, 05 Dec 2021 10:40:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/potobuf-to-json-conversion/</guid>
      <description>Protobuf does not provide a JSON interconversion method by default, although the Protobuf object itself has a toString() method, but it is not in JSON format, but rather in the form of 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age: 57name: &amp;#34;urooP&amp;#34;sex: MALEgrade { key: 1 value { score: 2.589357441994722 rank: 32 rank: 32 }parent}parent { relation: &amp;#34;father&amp;#34; tel: &amp;#34;3286647499263&amp;#34;} In this article,</description>
    </item>
    
    <item>
      <title>Python JSON/JSONP Data Parsing</title>
      <link>https://www.sobyte.net/post/2021-10/python-json-jsonp/</link>
      <pubDate>Sun, 31 Oct 2021 11:03:11 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/python-json-jsonp/</guid>
      <description>JSON Introduction JSON, JavaScript Object Natation, is a lightweight data interchange format that is ideal for server interaction with JavaScript. In ordinary Web applications, developers often struggle with XML parsing, either server-side generation or processing of XML, or client-side parsing of XML with JavaScript, often resulting in complex code and very low development efficiency. In fact, for most Web applications, many AJAX applications even return pieces of HTML directly to</description>
    </item>
    
    <item>
      <title>Some Tips for Using Json in Go</title>
      <link>https://www.sobyte.net/post/2021-06/some-tips-for-using-json-in-go/</link>
      <pubDate>Mon, 28 Jun 2021 18:08:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/some-tips-for-using-json-in-go/</guid>
      <description>This article summarizes the problems and solutions I usually encounter in my projects regarding the interconversion between go language JSON data and structs.
Basic Serialization First let&amp;rsquo;s look at the basic usage of json.Marshal() (serialization) and json.Unmarshal (deserialization) in the Go language.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  type Person struct { Name string Age int64 Weight float64 } func main() { p1 := Person{ Name: &amp;#34;Qimi&amp;#34;, Age: 18, Weight: 71.</description>
    </item>
    
    <item>
      <title>The Popular Java Json Library Jackson</title>
      <link>https://www.sobyte.net/post/2021-06/the-popular-java-json-library-jackson/</link>
      <pubDate>Sat, 26 Jun 2021 20:19:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/the-popular-java-json-library-jackson/</guid>
      <description>Jackson is a JSON (return) serialization tool in the Java ecosystem, which is efficient, powerful, and secure (without as many security vulnerabilities as Fastjson). It is also widely used, with Spring Boot/Cloud, Akka, Spark and many other frameworks using it as the default JSON processing tool. Dependency To use Jackson, you need to add the following dependencies to your project (note: you don&amp;rsquo;t need to add them manually when using</description>
    </item>
    
    <item>
      <title>Analysis of the Problems Caused by Replacing Fastjson With Gson</title>
      <link>https://www.sobyte.net/post/2021-06/analysis-of-the-problems-caused-by-replacing-fastjson-with-gson/</link>
      <pubDate>Fri, 18 Jun 2021 12:04:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/analysis-of-the-problems-caused-by-replacing-fastjson-with-gson/</guid>
      <description>The security vulnerability of Json serialization framework has always been a topic of conversation among programmers, especially in the past two years, fastjson has been targeted research, and more frequently reported vulnerabilities, a vulnerability does not matter, but the security team is always using email to urge the online application to upgrade the dependency, which can be fatal, I believe that many people are also unbearable, consider using other serialization framework to replace fastjson.</description>
    </item>
    
  </channel>
</rss>
