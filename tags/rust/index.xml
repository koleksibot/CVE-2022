<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on SoByte</title>
    <link>https://www.sobyte.net/tags/rust/</link>
    <description>Recent content in rust on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Mar 2022 14:32:16 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lifetimes in Rust</title>
      <link>https://www.sobyte.net/post/2022-03/understanding-lifetimes-in-rust/</link>
      <pubDate>Mon, 21 Mar 2022 14:32:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/understanding-lifetimes-in-rust/</guid>
      <description>The things that make the lifetime annotation syntax awkward for me are
 it&amp;rsquo;s not a real type because it can&amp;rsquo;t be instantiated like a real type, but it can be passed into the type parameter of a generic type like a real type, and it does have covariant inversion for real subtyping it can also be used as a type constraint like Trait, in addition to other lifetime annotations like &#39;a: &#39;b, it can also be constrained with normal types like T: &#39;a.</description>
    </item>
    
    <item>
      <title>Rust&#39;s confusing references and borrowings</title>
      <link>https://www.sobyte.net/post/2022-03/rust-shit-ref-borrow/</link>
      <pubDate>Wed, 09 Mar 2022 14:51:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-shit-ref-borrow/</guid>
      <description>There are three principles of Rust Ownership to keep in mind.
 For each value, there is an owner. There can only be one owner for a value at a time. When the owner leaves the scope, the corresponding value is automatically dropped.  hello is a string allocated on the heap, and the owner is s, which, when passed as an argument to the function takes_ownership, moves ownership to some_string .</description>
    </item>
    
    <item>
      <title>Three principles of Rust ownership</title>
      <link>https://www.sobyte.net/post/2022-03/rust-ownership-three-princples/</link>
      <pubDate>Wed, 09 Mar 2022 14:40:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-ownership-three-princples/</guid>
      <description>The core concept of Rust is Ownership, a GC-enabled language that allows the runtime to sweep the heap at runtime and release unreferenced garbage objects, such as go. For languages like c/c++, you need to manage the allocation and release of memory yourself. Rust uses the concept of Ownership and appends various check rules to the compiler to implement memory management. Note that most of Rust&amp;rsquo;s work is done at</description>
    </item>
    
    <item>
      <title>Rust actually allows the variable shadow</title>
      <link>https://www.sobyte.net/post/2022-03/rust-allow-variable-shadow/</link>
      <pubDate>Wed, 09 Mar 2022 14:06:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-allow-variable-shadow/</guid>
      <description>Rust has a reputation for having a steep learning curve and a rigorous and secure language. But recently, while studying The Book, I discovered that it allows variable shadowing .
If the ordinary shadowing is not enough, the same lexical scope allows different types of variables, using the same variable name .
What else can I say but shock? Let&amp;rsquo;s look at the case of rust, go.
Common usage 1 2 3 4 5 6 7 8 9  fn main(){letx=5;letx=x+1;letx=x*2;println!</description>
    </item>
    
    <item>
      <title>Rust Lifetime</title>
      <link>https://www.sobyte.net/post/2022-03/rust-lifetime/</link>
      <pubDate>Tue, 08 Mar 2022 15:34:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-lifetime/</guid>
      <description>First of all what are lifetimes? Lifetimes define the valid range of a reference, in other words lifetimes are a tool used by the compiler to compare the lifetime of the owner and the borrower, in order to avoid dangling pointer as much as possible.
1 2 3 4 5 6 7 8 9 10 11 12 13  fn main(){{letr;{letx=5;r=&amp;amp;x;// ^^ borrowed value does not live long enough }// - `x` dropped here while still borrowed println!</description>
    </item>
    
    <item>
      <title>The Box Smart Pointer in Rust</title>
      <link>https://www.sobyte.net/post/2022-03/rust-box/</link>
      <pubDate>Tue, 08 Mar 2022 15:13:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-box/</guid>
      <description>Those familiar with c++ definitely know shared_ptr , unique_ptr , and Rust also has smart pointers Box , Rc , Arc , RefCell , etc. This article shares the underlying implementation of Box .
Box&amp;lt;T&amp;gt; allocates space on the heap, stores the T value, and returns the corresponding pointer. Also Box implements trait Deref dereference and Drop destructor to automatically free space when Box leaves the scope.
Getting Started Example Example from the rust book, without the print statement for demonstration purposes.</description>
    </item>
    
    <item>
      <title>Dissecting Smart Pointers Rc Weak and Arc</title>
      <link>https://www.sobyte.net/post/2022-03/smart-pointer-rc-weak-arc/</link>
      <pubDate>Tue, 08 Mar 2022 14:59:56 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/smart-pointer-rc-weak-arc/</guid>
      <description>We know that rust ownership has three principles: For each value, there is an owner. A value can only have one owner at a time. When the owner leaves the scope, the corresponding value is automatically dropped. But sometimes a value is shared by multiple variables. Also it cannot be solved by reference, because there is no way to determine which variable ended up last and there is no way</description>
    </item>
    
    <item>
      <title>Why Rust Needs Internal Variability</title>
      <link>https://www.sobyte.net/post/2022-03/rust-why-need-interior-mutability/</link>
      <pubDate>Tue, 08 Mar 2022 14:50:23 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-why-need-interior-mutability/</guid>
      <description>This article refers to rust book ch15 and adds its own understanding, interested parties can first look at the official documentation.
Rust has two ways to achieve mutability
 Inheritance variability: for example, if a struct is declared with let mut, then any field of the struct can be modified later. Internal mutability: use Cell RefCell to wrap a variable or field so that it can be modified even if the external variable is read-only  It seems that inheritance mutability is enough, so why do we need the so-called interior mutability internal mutability?</description>
    </item>
    
    <item>
      <title>Musk: I&#39;m a Rust fan, but would choose C for performance</title>
      <link>https://www.sobyte.net/post/2022-02/elon-musk-is-a-fan-of-rust/</link>
      <pubDate>Thu, 24 Feb 2022 09:06:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/elon-musk-is-a-fan-of-rust/</guid>
      <description>Greg Brockman, CTO of OpenAI, a nonprofit artificial intelligence research company, today posted a tweet about &amp;ldquo;error messages&amp;rdquo; in programming, saying that one of the most underappreciated skills in programming is writing friendly error messages. Greg believes that a good error message should be self-explanatory and have three main points:
 what the user did. what acceptable inputs are. how to fix the problem.  Musk also commented on his opinion in this tweet, which he fully agrees with, and also said that compilers for programming languages could be better because not enough is currently being invested in them.</description>
    </item>
    
    <item>
      <title>Rust 2021 Survey: Interesting but Challenging</title>
      <link>https://www.sobyte.net/post/2022-02/rust-survey-2021/</link>
      <pubDate>Sun, 20 Feb 2022 10:28:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/rust-survey-2021/</guid>
      <description>The results of the Rust 2021 survey are now available. Ninety percent of respondents said they use Rust, 5% said they have used Rust in the past but no longer use it, and 4% said they have not used Rust at all.
The survey was conducted in December 2021 and is based on feedback from 9,354 respondents. Officials noted that the Rust community is growing, and the survey had the highest number of complete survey responses ever, beating last year&amp;rsquo;s total by about 1,500.</description>
    </item>
    
    <item>
      <title>Mutex&lt;Rc&gt; Why can&#39;t I pass it between threads?</title>
      <link>https://www.sobyte.net/post/2022-02/rust-mutex-send/</link>
      <pubDate>Fri, 18 Feb 2022 10:12:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/rust-mutex-send/</guid>
      <description>I was recently confused by a compiler error while writing a multi-threaded program in Rust.
Problem In short, I have a structure with an internal Rc value, as follows.
1 2 3  struct A{val: Rc&amp;lt;u32&amp;gt;,}  Obviously, Rc is not thread-safe, so it is protected by a lock and passed between threads with Arc, so the following code is written.
1 2 3 4 5 6 7 8 9 10 11  fn main(){letmutex=Mutex::new(A{val: Rc::new(5)});lettarget=Arc::new(mutex);lett=thread::spawn(move||{target.</description>
    </item>
    
    <item>
      <title>Implementing a thread pool using Rust</title>
      <link>https://www.sobyte.net/post/2022-02/rust-thread-pool/</link>
      <pubDate>Sat, 12 Feb 2022 11:06:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/rust-thread-pool/</guid>
      <description>How to implement a thread pool Thread pooling: a thread usage pattern. Too many threads introduce scheduling overhead, which in turn affects cache locality and overall performance. Instead, a thread pool maintains multiple threads waiting for a supervising manager to assign tasks that can be executed concurrently. This avoids the cost of creating and destroying threads while processing short time tasks. Thread pools not only ensure full utilization of the</description>
    </item>
    
    <item>
      <title>Implementing the FAT32 file system with Rust</title>
      <link>https://www.sobyte.net/post/2022-01/rust-fat32/</link>
      <pubDate>Sun, 09 Jan 2022 10:37:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/rust-fat32/</guid>
      <description>FAT file system knowledge overview A file is, in fact, data. Data is represented in the computer as 0/1, and the most basic unit is the bit. 8 bit = 1 Byte, 1024 Byte = 1 KB, 1024 KB = 1 MB, and so on. The content of a file is also a combination of several 01 strings. When reading/writing a file, we call the functions read()/write() in the kernel,</description>
    </item>
    
    <item>
      <title>Rust Ownership and Borrowing</title>
      <link>https://www.sobyte.net/post/2022-01/rust-ownership-and-borrowing/</link>
      <pubDate>Sat, 08 Jan 2022 13:36:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/rust-ownership-and-borrowing/</guid>
      <description>Study notes, benchmarking cpp to understand the concept of rust ownership and borrowing, and mentioning the more specific slice (DST) by the way Ownership Each value in rust has an owner variable and can only have one owner at the same time. When the value&amp;rsquo;s owner variable goes out of scope, the value&amp;rsquo;s memory is freed. The following code String has moved ownership from s1 to s2 and a Move</description>
    </item>
    
    <item>
      <title>Stuck problems caused by soft links</title>
      <link>https://www.sobyte.net/post/2021-12/symlink_metadata/</link>
      <pubDate>Sat, 25 Dec 2021 21:02:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/symlink_metadata/</guid>
      <description>fs::symlink_metadata Recently I wrote a program to recursively search for folder statistics and got stuck when measuring the size of a folder I used find -type l to search for soft links and found two links referenced recursively: a points to b&amp;rsquo;s folder while b points to a&amp;rsquo;s folder Looking at the source code, I realized that the underlying std::fs::metadata call stat() system call would follow the link I switched</description>
    </item>
    
    <item>
      <title>cargo tree invert</title>
      <link>https://www.sobyte.net/post/2021-12/cargo_tree_invert/</link>
      <pubDate>Sat, 25 Dec 2021 20:54:08 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/cargo_tree_invert/</guid>
      <description>Suppose there is a requirement that the Rust binary compiled in a fedora high version (2.34) glibc environment should be used in the customer&amp;rsquo;s centos7 glibc 2.17 environment, because the files compiled by the high version glibc will not work in the low version glibc environment
A possible solution is that the musl-gcc/musl-clang compiler makes the binary not strongly dependent on the glibc version, e.g. TabNine&amp;rsquo;s binary on Linux is musl&amp;rsquo;s</description>
    </item>
    
    <item>
      <title>tokio cancel dissemination of defects</title>
      <link>https://www.sobyte.net/post/2021-12/async_cancel_propagation/</link>
      <pubDate>Sat, 25 Dec 2021 20:44:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/async_cancel_propagation/</guid>
      <description>Recently, I encountered some bugs in my project: the receiver of tokio channel was dropped for some reason, resulting in a send error.
After debugging, I found that it was actually caused by hyper&amp;rsquo;s cancel propagation. The following changes to examples/web_api.rs in the hyper source code can be reproduced
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  diff --git a/Cargo.</description>
    </item>
    
    <item>
      <title>Rust 1.55.0 is officially released</title>
      <link>https://www.sobyte.net/post/2021-09/rust-1-55-0-released/</link>
      <pubDate>Sat, 11 Sep 2021 15:42:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/rust-1-55-0-released/</guid>
      <description>The Rust team has officially released a new version of Rust 1.55.0. If you have previously installed a previous version of Rust via rustup, you can upgrade to the latest version by running the following command.
1  rustup update stable   Updates in the 1.55.0 stable release include Cargo repeats compiler error In past versions, when running cargo test, cargo check --all-targets, or similar commands to build the same Rust crate in multiple configurations, errors and warnings may be repeated because rustc runs in parallel and all display the same warnings.</description>
    </item>
    
    <item>
      <title>Manual for structopt library</title>
      <link>https://www.sobyte.net/post/2021-07/rust-lib-structopt/</link>
      <pubDate>Mon, 19 Jul 2021 10:50:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/rust-lib-structopt/</guid>
      <description>The standard library provides std::env::args() to get command line arguments, the first value is the name of the program, similar to the way arguments are obtained in other languages:
1 2 3 4 5  letargs: Vec&amp;lt;String&amp;gt;=env::args().collect();letquery=&amp;amp;args[1];letfilename=&amp;amp;args[2];println!(&amp;#34;Searching for {}&amp;#34;,query);println!(&amp;#34;In file {}&amp;#34;,filename);  But in the process of product development, we need more program parameters, and need certain rules and checks, this time we need to use some other libraries to parse these parameters, such as the structopt library.</description>
    </item>
    
  </channel>
</rss>
