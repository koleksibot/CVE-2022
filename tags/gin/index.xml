<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gin on SoByte</title>
    <link>https://www.sobyte.net/tags/gin/</link>
    <description>Recent content in gin on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Mar 2022 16:53:42 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/gin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solve Gin Router Path Conflict</title>
      <link>https://www.sobyte.net/post/2022-03/solve-gin-router-path-conflict/</link>
      <pubDate>Sun, 06 Mar 2022 16:53:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/solve-gin-router-path-conflict/</guid>
      <description>When using the gin framework, if there are two such routes.
 GET /users/:id GET /users/info  gin will report an error: panic: &#39;info&#39; in new path &#39;/users/info&#39; conflicts with existing wildcard &#39;:id&#39; in existing prefix &#39;/users/:id&#39;
The reason is that the two routes have the same HTTP method (meaning GET/POST/PUT/DELETE, etc.) and request path prefix, and in the same route location, the first route is a wildcard (meaning :id of this form) parameter, and the second route is a normal string info, then a route conflict occurs.</description>
    </item>
    
    <item>
      <title>Timeout control in Go</title>
      <link>https://www.sobyte.net/post/2021-10/go-timeout/</link>
      <pubDate>Sun, 31 Oct 2021 17:12:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/go-timeout/</guid>
      <description>In daily development we will probably encounter timeout control scenarios, such as a batch of time-consuming tasks, network requests, etc.; a good timeout control can effectively avoid some problems (such as goroutine leakage, resource non-release, etc.). Timer The first option is Time.After(d Duration): the timeout control in go is very simple. 1 2 3 4 5 func main() { fmt.Println(time.Now()) x := &amp;lt;-time.After(3 * time.Second) fmt.Println(x) } output: 1 2</description>
    </item>
    
    <item>
      <title>How to get the client&#39;s real IP, starting with a &#34;bug&#34; in Gin</title>
      <link>https://www.sobyte.net/post/2021-09/gin-get-client-real-ip/</link>
      <pubDate>Fri, 24 Sep 2021 10:45:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/gin-get-client-real-ip/</guid>
      <description>Request IP, as one of the user&amp;rsquo;s identity attributes, is a very important basic data. In many scenarios, we will do network security attack prevention or access risk control based on the client request IP. Usually, we can get the real IP through the X-Forwarded-For header in the HTTP protocol Request Headers, but is it really reliable to get the real IP through the X-Forwarded-For header? Concept The X-Forwarded-For is</description>
    </item>
    
  </channel>
</rss>
