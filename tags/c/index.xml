<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on SoByte</title>
    <link>https://www.sobyte.net/tags/c/</link>
    <description>Recent content in c on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Mar 2022 10:35:03 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Function calling conventions in C</title>
      <link>https://www.sobyte.net/post/2022-03/function-calling-conventions-in-c/</link>
      <pubDate>Thu, 24 Mar 2022 10:35:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/function-calling-conventions-in-c/</guid>
      <description>This article focuses on function calling conventions in C. The assembly code is combined with real-time observation of stack changes to visualize the process of function calls. This article only discusses the situation in x86/64 architecture, Linux/GCC environment, but other environments should be similar in overall idea and need to deal with these issues. Preface What is the Calling Convention? It is mainly to facilitate the sharing of code and</description>
    </item>
    
    <item>
      <title>Musk: I&#39;m a Rust fan, but would choose C for performance</title>
      <link>https://www.sobyte.net/post/2022-02/elon-musk-is-a-fan-of-rust/</link>
      <pubDate>Thu, 24 Feb 2022 09:06:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/elon-musk-is-a-fan-of-rust/</guid>
      <description>Greg Brockman, CTO of OpenAI, a nonprofit artificial intelligence research company, today posted a tweet about &amp;ldquo;error messages&amp;rdquo; in programming, saying that one of the most underappreciated skills in programming is writing friendly error messages. Greg believes that a good error message should be self-explanatory and have three main points:
 what the user did. what acceptable inputs are. how to fix the problem.  Musk also commented on his opinion in this tweet, which he fully agrees with, and also said that compilers for programming languages could be better because not enough is currently being invested in them.</description>
    </item>
    
    <item>
      <title>A va_list error case</title>
      <link>https://www.sobyte.net/post/2022-02/c-va-list-pitfall/</link>
      <pubDate>Tue, 22 Feb 2022 09:41:58 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/c-va-list-pitfall/</guid>
      <description>I recently helped someone troubleshoot a bug and saw an interesting case. The following program will have Segmentation Fault, can you see the problem?
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include &amp;lt;stdarg.h&amp;gt; struct Context { char *error_; }; void report_error(struct Context *ctx, const char *format, va_list args) { int len = vsnprintf(NULL, 0, format, args); // XX  free(ctx-&amp;gt;error_); ctx-&amp;gt;error_ = (char *)malloc(len + 1); if (ctx-&amp;gt;error_) { vsnprintf(ctx-&amp;gt;error_, len + 1, format, args); // XX  } }   va_list Introduction Variadic functions in C are implemented as va_list, va_start, va_arg and va_end defined by &amp;lt;stdarg.</description>
    </item>
    
    <item>
      <title>Elegant use of #include</title>
      <link>https://www.sobyte.net/post/2022-02/include/</link>
      <pubDate>Tue, 15 Feb 2022 10:38:29 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/include/</guid>
      <description>#include is not just for referencing header files. Proper use of #include can make the code more elegant.
 Usually we use #include to include header files, as follows.
1  #include &amp;lt;stdio.h&amp;gt;  Understand that the purpose of #include is to copy the specified file to the reference as is during the pre-compilation phase. There is actually some logic that can be handled elegantly using #include.
Referencing code blocks Suppose there is a C file that contains different blocks of code.</description>
    </item>
    
    <item>
      <title>Swift and C&#43;&#43; Interoperability Working Group Formed</title>
      <link>https://www.sobyte.net/post/2022-02/swift-and-c-interoperability-workgroup/</link>
      <pubDate>Tue, 08 Feb 2022 10:00:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/swift-and-c-interoperability-workgroup/</guid>
      <description>Recently the Swift community released an announcement that in order to further provide interoperability support between Swift and C++, they formed the Swift and C++ Interoperability Working Group as part of the Swift project. The role of this new working group is to develop and design an interoperability model between C++ and Swift developed by Apple.
In the announcement, Swift developer Alex Lorenz said that the reason for the Swift and C++ Working Group is that there is already significant developer interest in bi-directional interoperability between the two languages.</description>
    </item>
    
    <item>
      <title>C programming implementation of memory management functions with out-of-bounds checking</title>
      <link>https://www.sobyte.net/post/2022-01/memory-overrun-detection/</link>
      <pubDate>Mon, 10 Jan 2022 13:37:56 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/memory-overrun-detection/</guid>
      <description>The C language is highly efficient, flexible, feature-rich and portable, and is highly sought after in programming, especially in system software development. Its efficient flexibility is largely due to its ability to provide low-end control over memory by pointing to it, but at the cost of programmers having to handle memory access details with extra care to avoid operational errors such as memory leaks and buffer overflows.
 Writing in C or C++ is like running a chain saw with all the safety guards removed.</description>
    </item>
    
    <item>
      <title>How to build a c/c&#43;&#43; development environment in Linux/MacOS using vscode</title>
      <link>https://www.sobyte.net/post/2022-01/how-to-build-a-c-c-development-environment-using-vscode-on-linux-macos/</link>
      <pubDate>Sat, 01 Jan 2022 17:02:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/how-to-build-a-c-c-development-environment-using-vscode-on-linux-macos/</guid>
      <description>Whether you&amp;rsquo;re a fan of the Lord of the Rings movies or not, you&amp;rsquo;ll agree that almost everyone loves unity, and having a unified development experience is something that developers have always strived for and welcomed.
Development environments have long been tightly coupled with specific technologies, such as Visual Studio, for primarily .NET-based development. We&amp;rsquo;ve seen heated debates among developers who endlessly argue for one tool over another. This will never end, nor should it, because many times these arguments result in the awesome tools we are using today.</description>
    </item>
    
    <item>
      <title>Intel fully adopts LLVM for its C/C&#43;&#43; compiler</title>
      <link>https://www.sobyte.net/post/2021-08/intel-adoption-of-llvm-complete-icx/</link>
      <pubDate>Wed, 11 Aug 2021 10:07:46 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/intel-adoption-of-llvm-complete-icx/</guid>
      <description>In a blog post, James Reinders, Intel&amp;rsquo;s long-time compiler expert, revealed that they will be using the LLVM open source infrastructure for the next generation of Intel C/C++ compilers; and shared some information about it.
&amp;ldquo;LLVM helps us achieve our goal of providing the best C/C++ compiler for the Intel architecture. The latest Intel C/C++ compilers use LLVM to provide faster compile times, better optimizations, enhanced standards support, and support for GPU and FPGA offloading &amp;hellip;&amp;hellip; The benefits of using LLVM are many and I will provide recommendations for upgrading from a classic compiler to an LLVM-based compiler.</description>
    </item>
    
  </channel>
</rss>
