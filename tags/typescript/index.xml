<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on SoByte</title>
    <link>https://www.sobyte.net/tags/typescript/</link>
    <description>Recent content in typescript on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 07 Mar 2022 15:54:26 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript generic development practices from a set perspective</title>
      <link>https://www.sobyte.net/post/2022-03/typescript-generic-perspect-of-set-thoery/</link>
      <pubDate>Mon, 07 Mar 2022 15:54:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/typescript-generic-perspect-of-set-thoery/</guid>
      <description>Some time ago I drilled into How to master advanced TypeScript patterns this article. This is an earlier blog post by Pierre-Antoine Mills, author of ts-toolbelt. The article raises a challenging topic: How can TS write type support for collinear functions? I did some practice with the original article, and then seemed to come to some knowledge about TS generics closer to the substance &amp;ndash; from the collection perspective. Based</description>
    </item>
    
    <item>
      <title>Built-in Generics in TypeScript</title>
      <link>https://www.sobyte.net/post/2022-03/typescript-builtin-generic/</link>
      <pubDate>Sat, 05 Mar 2022 11:44:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/typescript-builtin-generic/</guid>
      <description>*ypeScript provides some of the more useful generic types, but we often overlook them. In this section we&amp;rsquo;ll look at these generics together. Generic types Partial&amp;lt;Type&amp;gt; From a type, constructs a new type, where all properties of the new type are derived from the original type and all properties of the new type are optional. 1 2 3 4 5 6 interface Todo { title: string; description: string; } type</description>
    </item>
    
    <item>
      <title>Detailed explanation of the tsconfig.json file</title>
      <link>https://www.sobyte.net/post/2022-03/tsconfig/</link>
      <pubDate>Sat, 05 Mar 2022 11:17:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/tsconfig/</guid>
      <description>I personally like TypeScirpt, write code with Ts to be more comfortable than Js too much, can greatly improve the efficiency of writing code, reduce the workload of code maintenance. Because I have the foundation of C++ and C#, I can get started with Ts quickly. Although there is no difficulty in using it, but for a long time, did not go to understand the compilation process and configuration of</description>
    </item>
    
    <item>
      <title>In-depth understanding of TypeScript&#39;s module system</title>
      <link>https://www.sobyte.net/post/2022-03/typescript-module-system/</link>
      <pubDate>Sat, 05 Mar 2022 11:10:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/typescript-module-system/</guid>
      <description>Before the advent of ES2015, JavaScript did not have a native module system (ES Module) and had to resort to third-party RequireJS and SystemJS to use the module functionality. A module is essentially a JS/TS file, similar to a sandbox environment, that uses import statements to introduce the APIs and values of other modules, and export statements to expose its own APIs and values. TypeScript natively supports the syntax of</description>
    </item>
    
    <item>
      <title>Using namespace to encapsulate data in TypeScript</title>
      <link>https://www.sobyte.net/post/2022-03/typescript-namespace/</link>
      <pubDate>Sat, 05 Mar 2022 11:03:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/typescript-namespace/</guid>
      <description>I. namespace - namespace If you are familiar with C++, Java, C#, etc., namespace should not be new to you. namespace can be used to encapsulate a piece of code, and code outside namespace cannot directly access the code inside namespace. Namespaces are defined by the namespace keyword. The format is as follows. 1 2 3 namespace namespace_name { // 命名空间内部代码 } In</description>
    </item>
    
    <item>
      <title>The Complete Guide to TypeScirpt Type Declarations</title>
      <link>https://www.sobyte.net/post/2022-03/typescript-declarations/</link>
      <pubDate>Sat, 05 Mar 2022 10:49:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/typescript-declarations/</guid>
      <description>A Type Declaration or Type Definition file is a TypeScript file with a .d.ts file extension. What is the difference between them and a normal .ts file? What are their characteristics? Next, let&amp;rsquo;s take a deeper look. I. The .d.ts files Type declaration files have the suffix .d.ts and contain only type-related code, not logical code. Their purpose is to provide type information to the developer, so they are only</description>
    </item>
    
    <item>
      <title>Decorators and metadata reflection API in TypeScript: from novice to expert</title>
      <link>https://www.sobyte.net/post/2022-03/typescript-decorators-and-metadata-reflection-api/</link>
      <pubDate>Wed, 02 Mar 2022 10:09:35 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/typescript-decorators-and-metadata-reflection-api/</guid>
      <description>An in-depth understanding of the implementation of TypeScript&amp;rsquo;s modifiers, which make it possible for JavaScript to implement reflection and dependency injection. The tutorial is divided into four main parts Part 1: Method modifiers Part I: Property modifiers &amp;amp; class modifiers Part III: Parameter Modifiers &amp;amp; Modifier Factories Part IV: Type serialization &amp;amp; metadata reflection API In this article we will learn Why our JavaScript needs reflection The metadata reflection API</description>
    </item>
    
    <item>
      <title>Using namespaces to organize TypeScript code.</title>
      <link>https://www.sobyte.net/post/2022-03/organizing-typescript-code-using-namespaces/</link>
      <pubDate>Tue, 01 Mar 2022 10:12:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/organizing-typescript-code-using-namespaces/</guid>
      <description>With the increasing use of third-party libraries in software, we often encounter the problem of global namespaces being polluted, leading to name conflicts between components in the global namespace. As a result, we need to use namespaces to organize blocks of code in order to uniquely identify variables, objects, and classes.
In this article, we will discuss namespaces, when they are needed, and how they can be used to enhance the organization of TypeScript code.</description>
    </item>
    
    <item>
      <title>Top 5 Typescript Dependency Injection Container</title>
      <link>https://www.sobyte.net/post/2022-03/typescript-dependency-injection-containers/</link>
      <pubDate>Tue, 01 Mar 2022 09:30:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/typescript-dependency-injection-containers/</guid>
      <description>The original JavaScript environment lacked a static type system and had little support for containerized dependency injection, making the code I wrote prone to obvious errors and nearly impossible to test.
TypeScript&amp;rsquo;s compile-time type system changes all that, allowing continuous development of complex projects. It has brought back design patterns such as dependency injection, proper typing and passing of dependencies during object construction, which promotes more structured programming and helps write tests without the need for patching.</description>
    </item>
    
    <item>
      <title>Using graphql in ts </title>
      <link>https://www.sobyte.net/post/2022-01/ts-graphql/</link>
      <pubDate>Sun, 16 Jan 2022 20:43:07 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/ts-graphql/</guid>
      <description>Scenarios graphql provides consistent api architecture metadata on the front and back ends, while speeding up the performance of web-backend interactions through request merging and on-demand fetching.
Use with ts Basic idea
 scan all gql strings in the code get the graphql strings in the code and generate type definitions use these type definitions  Steps to use  Here is a demonstration using github api@v4
 Get the back-end metadata</description>
    </item>
    
    <item>
      <title>TypeScript Enumeration Guide</title>
      <link>https://www.sobyte.net/post/2021-10/typescript-enum/</link>
      <pubDate>Sun, 17 Oct 2021 15:17:06 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/typescript-enum/</guid>
      <description>Enumerations are data types that are supported by TypeScript. Enumerations allow you to define a set of named constants. Use them to more easily document intent or create a different set of cases. Mostly used in object-oriented programming languages such as Java and C#, enumerations are now also available in TypeScript. They are one of the few features of TypeScript that is not a type-level extension of JavaScript. Next I</description>
    </item>
    
    <item>
      <title>TypeScript get the parameter type, return value type of the function</title>
      <link>https://www.sobyte.net/post/2021-09/typescript-parameters-and-returntype/</link>
      <pubDate>Thu, 23 Sep 2021 14:32:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/typescript-parameters-and-returntype/</guid>
      <description>Type definition is a necessary but tedious process in developing with TypeScript.
When a third-party library method needs to be defined separately, and the library does not export the method&amp;rsquo;s input type, you need to get the method&amp;rsquo;s input type.
For example, there is the following example function, we want to get its parameter type and return value type, so how should we implement it.
Example function.
1 2 3 4 5 6  function test(lzwme: string, idx: number) { return { lzwme, idx, }; }   Get the parameter type of the function Use the predefined Parameters to get a list of parameter types for a function.</description>
    </item>
    
    <item>
      <title>New homepage for TypeScript official website</title>
      <link>https://www.sobyte.net/post/2021-09/typescript-use-new-homepage/</link>
      <pubDate>Thu, 02 Sep 2021 23:15:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/typescript-use-new-homepage/</guid>
      <description>TypeScript officials have announced a new homepage for their website to better introduce users to TypeScript.
In the article, the official says that the previous homepage had a number of problems, such as no obvious call-to-action phrase at the top of the site, too much text explaining concepts, a lack of focus due to the visual weight between sections of the site, and not enough code examples. Finally, an A/B test was carried out with users of the site to see if any new users liked the homepage, but the results were essentially 50/50.</description>
    </item>
    
    <item>
      <title>typescript Useful Tips</title>
      <link>https://www.sobyte.net/post/2021-08/ts-useful-tips/</link>
      <pubDate>Wed, 25 Aug 2021 10:49:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/ts-useful-tips/</guid>
      <description>I&amp;rsquo;ve been using typescript for a long time, but I don&amp;rsquo;t feel like I&amp;rsquo;ve used it completely. Because a lot of typescript features are not used, view the code written before the screen full of any, so it is easy to cause a lot of bugs, but also did not play the typescript real &amp;ldquo;type&amp;rdquo; power. This article summarizes some tips for using typescript, which can be used when using</description>
    </item>
    
  </channel>
</rss>
