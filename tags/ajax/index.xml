<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ajax on SoByte</title>
    <link>https://www.sobyte.net/tags/ajax/</link>
    <description>Recent content in ajax on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 26 Jun 2021 14:05:00 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/ajax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fetch Api Tutorials</title>
      <link>https://www.sobyte.net/post/2021-06/fetch-api-tutorials/</link>
      <pubDate>Sat, 26 Jun 2021 14:05:00 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/fetch-api-tutorials/</guid>
      <description>fetch() is an upgraded version of XMLHttpRequest used to make HTTP requests inside JavaScript scripts.
The browser provides this object natively. This article describes its usage in detail.
1. Basic usage The function of fetch() is basically the same as XMLHttpRequest, but with three main differences.
 fetch() uses Promise and does not use a callback function, so it is much simpler to write and more concise. The modular design of fetch(), with API spread over multiple objects (Response object, Request object, Headers object), is more reasonable; in contrast, the API design of XMLHttpRequest is not very good, with input, output and state all managed in the same interface, making it easy to write very confusing code.</description>
    </item>
    
  </channel>
</rss>
