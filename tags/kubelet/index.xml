<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubelet on SoByte</title>
    <link>https://www.sobyte.net/tags/kubelet/</link>
    <description>Recent content in kubelet on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Mar 2022 09:58:42 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/kubelet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quality of Service Management for Pods by Kubelet</title>
      <link>https://www.sobyte.net/post/2022-03/kubelet-quality-of-service-management-for-pods/</link>
      <pubDate>Thu, 10 Mar 2022 09:58:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/kubelet-quality-of-service-management-for-pods/</guid>
      <description>The previous article, Kubelet Pod Creation Workflow, explained how kubelet creates pods and how the components collaborate with each other. Based on the previous article, this article will explain how kubelet performs quality of service management for pods.
Pod QoS Kubernetes has a QoS type for each Pod, which is used to manage the quality of service for the Pod. There are three types, in decreasing order of priority.
 Guaranteed: Each container in a Pod must have a request and a limit, and the values must be the same.</description>
    </item>
    
    <item>
      <title>Kubelet pod creation workflow</title>
      <link>https://www.sobyte.net/post/2022-03/kubelet-pod-creation-workflow/</link>
      <pubDate>Thu, 10 Mar 2022 09:42:35 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/kubelet-pod-creation-workflow/</guid>
      <description>This article is based on reading the source code of Kubernetes v1.19.0-rc.3
 Kubelet, one of the four components of Kubernetes, maintains the entire lifecycle of a pod and is the last link in the pod creation process of Kubernetes. This article will introduce how Kubelet creates pods.
Architecture of Kubelet First look at a diagram of the Kubelet&amp;rsquo;s component architecture, as follows.
It can be seen that Kubelet is mainly divided into three layers: API layer, syncLoop layer, CRI and the following; API layer is well understood, that is, the part that provides the interface to the outside; syncLoop layer is the core working layer of Kubelet, the main work of Kubelet is centered around this syncLoop, that is, the control loop, run by producers and consumers; CRI provides the interface of container and mirror services, the container can be accessed as a CRI plugin when running.</description>
    </item>
    
    <item>
      <title>An analysis of the Kubelet eviction mechanism</title>
      <link>https://www.sobyte.net/post/2022-03/kubelet-eviction-mechanism/</link>
      <pubDate>Wed, 09 Mar 2022 15:10:23 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/kubelet-eviction-mechanism/</guid>
      <description>This article is based on reading the source code of Kubernetes v1.22.1
 Kubelet allows nodes to be evicted if they are under-resourced. I have recently studied Kubelet&amp;rsquo;s eviction mechanism and found a lot to learn from it, so I&amp;rsquo;ll share it with you.
Kubelet Configuration Kubelet&amp;rsquo;s eviction feature needs to be turned on in the configuration, and the threshold value for eviction needs to be configured.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  type KubeletConfiguration struct { .</description>
    </item>
    
  </channel>
</rss>
