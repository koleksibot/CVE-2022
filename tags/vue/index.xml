<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on SoByte</title>
    <link>https://www.sobyte.net/tags/vue/</link>
    <description>Recent content in vue on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Mar 2022 14:56:38 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using ref to get dom elements in Vue3&#39;s setup</title>
      <link>https://www.sobyte.net/post/2022-03/vue3-ref-dom/</link>
      <pubDate>Wed, 23 Mar 2022 14:56:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/vue3-ref-dom/</guid>
      <description>Background question How to get focus for input in vue3? How does vue3 setup syntactic sugar get the dom element? The vue2 approach In vue2, after setting the ref property on a component, you can access the corresponding DOM element via this.$refs.ref. 1 &amp;lt;input type=&amp;#34;text&amp;#34; ref=&amp;#34;inputRef&amp;#34; /&amp;gt; In JavaScript you can access. 1 this.$refs.usernameInput If you need to focus on the input box. 1 this.$refs.usernameInput.focus() vue3 There are no $refs</description>
    </item>
    
    <item>
      <title>Hash and history routing in the browser</title>
      <link>https://www.sobyte.net/post/2022-02/hash-history-router/</link>
      <pubDate>Sun, 20 Feb 2022 15:01:34 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/hash-history-router/</guid>
      <description>When we use front-end rendering like Vue or React, there are usually two types of routing: hash routing and history routing. hash routing: listen to the hash changes in the url and render different content, this kind of routing does not send requests to the server and does not need server-side support. history routing: listens for changes in the path in the url and requires the support of both the</description>
    </item>
    
    <item>
      <title>Vue3 - Responsive Principle Explained</title>
      <link>https://www.sobyte.net/post/2022-02/vue3-responsive/</link>
      <pubDate>Wed, 09 Feb 2022 11:23:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/vue3-responsive/</guid>
      <description>Vue3.0 pre-alpha version was officially released on October 5, 2019, followed by more than 500 PRs and 1000 commits over the next few months, and finally Vue3.0 alpha.1 was released on January 4, 2020. the core code of Vue3.0 is basically complete, and the main work left so far is server-side rendering, which the Vue team is actively working on. The Vue team is also actively working on it. The</description>
    </item>
    
    <item>
      <title>Evan You announces: Vue 3 will be the new default version</title>
      <link>https://www.sobyte.net/post/2022-01/vue-3-as-new-default/</link>
      <pubDate>Fri, 21 Jan 2022 08:47:08 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/vue-3-as-new-default/</guid>
      <description>In his announcement, he mentioned that developers should be concerned about the measures that may need to be taken to confirm whether they need to make appropriate changes to avoid anomalies before the default version switch.
The following is reproduced from the original announcement by Evan You.
 Make sure to read the Potential Required Actions section to see if you need to make certain changes before the switch to avoid breakage.</description>
    </item>
    
    <item>
      <title>Using vue hooks in react</title>
      <link>https://www.sobyte.net/post/2022-01/react-vue-hooks/</link>
      <pubDate>Sun, 09 Jan 2022 10:54:32 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/react-vue-hooks/</guid>
      <description>You may see the title and wonder: why do this? react hooks is a useful invention that reorganizes the paradigm of writing and thinking about code, using smaller abstractions to split state and functions by function rather than centralizing them into a single state or lifecycle. But react hooks suffers from the notion of state dependencies, and worse: it relies on manual management - despite the official eslint rules provided</description>
    </item>
    
    <item>
      <title>vue project to get local LAN IP address</title>
      <link>https://www.sobyte.net/post/2022-01/vue-intranet-ip/</link>
      <pubDate>Sun, 02 Jan 2022 12:44:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/vue-intranet-ip/</guid>
      <description>Sometimes there is a need to access the vue project via IP address on the LAN, so we document the method to get the local IP. Installing dependencies To get the IP, we need to use the os module, and we need to install the following dependencies. 1 npm install os Modify the configuration You need to modify the project configuration file vue.config.js. Add a function to get the local</description>
    </item>
    
    <item>
      <title>Vue directive to implement OutClick</title>
      <link>https://www.sobyte.net/post/2021-11/vue-directive-out-click/</link>
      <pubDate>Wed, 24 Nov 2021 15:09:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/vue-directive-out-click/</guid>
      <description>In general, the most listened to business is Click event, but in some business such as Alert and Pop effect, you need to listen to the click outside the element to close the pop-up window. Original Implementation Here are two common ways to implement the modal box Option 1: The default click is placed in the bubble stage, just add a click on the content area to prevent bubbling 1</description>
    </item>
    
    <item>
      <title>Vue3 core Typescript class analysis</title>
      <link>https://www.sobyte.net/post/2021-09/vue3-core-typescript-class/</link>
      <pubDate>Thu, 09 Sep 2021 23:20:35 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/vue3-core-typescript-class/</guid>
      <description>Unlike using JavaScript, writing Vue programs in Typescript requires an understanding of Vue-related types, most of which are written in the @vue/runtime-core package.
Component A Vue page is composed of a component, and the component&amp;rsquo;s class in Vue is Component, which inherits from ComponentOptions, FunctionalComponent and ComponentPublicInstanceConstructor.
Of these, ComponentOptions inherits from ComponentOptionsBase, which is the declarative options component we often write that contains properties such as data, methods, etc.</description>
    </item>
    
    <item>
      <title>How to Implement Two Way Binding With Vuejs Prop</title>
      <link>https://www.sobyte.net/post/2021-06/how-to-implement-two-way-binding-with-vuejs-prop/</link>
      <pubDate>Mon, 14 Jun 2021 15:39:07 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/how-to-implement-two-way-binding-with-vuejs-prop/</guid>
      <description>I recently encountered a problem, that is, how to implement two-way binding prop in Vue.js is better.
Previously I was passing the prop to the child component, and then the child component directly changed the prop directly, this can reflect the result to the parent component, but it is not a good solution.
For example, I often encounter this Warning.
 Avoid mutating a prop directly since the value will be overwrittenâ€¦</description>
    </item>
    
  </channel>
</rss>
