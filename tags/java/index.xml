<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on SoByte</title>
    <link>https://www.sobyte.net/tags/java/</link>
    <description>Recent content in java on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Mar 2022 08:59:59 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Commonly used encryption algorithms in programming</title>
      <link>https://www.sobyte.net/post/2022-03/encryption-algorithms/</link>
      <pubDate>Mon, 21 Mar 2022 08:59:59 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/encryption-algorithms/</guid>
      <description>Preface There are several common encryption algorithms in programming, and they each have applications in different scenarios. All encryption methods except the message digest algorithm will require a key. Message digest algorithm Symmetric encryption algorithm Asymmetric encryption algorithm Key A key (key, also often called golden key) is some secret information used to accomplish encryption, decryption, integrity verification, and other cryptographic applications. Key classification Keys in encryption and decryption: share</description>
    </item>
    
    <item>
      <title>Go doesn&#39;t need a Java-style GC</title>
      <link>https://www.sobyte.net/post/2022-03/go-does-not-need-a-java-style-gc/</link>
      <pubDate>Sun, 06 Mar 2022 16:41:32 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/go-does-not-need-a-java-style-gc/</guid>
      <description>Modern languages like Go, Julia and Rust don&amp;rsquo;t need a garbage collector as complex as the one used by Java c#. But why is that? We first need to understand how garbage collectors work and how the various languages differ in the way they allocate memory. First, let&amp;rsquo;s look at why Java needs such a complex garbage collector. This article will cover many different garbage collector topics. Why Java relies</description>
    </item>
    
    <item>
      <title>Are there any flaws with arrays in Java&#39;s type system?</title>
      <link>https://www.sobyte.net/post/2022-03/array-on-java-type-system/</link>
      <pubDate>Sun, 06 Mar 2022 16:30:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/array-on-java-type-system/</guid>
      <description>In February 2020, Wang Yin trolled the type system of Java, saying. One of the more advanced interview questions about a programmer&amp;rsquo;s understanding of the Java type system is this: 1 2 3 4 5 6 public static void f() { String[] a = new String[2]; Object[] b = a; a[0] = &amp;#34;hi&amp;#34;; b[1] = Integer.valueOf(42); } Which line in this code is wrong? Why? If some version of Java</description>
    </item>
    
    <item>
      <title>In-depth analysis of the Callable interface</title>
      <link>https://www.sobyte.net/post/2022-02/java-callable/</link>
      <pubDate>Wed, 16 Feb 2022 15:31:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/java-callable/</guid>
      <description>1. Introduction to the Callable interface The Callable interface is a new generic interface added in JDK1.5 and declared as a functional interface in JDK1.8 as follows.
1 2 3 4  @FunctionalInterface public interface Callable&amp;lt;V&amp;gt; { V call() throws Exception; }   In JDK 1.8, an interface with only one method declared is a functional interface. A functional interface can be modified with or without the @FunctionalInterface annotation. As long as an interface contains only one method, then the interface is a functional interface.</description>
    </item>
    
    <item>
      <title>How Java beans abstract and simplify</title>
      <link>https://www.sobyte.net/post/2022-02/simple-java-bean/</link>
      <pubDate>Fri, 11 Feb 2022 10:09:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/simple-java-bean/</guid>
      <description>Today in the packaging of third-party applications open interface, write a lot of return value class, many of these classes are similar in structure only individual field names are not the same. In order to separate the fields to copy a change is not to win, and the name is the most headache. Like the following two.
1 2 3 4 5 6 7 8 9 10 11  @EqualsAndHashCode(callSuper = true) @Data public class SimpleUserResponse extends WeComResponse { private List&amp;lt;SimpleUser&amp;gt; userlist; } @EqualsAndHashCode(callSuper = true) @Data public class UserDetailResponse extends WeComResponse { private List&amp;lt;UserDetail&amp;gt; userlist; }   Is it similar?</description>
    </item>
    
    <item>
      <title>Functional programming class library vavr</title>
      <link>https://www.sobyte.net/post/2022-02/java-vavr/</link>
      <pubDate>Fri, 11 Feb 2022 09:53:47 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/java-vavr/</guid>
      <description>Whenever a new version of the JDK is released, some people say &amp;ldquo;I won&amp;rsquo;t upgrade, I&amp;rsquo;ll keep using Java 8&amp;rdquo;, but many people at work are still not very good at using the new features of Java8, and these features often make Java less &amp;ldquo;bloated&amp;rdquo;. However, I personally think that the most representative of all the new features of Java8 must be functional programming. Some may say that this style</description>
    </item>
    
    <item>
      <title>Atomic atomic classes and their underlying principles CAS</title>
      <link>https://www.sobyte.net/post/2022-01/java-atomic/</link>
      <pubDate>Tue, 25 Jan 2022 11:35:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/java-atomic/</guid>
      <description>Introduction Atomic means that an operation is uninterruptible. Even when multiple threads are executing together, once an operation is started, it is not interrupted by other threads. So: atomic classes are classes that have the characteristics of atomic/atomic operations. The atomic classes of the concurrency package JUC(java.util.concurrent) are all in java.util.concurrent.atomic. Example Run the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14</description>
    </item>
    
    <item>
      <title>Microsoft Announces VSCode Java 2022 Roadmap</title>
      <link>https://www.sobyte.net/post/2022-01/java-on-vs-code-2022-roadmap/</link>
      <pubDate>Mon, 24 Jan 2022 11:18:06 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/java-on-vs-code-2022-roadmap/</guid>
      <description>Recently, Microsoft revealed the Visual Studio Code Java development roadmap for 2022 in a developer blog and below is an overview image posted by Microsoft outlining the improvements and changes they will be making in 2022. The image is relatively concise, so follow along to see exactly what changes are in store for each item.
According to Microsoft, in 2021, more than 1.5 million developers will be developing in Java in VS Code.</description>
    </item>
    
    <item>
      <title>Java to introduce new object types to solve memory utilization problems</title>
      <link>https://www.sobyte.net/post/2022-01/java-valhalla/</link>
      <pubDate>Wed, 19 Jan 2022 13:07:46 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/java-valhalla/</guid>
      <description>What new features and improvements are coming to Java in 2022 is something I&amp;rsquo;m sure many Java developers would like to know. Combine that with some recent sharing from Java language architect Brian Goetz (Brian Goetz). Here are some blurbs.
Valhalla Brian Goetz published a piece late last year called State of Valhalla, which Very informative, it mentions that back in 2014 the Java project team started a project called Valhalla, which will bring more flexible, flat data types to the JVM platform.</description>
    </item>
    
    <item>
      <title>Time Wheel for Timed Tasks</title>
      <link>https://www.sobyte.net/post/2022-01/timingwheel/</link>
      <pubDate>Tue, 18 Jan 2022 13:37:21 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/timingwheel/</guid>
      <description>Basics of Timed Tasks First of all, let&amp;rsquo;s understand what is a timer task? Timers have very many scenarios, which you should encounter frequently in your normal work, such as generating monthly statistical reports, financial reconciliation, membership points settlement, email push, etc., are all scenarios of timer usage. Timers generally have three forms of performance: execution at a fixed period, execution after a certain delay, and execution at a specified</description>
    </item>
    
    <item>
      <title>ZGC Notes: Colored Pointers</title>
      <link>https://www.sobyte.net/post/2022-01/notes-zgc/</link>
      <pubDate>Wed, 12 Jan 2022 13:20:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/notes-zgc/</guid>
      <description>ZGC is a new generation of garbage collector introduced from jdk11, the expected stopping time is less than 10ms, and the stopping time is independent of heap size, and it can support tb-level heap.
As a fan of go, isn&amp;rsquo;t go&amp;rsquo;s GC already pretty good? The Initial Mark has a little STW, and the usual gc pause is less than ms? In fact, the effect of go GC is still far from the promise of ZGC, not when it comes to large heaps.</description>
    </item>
    
    <item>
      <title>Serialization of Lambda expressions in the JDK and the clever use of SerializedLambda</title>
      <link>https://www.sobyte.net/post/2021-12/learn-about-lambda-serialization/</link>
      <pubDate>Tue, 14 Dec 2021 15:49:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/learn-about-lambda-serialization/</guid>
      <description>I want to Javassist as the core JDBC-based Javassist in my free time to write a set of lightweight ORM framework to abandon reflection calls, the process of reading mybatis, tk-mapper, mybatis-plus and spring-boot-starter-jdbc source code. Among them, I found that the LambdaQueryWrapper in mybatis-plus can get the method information (actually CallSite information) of the currently called Lambda expression, so here is a complete record. This article is based on</description>
    </item>
    
    <item>
      <title>Re-learning memory mapping (mmap) in Java</title>
      <link>https://www.sobyte.net/post/2021-12/learn-mmap/</link>
      <pubDate>Fri, 10 Dec 2021 15:13:04 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/learn-mmap/</guid>
      <description>mmap Basic Concepts mmap is a memory mapping method that maps a file to a process address space, mapping a file&amp;rsquo;s disk address to a process virtual address. Once such a mapping relationship is implemented, the process can read and write to this section of memory using pointers, and the system will automatically write back dirty pages to the corresponding file disk, i.e., it is done with the file without</description>
    </item>
    
    <item>
      <title>Code obfuscation for Spring Boot applications using the ProGuard plugin proguard-maven-plugin</title>
      <link>https://www.sobyte.net/post/2021-11/use-proguard-maven-plugin-to-obfuscate-the-spring-boot-program/</link>
      <pubDate>Sat, 13 Nov 2021 13:34:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/use-proguard-maven-plugin-to-obfuscate-the-spring-boot-program/</guid>
      <description>Because Java code is very easy to decompile, Java code obfuscation is needed to protect Java source code well. This article describes how to use ProGuard&amp;rsquo;s plugin proguard-maven-plugin to obfuscate Java programs. How ProGuard works ProGuard can rename classes, fields and methods by removing useless code and using short, meaningless names. This allows you to compress, optimize and obfuscate your code. The result is a smaller compiled file that is</description>
    </item>
    
    <item>
      <title>PMML, JAVA calls Python algorithm model</title>
      <link>https://www.sobyte.net/post/2021-11/pmml/</link>
      <pubDate>Thu, 11 Nov 2021 18:51:47 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/pmml/</guid>
      <description>Most of the company&amp;rsquo;s applications are developed in JAVA, so it is very difficult to use Python models, but after searching online, we can convert the generated models into PMML files and call them directly in JAVA. PMML Introduction Predictive Model Markup Language (PMML) is an XML-based format standard for storing models proposed by Dr. Robert Lee Grossman. PMML provides a way for different data analysis software or programming languages</description>
    </item>
    
    <item>
      <title>Unsafe and ByteBuffer things</title>
      <link>https://www.sobyte.net/post/2021-10/unsafe-bytebuffer/</link>
      <pubDate>Tue, 19 Oct 2021 22:56:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/unsafe-bytebuffer/</guid>
      <description>Starting with the constructor of DirectBuffer The off-heap memory opened by DirectBuffer is actually allocated through Unsafe, take a look at the constructor of DirectBuffer.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  DirectByteBuffer(int cap) { // package-private  super(-1, 0, cap, cap); boolean pa = VM.isDirectMemoryPageAligned(); int ps = Bits.pageSize(); long size = Math.</description>
    </item>
    
    <item>
      <title>How to hot load jars for Spring Boot to implement dynamic plugins?</title>
      <link>https://www.sobyte.net/post/2021-10/spring-boot-hot-load-jars/</link>
      <pubDate>Tue, 19 Oct 2021 22:12:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/spring-boot-hot-load-jars/</guid>
      <description>Background Dynamic plug-in programming is a cool thing to achieve decoupling of business functions for easy maintenance, in addition to enhance scalability can be extended at any time without stopping the server, but also has a very good openness in addition to their own R &amp;amp; D staff can develop features, but also to accept third-party developers in accordance with the specifications of the development of plug-ins.
The common implementation of dynamic plug-ins are SPI, OSGI and other solutions, which cannot be injected into the main program&amp;rsquo;s bean objects in the plug-in because they are not managed by Spring IOC.</description>
    </item>
    
    <item>
      <title>Talk about some tips for using Unsafe</title>
      <link>https://www.sobyte.net/post/2021-10/java-unsafe/</link>
      <pubDate>Fri, 15 Oct 2021 20:55:19 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/java-unsafe/</guid>
      <description>I remember when I first learned Java, just after learning the syntax basics, I came across reflection, a feature provided by Java, although it seems to be a very basic knowledge point now, but at that time, I was undoubtedly excited, and I instantly felt that I was out of the &amp;ldquo;Java beginner&amp;rdquo; team. As I gained experience, I gradually learned a lot of similar points that I was excited about, and the Unsafe technique was definitely one of them.</description>
    </item>
    
    <item>
      <title>How to ensure no data loss during power down in File IO</title>
      <link>https://www.sobyte.net/post/2021-10/filechannel-force/</link>
      <pubDate>Sat, 09 Oct 2021 21:13:35 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/filechannel-force/</guid>
      <description>It&amp;rsquo;s been a long time since I&amp;rsquo;ve shared tips on file IO, and I vaguely remember the last time I did so.
Kirito is also working on the topic &amp;ldquo;RocketMQ Storage System Design for Hot and Cold Read/Write Scenarios&amp;rdquo;, but we are participating in the internal track, so we can&amp;rsquo;t rank with our external partners.
As we all know, storage design is inseparable from file IO, and storing data in files for persistence is a regular operation in most message queues and database systems.</description>
    </item>
    
    <item>
      <title>Notes on using HeapByteBuffer for in-heap memory</title>
      <link>https://www.sobyte.net/post/2021-10/heapbytebuffer-notes/</link>
      <pubDate>Fri, 08 Oct 2021 17:44:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/heapbytebuffer-notes/</guid>
      <description>Today we share a pitfall that many people tend to step in: the use of HeapByteBuffer.
ByteBuffer has two main implementation classes
 HeapByteBuffer In-heap memory DirectByteBuffer Off-heap memory  In my personal experience, I tend to use DirectByteBuffer in most cases, both for read and write operations, mainly because HeapByteBuffer may have some unexpected internal operations when interacting with FileChannel, which is the caveat mentioned in the title of this article, so let&amp;rsquo;s sell it here.</description>
    </item>
    
    <item>
      <title>More than 100,000 words of detailed analysis of the implementation principle of Stream in the JDK</title>
      <link>https://www.sobyte.net/post/2021-10/stream-of-jdk/</link>
      <pubDate>Wed, 06 Oct 2021 22:20:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/stream-of-jdk/</guid>
      <description>Prerequisites Stream was first introduced in JDK1.8, nearly 8 years ago (JDK1.8 was released at the end of 2013), and the introduction of Stream greatly simplified some development scenarios, but on the other hand, it may have reduced the readability of the code (it is true that many people say that Stream will reduce the readability of the code, but in my opinion, the readability of the code is improved</description>
    </item>
    
    <item>
      <title>How do I collect and manage multi-line logs?</title>
      <link>https://www.sobyte.net/post/2021-09/collect-multiline-logs/</link>
      <pubDate>Mon, 27 Sep 2021 15:17:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/collect-multiline-logs/</guid>
      <description>Multi-line logs (e.g. exception messages) provide a lot of very valuable information for debugging application problems, and today&amp;rsquo;s distributed microservices are popular basically collect the logs uniformly, such as the common ELK, EFK and other schemes, but these schemes do not look at multi-line logs as a whole without proper configuration, but each line is treated as a separate line of logs. This is difficult for us to accept.
In this article, we will describe the strategies of some common log collection tools for handling multi-line logs.</description>
    </item>
    
    <item>
      <title>New interview with the father of Java: JIT is great, but not for all languages</title>
      <link>https://www.sobyte.net/post/2021-08/james-gosling-interview-evrone/</link>
      <pubDate>Thu, 26 Aug 2021 20:08:13 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/james-gosling-interview-evrone/</guid>
      <description>James Gosling, the Canadian computer scientist who did the original design of Java and implemented the compiler and virtual machine for the original version of Java, is also widely regarded as the &amp;lsquo;father of Java&amp;rsquo;.
James Gosling was recently interviewed by Grigory Petrov, a technical evangelist (DevRel) at Evrone, an enterprise software development company.
In this interview James Gosling talks a lot about programming languages, such as his views on the new features of modern programming languages, how he feels about the disruptive changes caused by updates to programming languages, why not all programming languages use JIT techniques and much more.</description>
    </item>
    
    <item>
      <title>Learn Java&#39;s Coroutine framework Loom</title>
      <link>https://www.sobyte.net/post/2021-08/learn-about-loom-project/</link>
      <pubDate>Sun, 22 Aug 2021 10:26:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/learn-about-loom-project/</guid>
      <description>I&amp;rsquo;ve been following the development progress of the JDK concurrent library for a long time, but I was busy some time ago and rarely checked the official OpenJDK website.
The Java concurrent project Loom (because the project is still in the development stage, OpenJDK gives only a small amount of Loom project-related information in the official website https://openjdk.java.net/projects/loom) has been established before 2018, and has been released based on JDK17 compilation and JDK18 compilation, etc.</description>
    </item>
    
    <item>
      <title>Go Channel vs Java BlockingQueue</title>
      <link>https://www.sobyte.net/post/2021-07/go-channel-vs-java-blockingqueue/</link>
      <pubDate>Fri, 02 Jul 2021 18:09:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/go-channel-vs-java-blockingqueue/</guid>
      <description>Recently, I was implementing two requirements and wanted to decouple them using a queue since there is no dependency between them; however, there is no readily available and concurrency-safe data structure in Go&amp;rsquo;s standard library; however, Go provides a more elegant solution, which is channel. Using Channel One of the major differences between Go and Java is the different concurrency model; Go uses the CSP (Communicating sequential processes) model; in</description>
    </item>
    
    <item>
      <title>Finding the Kth Largest Number in a Large Amount of Unordered Data</title>
      <link>https://www.sobyte.net/post/2021-06/finding-the-kth-largest-number-in-a-large-amount-of-unordered-data/</link>
      <pubDate>Wed, 30 Jun 2021 17:39:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/finding-the-kth-largest-number-in-a-large-amount-of-unordered-data/</guid>
      <description>Find the Kth largest value in an unordered long array of millions. The requirement is, of course, that the faster you find it, the better.
top K questions As soon as the problem is described, many people will associate it with the top K problem, which is discussed extensively in both the algorithm and engineering fields, and it is easy to encounter similar problems in actual projects, so I also took the opportunity to summarize it into an article.</description>
    </item>
    
    <item>
      <title>Introduction to Spring Cloud Bus</title>
      <link>https://www.sobyte.net/post/2021-06/introduction-to-spring-cloud-bus/</link>
      <pubDate>Tue, 29 Jun 2021 17:57:28 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/introduction-to-spring-cloud-bus/</guid>
      <description>The Spring Cloud Bus positions itself as a messaging bus within the Spring Cloud system, using a message broker to connect all nodes of a distributed system.
The official Reference documentation for the Bus is relatively simple, so simple that it doesn&amp;rsquo;t even have a diagram.
This is the most 2.1.0 version of the Spring Cloud Bus code structure (less code)
Bus Example Demonstration Before we analyze the implementation of the Bus, let&amp;rsquo;s look at two simple examples of using Spring Cloud Bus.</description>
    </item>
    
    <item>
      <title>The Underlying Implementation of Annotations in the Jdk</title>
      <link>https://www.sobyte.net/post/2021-06/the-underlying-implementation-of-annotations-in-the-jdk/</link>
      <pubDate>Mon, 28 Jun 2021 10:45:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/the-underlying-implementation-of-annotations-in-the-jdk/</guid>
      <description>Using Java for several years, annotations are a common type, especially in some frameworks will be a lot of annotations to do component identification, configuration or strategy. But has not been deeply to explore the JDK annotations in the end what is the bottom is how to achieve? So refer to some information, to do a slightly more detailed analysis.
JDK annotations description Refer to JLS-9.6 inside JavaSE-8 for a description of the annotations as follows.</description>
    </item>
    
    <item>
      <title>The Popular Java Json Library Jackson</title>
      <link>https://www.sobyte.net/post/2021-06/the-popular-java-json-library-jackson/</link>
      <pubDate>Sat, 26 Jun 2021 20:19:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/the-popular-java-json-library-jackson/</guid>
      <description>Jackson is a JSON (return) serialization tool in the Java ecosystem, which is efficient, powerful, and secure (without as many security vulnerabilities as Fastjson). It is also widely used, with Spring Boot/Cloud, Akka, Spark and many other frameworks using it as the default JSON processing tool. Dependency To use Jackson, you need to add the following dependencies to your project (note: you don&amp;rsquo;t need to add them manually when using</description>
    </item>
    
    <item>
      <title>Spring-Cloud-Gateway Custom Gateway Filter</title>
      <link>https://www.sobyte.net/post/2021-06/spring-cloud-gateway-custom-gateway-filter/</link>
      <pubDate>Sat, 26 Jun 2021 15:04:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/spring-cloud-gateway-custom-gateway-filter/</guid>
      <description>The scope of GatewayFilter is the specified routing configuration, and the routing configuration options require filters to specify the list of GatewayFilters that you want to use. We can customize the GatewayFilter to do additional extensions to achieve some functionality that does not exist in the built-in GatewayFilter and apply it to our routing configuration.
How to customize GatewayFilter To customize GatewayFilter, you need to implement the org.springframework.cloud.gateway.filter.factory.GatewayFilterFactory interface, and the definition of GatewayFilterFactory is as follows.</description>
    </item>
    
    <item>
      <title>Be Aware of Security Vulnerability Caused by Spring Boot Actuator</title>
      <link>https://www.sobyte.net/post/2021-06/be-aware-of-security-vulnerability-caused-by-spring-boot-actuator/</link>
      <pubDate>Sat, 26 Jun 2021 11:52:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/be-aware-of-security-vulnerability-caused-by-spring-boot-actuator/</guid>
      <description>Recently, we have been particularly disturbed by various security vulnerabilities, and we have received dozens of vulnerability emails scanned by the security team in a week, which have a class of vulnerabilities that are easy to ignore, but have an extremely wide impact and are extremely harmful, and you should not be unfamiliar with my name, which is Spring Boot Actuator.
Before writing this article, I did a little survey with my friends asking them about their knowledge of the Spring Boot Actuator and the results were surprisingly consistent, everyone knows that Spring Boot provides automatic configuration of the spring-boot-starter-actuator, but very few people but few people actually use its related features.</description>
    </item>
    
    <item>
      <title>Introduction to Introspector for Java</title>
      <link>https://www.sobyte.net/post/2021-06/introduction-to-introspector-for-java/</link>
      <pubDate>Mon, 21 Jun 2021 10:26:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/introduction-to-introspector-for-java/</guid>
      <description>This article mainly analyzes the usage of Introspector. Introspector is a tool class that deals specifically with JavaBean and is used to get the descriptors in JavaBean. The commonly used descriptor-related classes of JavaBean are BeanInfo, PropertyDescriptor, MethodDescriptor, BeanDescriptor, EventSetDescriptor and ParameterDescriptor. The following will slowly analyze how these classes are used, as well as some of the features of Introspector.
What is JavaBean JavaBean is a special (actually, it&amp;rsquo;s okay to say ordinary, it&amp;rsquo;s not very special) class, mainly used to pass data information, the methods in this class are mainly used to access private fields, and the method names conform to some naming rules (fields are private, each field has Setter and Getter methods, methods and fields named to meet the first letter lower case hump naming ).</description>
    </item>
    
    <item>
      <title>Spring Master Slave Databas Configuration and Dynamic Datasource Switching Principles</title>
      <link>https://www.sobyte.net/post/2021-06/spring-master-slave-databas-configuration-and-dynamic-datasource-switching-principles/</link>
      <pubDate>Sun, 20 Jun 2021 15:13:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/spring-master-slave-databas-configuration-and-dynamic-datasource-switching-principles/</guid>
      <description>In large applications, it is a common design pattern to configure master-slave databases and use read-write separation. In Spring applications, to implement read-write separation, it is best to not make changes to existing code, but to support it transparently at the bottom.
Spring has a built-in AbstractRoutingDataSource that can configure multiple data sources into a Map and then, depending on the key, return different data sources. Because AbstractRoutingDataSource is also a DataSource interface, the application can set the key first, and the code that accesses the database can get the corresponding real data source from AbstractRoutingDataSource to access the specified database.</description>
    </item>
    
    <item>
      <title>Analysis of the Problems Caused by Replacing Fastjson With Gson</title>
      <link>https://www.sobyte.net/post/2021-06/analysis-of-the-problems-caused-by-replacing-fastjson-with-gson/</link>
      <pubDate>Fri, 18 Jun 2021 12:04:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/analysis-of-the-problems-caused-by-replacing-fastjson-with-gson/</guid>
      <description>The security vulnerability of Json serialization framework has always been a topic of conversation among programmers, especially in the past two years, fastjson has been targeted research, and more frequently reported vulnerabilities, a vulnerability does not matter, but the security team is always using email to urge the online application to upgrade the dependency, which can be fatal, I believe that many people are also unbearable, consider using other serialization framework to replace fastjson.</description>
    </item>
    
  </channel>
</rss>
