<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on SoByte</title>
    <link>https://www.sobyte.net/tags/react/</link>
    <description>Recent content in react on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Mar 2022 11:05:05 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The one thing that makes React18 better than the old React</title>
      <link>https://www.sobyte.net/post/2022-03/react18-better-than-the-old-react/</link>
      <pubDate>Sat, 19 Mar 2022 11:05:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/react18-better-than-the-old-react/</guid>
      <description>React18 has entered the RC (release candidate) phase, only one step away from the official version. Today, instead of talking about new features, we&amp;rsquo;ll talk about a detail that makes v18 better than the old version: v18 may have fewer component renders. Where does the state come from? In the following components. 1 2 3 4 function App() { const [num, update] = useState(0); // ...省略</description>
    </item>
    
    <item>
      <title>ref of component communication</title>
      <link>https://www.sobyte.net/post/2022-03/react-ref/</link>
      <pubDate>Tue, 08 Mar 2022 09:04:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/react-ref/</guid>
      <description>The official react documentation describes it this way. Refs provide a way to allow us to access DOM nodes or React elements created in the render method. I. A simple example Let&amp;rsquo;s look directly at an example of ref usage. Here is a function component that creates a ref using useRef. 1 2 3 4 5 6 7 8 9 const App = () =&amp;gt; { const myRef = useRef();</description>
    </item>
    
    <item>
      <title>The difference between useEffect and useLayoutEffect</title>
      <link>https://www.sobyte.net/post/2022-03/useeffect-and-uselayouteffect/</link>
      <pubDate>Tue, 08 Mar 2022 08:59:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/useeffect-and-uselayouteffect/</guid>
      <description>I. The execution process of useEffect and useLayoutEffect The first thing to note is that useLayoutEffect and useEffect are very similar and have the same function signature. The only difference is that useEffect is executed asynchronously, while useLayoutEffect is executed synchronously. When the function component is refreshed (rendered), the whole process of the component containing the useEffect runs as follows. component re-rendering is triggered (by changing the component state or</description>
    </item>
    
    <item>
      <title>The mystery of the React hook</title>
      <link>https://www.sobyte.net/post/2022-03/mistery-of-react-hook/</link>
      <pubDate>Sat, 05 Mar 2022 11:53:19 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/mistery-of-react-hook/</guid>
      <description>As we all know, React has two forms of components, class components and function components, and developers can use class components and function components to achieve the same purpose and build the exact same page. Since I came across React last August, I have been using function components because they are recommended by my company. I have to say that function components are much better than class components. You can</description>
    </item>
    
    <item>
      <title>In-depth understanding of useState</title>
      <link>https://www.sobyte.net/post/2022-02/react-usestate/</link>
      <pubDate>Fri, 25 Feb 2022 09:54:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/react-usestate/</guid>
      <description>Why don&amp;rsquo;t function components before react 16 have state? As you know, function components did not have state before react 16, and component state could only be passed through props. Write two simple components, a class component and a function component. 1 2 3 4 5 6 7 8 9 10 11 12 13 const App = () =&amp;gt;&amp;lt;span&amp;gt;123&amp;lt;/span&amp;gt;; class App1 extends React.Component { constructor(props) { super(props); this.state = {</description>
    </item>
    
    <item>
      <title>How to build your own react hooks</title>
      <link>https://www.sobyte.net/post/2022-02/self-react-hooks/</link>
      <pubDate>Mon, 21 Feb 2022 09:31:47 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/self-react-hooks/</guid>
      <description>With the new API for hooks added in React v16.8.0, it&amp;rsquo;s important to understand how to use it and be able to write a few custom hooks for our business. 1. One of the commonly used hooks There are several built-in hooks officially provided, let&amp;rsquo;s have a brief look at their usage. 1.1 useState: State hooks If we need to update the state of the page, we can put it</description>
    </item>
    
    <item>
      <title>Hash and history routing in the browser</title>
      <link>https://www.sobyte.net/post/2022-02/hash-history-router/</link>
      <pubDate>Sun, 20 Feb 2022 15:01:34 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/hash-history-router/</guid>
      <description>When we use front-end rendering like Vue or React, there are usually two types of routing: hash routing and history routing. hash routing: listen to the hash changes in the url and render different content, this kind of routing does not send requests to the server and does not need server-side support. history routing: listens for changes in the path in the url and requires the support of both the</description>
    </item>
    
    <item>
      <title>Some tips to help you in react development</title>
      <link>https://www.sobyte.net/post/2022-02/react-use-tips/</link>
      <pubDate>Sun, 20 Feb 2022 12:58:36 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/react-use-tips/</guid>
      <description>I have been using react development for 1 year, so I can&amp;rsquo;t say I am very proficient, but in the process of using it, I did understand and summarize some tips that can speed up our subsequent development. 1. some tips in useState When we use react to develop function comppoent, we can&amp;rsquo;t help but see useState everywhere, so what are the pitfalls and things to watch out for in</description>
    </item>
    
    <item>
      <title>Implement a React popup component with dynamic effects</title>
      <link>https://www.sobyte.net/post/2022-02/react-transition-modal/</link>
      <pubDate>Sat, 19 Feb 2022 20:36:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/react-transition-modal/</guid>
      <description>When we write some UI components, it is easy to implement them without considering dynamic effects, mainly the toggle of presence or absence (similar to the v-if property in Vue) or visibility (similar to the v-show property in Vue). 1. Pop-ups without motion In React, it can be implemented like this. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 interface ModalProps { open: boolean;</description>
    </item>
    
    <item>
      <title>What is the significance of Suspense for React?</title>
      <link>https://www.sobyte.net/post/2022-02/suspense-react/</link>
      <pubDate>Fri, 18 Feb 2022 21:23:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/suspense-react/</guid>
      <description>Many people may not have used Suspense in their projects, but Suspense is a very important part of React&amp;rsquo;s future development. This article will explain the significance of Suspense for React. React&amp;rsquo;s iterative process React has gone through three major changes in its main features from v16 to v18. v16: Asynchronous Mode v17: Concurrent Mode v18: Concurrent Render (concurrent update) To understand the significance of these three changes, you need</description>
    </item>
    
    <item>
      <title>Mad about the upgrade, Etsy drops React</title>
      <link>https://www.sobyte.net/post/2022-02/etsy-drops-react/</link>
      <pubDate>Sat, 12 Feb 2022 10:53:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/etsy-drops-react/</guid>
      <description>There is a long-standing debate about whether to use Preact or React, the MIT-licensed open source software that has over 26k stars on GitHub and 1/4 million downloads per week on NPM. And React, an internal project from Facebook, has become one of the mainstream front-end frameworks after being open-sourced in 2013.
Baidu has asked to stop using React / React Native internally for a long time, and Ali has started to pilot Preact in some of its businesses.</description>
    </item>
    
    <item>
      <title>React principle - lane priority and diff update</title>
      <link>https://www.sobyte.net/post/2022-01/react-lane/</link>
      <pubDate>Sun, 16 Jan 2022 20:14:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/react-lane/</guid>
      <description>The model for handling priorities in React 16 is ExpirationTime, which uses a length of time to describe the priority of a task. React 17, on the other hand, uses the Lane model to handle task priorities, which is able to cover more boundary conditions by assigning different priorities to a bit and manipulating the priorities through 31-bit bitwise operations. In short: a binary number is used to represent the</description>
    </item>
    
    <item>
      <title>Using vue hooks in react</title>
      <link>https://www.sobyte.net/post/2022-01/react-vue-hooks/</link>
      <pubDate>Sun, 09 Jan 2022 10:54:32 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/react-vue-hooks/</guid>
      <description>You may see the title and wonder: why do this? react hooks is a useful invention that reorganizes the paradigm of writing and thinking about code, using smaller abstractions to split state and functions by function rather than centralizing them into a single state or lifecycle. But react hooks suffers from the notion of state dependencies, and worse: it relies on manual management - despite the official eslint rules provided</description>
    </item>
    
    <item>
      <title>Using redux in react</title>
      <link>https://www.sobyte.net/post/2021-11/using-redux-in-react/</link>
      <pubDate>Wed, 24 Nov 2021 15:22:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/using-redux-in-react/</guid>
      <description>Redux is a state container for JavaScript that provides predictable state management. Redux is generally used with React, but it can also be used in Vue, which is said to be based on Redux. In complex projects, it is unrealistic to communicate between components by passing props layer by layer, which requires global unified state management, as well as the need to know the process of state change to facilitate</description>
    </item>
    
    <item>
      <title>Error Boundaries and Global Error Handling in React 16</title>
      <link>https://www.sobyte.net/post/2021-09/react-16-error-boundaries/</link>
      <pubDate>Sat, 25 Sep 2021 18:08:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/react-16-error-boundaries/</guid>
      <description>As of React 16, any error not caught by an error boundary will cause the entire React component tree to be uninstalled. For large projects that have been in development for a long time and where Code Review is not as stringent, upgrading to React 16 may reveal that exceptions that were previously only occasionally localized and did not receive enough attention may now occasionally cause the entire application to</description>
    </item>
    
    <item>
      <title>Get React component examples based on DOM nodes in React 17</title>
      <link>https://www.sobyte.net/post/2021-09/react-17-find-react-element-by-dom/</link>
      <pubDate>Wed, 22 Sep 2021 15:33:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/react-17-find-react-element-by-dom/</guid>
      <description>In React, the ReactDOM.findDomNode method is used to get the DOM elements returned by the render method of a component instance. But what if, on the other hand, you want to get the component instance based on the DOM elements? I&amp;rsquo;m sure anyone familiar with React has seen the following code 1 2 3 4 5 6 7 8 9 /** 根据 DOM 节点查找其所</description>
    </item>
    
    <item>
      <title>Analysis and handling of document.addEventListener exceptions after upgrading React16 to React17</title>
      <link>https://www.sobyte.net/post/2021-09/react17-document-addeventlistener/</link>
      <pubDate>Tue, 21 Sep 2021 13:22:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/react17-document-addeventlistener/</guid>
      <description>Compared to React 16, the new features of React17 are featureless, so the upgrade from 16 to 17 is relatively smooth. One disruptive change, however, is the change in the event system. In React 17, React will no longer attach event handlers at the document level. Instead, it will attach them to the root DOM container into which your React tree is rendered. Exceptions are thrown wherever document.addEventListener is used</description>
    </item>
    
    <item>
      <title>Common Ways to Implement Animations in React</title>
      <link>https://www.sobyte.net/post/2021-07/common-ways-to-implement-animations-in-react/</link>
      <pubDate>Tue, 20 Jul 2021 10:02:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/common-ways-to-implement-animations-in-react/</guid>
      <description>Nowadays, users&#39; requirements for front-end pages are no longer satisfied with achieving functionality, but also with value and fun. In addition to the overall UI aesthetics, adding the right animation effect in the right place is often more expressive and natural than static pages. For example, a simple loading animation or page switching effect can not only relieve the user&amp;rsquo;s waiting emotion, but even silently achieve the effect of brand</description>
    </item>
    
    <item>
      <title>React-getDerivedStateFromProp</title>
      <link>https://www.sobyte.net/post/2021-07/react-getderiveddtatefromprop/</link>
      <pubDate>Sun, 04 Jul 2021 09:31:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/react-getderiveddtatefromprop/</guid>
      <description>Starting with React 16.3, React deprecated some APIs (componentWillMount, componentWillReceiveProps, and componentWillUpdate) and introduced some new ones instead, including getDerivedStateFromProps. getDerivedStateFromProps. Depending on the application scenario, getDerivedStateFromProps is used in different ways.
Semi-controlled components Although React officially does not recommend semi-controlled components, and certainly not from the perspective of API design and maintenance. However, in practice, users often don&amp;rsquo;t care about the internal implementation of a business logic, but want to have full control over some internal state when needed, so semi-controlled components are a good choice.</description>
    </item>
    
    <item>
      <title>Learn React hooks easily: useEffect() as an example</title>
      <link>https://www.sobyte.net/post/2021-06/learn-react-hooks-easily/</link>
      <pubDate>Mon, 28 Jun 2021 11:20:21 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/learn-react-hooks-easily/</guid>
      <description>Recently I&amp;rsquo;ve come to realize that React hooks are very useful and I&amp;rsquo;ve reacquainted myself with the React framework. Here&amp;rsquo;s how to understand hooks properly, and to analyze useEffect(), one of the most important hooks, in depth. The content will be as common as possible, so that friends who are not familiar with React can also read.
React&amp;rsquo;s two sets of APIs Previously, there was only one set of React API, but now there are two: the class API and the function-based hooks API.</description>
    </item>
    
    <item>
      <title>Vite &#43; React Component Development Practice</title>
      <link>https://www.sobyte.net/post/2021-06/vite&#43;react-component-development-practice/</link>
      <pubDate>Tue, 22 Jun 2021 11:02:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/vite&#43;react-component-development-practice/</guid>
      <description>1. Vite brings the light It&amp;rsquo;s no exaggeration to say that Vite has brought an absolute revolution to the front-end.
Or we can say that the integration of esbuild, Browser es modules, HMR, Pre-Bundling, and other advanced tools and ideas about JS compilation development in the community behind Vite has brought about a revolutionary changes.
The main reason why Vite is faster is that esbuild does pre-bundles dependencies + browser native ESM dynamic compilation, which I won&amp;rsquo;t go into too much detail here</description>
    </item>
    
    <item>
      <title>React Code Sharing Best Practices Approach</title>
      <link>https://www.sobyte.net/post/2021-06/react-code-sharing-best-practices-approach/</link>
      <pubDate>Fri, 18 Jun 2021 20:13:24 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/react-code-sharing-best-practices-approach/</guid>
      <description>When any project grows to a certain complexity, it is bound to face the problem of logic reuse. In React, there are several ways to implement logic reuse: Mixin, HOC, Decorator, Render Props, Hook, etc. This article mainly analyzes the advantages and disadvantages of these ways to help developers make a more suitable way for business scenarios. Mixin Mixin has been widely used in various object-oriented languages to create a</description>
    </item>
    
  </channel>
</rss>
