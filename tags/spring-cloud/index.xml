<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-cloud on SoByte</title>
    <link>https://www.sobyte.net/tags/spring-cloud/</link>
    <description>Recent content in spring-cloud on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 09 Jul 2021 14:10:33 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/spring-cloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Cloud Gateway Custom Exception Handling</title>
      <link>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-custom-exception-handling/</link>
      <pubDate>Fri, 09 Jul 2021 14:10:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-custom-exception-handling/</guid>
      <description>When we usually use SpringMVC, as long as the request is processed by DispatcherServlet, you can customize the handling logic of different types of exceptions through @ControllerAdvice and @ExceptionHandler, you can refer to ResponseEntityExceptionHandler and DefaultHandlerExceptionResolver, the underlying principle is very simple, that is, when an exception occurs, search for the exception handler that already exists in the container and match the corresponding exception type, after a successful match, use</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway-ServerWebExchange Core Methods and Request or Response Content Modification</title>
      <link>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-serverwebexchange-core-methods-and-request-or-response-content-modification/</link>
      <pubDate>Thu, 08 Jul 2021 15:12:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-serverwebexchange-core-methods-and-request-or-response-content-modification/</guid>
      <description>Prerequisites This article was written using Spring Cloud Gateway version Greenwich.SR1. When we use Spring Cloud Gateway, we notice that the filters (including GatewayFilter, GlobalFilter and the filter chain GatewayFilterChain), all depend on the ServerWebExchange. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public interface GlobalFilter { Mono&amp;lt;Void&amp;gt; filter(ServerWebExchange exchange, GatewayFilterChain chain); } public interface GatewayFilter extends ShortcutConfigurable { Mono&amp;lt;Void&amp;gt; filter(ServerWebExchange exchange, GatewayFilterChain chain);</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway Guide</title>
      <link>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-guide/</link>
      <pubDate>Fri, 02 Jul 2021 11:24:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-guide/</guid>
      <description>Recently, I was working on the refactoring of the old system, and I needed to introduce a gateway service into the new system after the refactoring was completed, as an adaptation and proxy for the interface between the new system and the old system. Previously, many gateway applications used the Spring-Cloud-Netfilx solution based on the Zuul1.x version, but given that Zuul1.x had stopped iterating, it used a more traditional blocking</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway Custom Globalfilter</title>
      <link>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-custom-globalfilter/</link>
      <pubDate>Fri, 02 Jul 2021 11:05:59 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-custom-globalfilter/</guid>
      <description>The scope of GlobalFilter is all the routing configuration, we can do additional extensions by customizing GlobalFilter, which can be used to implement some global functions.
How to customize GlobalFilter The interface definition for org.springframework.cloud.gateway.filter.GlobalFilter is as follows.
1 2 3 4  public interface GlobalFilter { Mono&amp;lt;Void&amp;gt; filter(ServerWebExchange exchange, GatewayFilterChain chain); }   We just need to implement the org.springframework.cloud.gateway.filter.GlobalFilter interface and register the implementation class in Spring&amp;rsquo;s container, the official example is as follows.</description>
    </item>
    
    <item>
      <title>Notes on the Use of Feign and Restful Design Specifications</title>
      <link>https://www.sobyte.net/post/2021-07/notes-on-the-use-of-feign-and-restful-design-specifications/</link>
      <pubDate>Thu, 01 Jul 2021 16:55:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/notes-on-the-use-of-feign-and-restful-design-specifications/</guid>
      <description>I recently used Spring Cloud Feign as an HTTP client in a lot of projects, and encountered a lot of pitfalls, and also generated some ideas about RESTFUL design, which I&amp;rsquo;d like to document here.
SpringMVC&amp;rsquo;s request parameter binding mechanism Users who know the history of Feign will know that Feign itself is a Netflix product, Spring Cloud Feign is based on the native Feign encapsulation, the introduction of a large number of SpringMVC annotation support, making it easier to use by the majority of Spring users, but also produced a not small confusing effect.</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway - Downgrading with Hystrix using Custom Filters</title>
      <link>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-downgrading-with-hystrix-using-custom-filters/</link>
      <pubDate>Thu, 01 Jul 2021 12:06:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/spring-cloud-gateway-downgrading-with-hystrix-using-custom-filters/</guid>
      <description>Prerequisites In microservices architecture, if the downstream dependencies do not do request degradation processing, the downstream abnormal dependencies are not isolated, and it is likely that one or two services or as small as one or two interface abnormalities will lead to the unavailability of all upstream services and even affect the whole business line. Request degradation processing is still relatively mainstream is Netfilx produced Hystrix. Hystrix works on the</description>
    </item>
    
    <item>
      <title>Introduction to Spring Cloud Stream</title>
      <link>https://www.sobyte.net/post/2021-07/introduction-to-spring-cloud-stream/</link>
      <pubDate>Thu, 01 Jul 2021 11:27:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/introduction-to-spring-cloud-stream/</guid>
      <description>Spring Cloud Stream is used within the Spring Cloud architecture to build highly scalable, event-driven microservices.
There is a lot of content in Spring Cloud Stream itself and it has many external dependencies. To get familiar with Spring Cloud Stream, you need to know the following.
 Spring Framework(Spring Messaging, Spring Environment) Spring Boot Actuator Spring Boot Externalized Configuration Spring Retry Spring Integration Spring Cloud Stream  The purpose of this article is to introduce Spring Cloud Stream, and with so much knowledge, we will try to take you through Spring Cloud Steam in the simplest way possible (we will replace Spring Cloud Stream with SCS later).</description>
    </item>
    
    <item>
      <title>Introduction to Spring Cloud Bus</title>
      <link>https://www.sobyte.net/post/2021-06/introduction-to-spring-cloud-bus/</link>
      <pubDate>Tue, 29 Jun 2021 17:57:28 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/introduction-to-spring-cloud-bus/</guid>
      <description>The Spring Cloud Bus positions itself as a messaging bus within the Spring Cloud system, using a message broker to connect all nodes of a distributed system.
The official Reference documentation for the Bus is relatively simple, so simple that it doesn&amp;rsquo;t even have a diagram.
This is the most 2.1.0 version of the Spring Cloud Bus code structure (less code)
Bus Example Demonstration Before we analyze the implementation of the Bus, let&amp;rsquo;s look at two simple examples of using Spring Cloud Bus.</description>
    </item>
    
    <item>
      <title>Spring-Cloud-Gateway Custom Gateway Filter</title>
      <link>https://www.sobyte.net/post/2021-06/spring-cloud-gateway-custom-gateway-filter/</link>
      <pubDate>Sat, 26 Jun 2021 15:04:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/spring-cloud-gateway-custom-gateway-filter/</guid>
      <description>The scope of GatewayFilter is the specified routing configuration, and the routing configuration options require filters to specify the list of GatewayFilters that you want to use. We can customize the GatewayFilter to do additional extensions to achieve some functionality that does not exist in the built-in GatewayFilter and apply it to our routing configuration.
How to customize GatewayFilter To customize GatewayFilter, you need to implement the org.springframework.cloud.gateway.filter.factory.GatewayFilterFactory interface, and the definition of GatewayFilterFactory is as follows.</description>
    </item>
    
    <item>
      <title>Why Will Spring Remain One of the Best Platforms in the Cloud Native Era</title>
      <link>https://www.sobyte.net/post/2021-06/why-will-spring-remain-one-of-the-best-platforms-in-the-cloud-native-era/</link>
      <pubDate>Thu, 24 Jun 2021 10:48:19 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/why-will-spring-remain-one-of-the-best-platforms-in-the-cloud-native-era/</guid>
      <description>Back in 2015, the keynote at the SpringOne 2015 conference in Washington was Cloud Native Enterprise. The slogan of that conference was also Cloud Native and the posters were all over the place with Cloud Native.
You may wonder how you could call it Cloud Native when containers weren&amp;rsquo;t popular at that time. Although many people may not have the same understanding of Cloud Native, more and more people believe that &amp;ldquo;Cloud native is about culture, not containers&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
