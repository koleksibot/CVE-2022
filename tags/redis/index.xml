<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on SoByte</title>
    <link>https://www.sobyte.net/tags/redis/</link>
    <description>Recent content in redis on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Mar 2022 09:10:04 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis Multi-Threaded Network Model</title>
      <link>https://www.sobyte.net/post/2022-03/redis-multi-threaded-network-model/</link>
      <pubDate>Thu, 17 Mar 2022 09:10:04 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/redis-multi-threaded-network-model/</guid>
      <description>Redis has become the de facto standard for high-performance caching solutions in current technology selection, and as a result, Redis has become one of the basic skill trees for back-end developers, and the underlying principles of Redis are logically a must-learn. Redis is essentially a web server, and for a web server, the network model is the essence of it. If you understand the network model of a web server,</description>
    </item>
    
    <item>
      <title>Design and Implementation of Redis 7.0 Multi Part AOF</title>
      <link>https://www.sobyte.net/post/2022-02/redis7-multi-part-aof/</link>
      <pubDate>Fri, 11 Feb 2022 09:08:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/redis7-multi-part-aof/</guid>
      <description>Redis is a very popular in-memory database that allows for very high read and write performance by keeping data in memory. However, once a process exits, all of Redis&#39; data is lost. To solve this problem, Redis provides two persistence schemes, RDB and AOF, to save data in memory to disk and avoid data loss. In this article, we will focus on the AOF persistence scheme, some of its problems,</description>
    </item>
    
    <item>
      <title>Redis Large Cluster Scaling Performance Optimization in Practice</title>
      <link>https://www.sobyte.net/post/2022-01/redis-cluster/</link>
      <pubDate>Thu, 13 Jan 2022 14:12:01 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/redis-cluster/</guid>
      <description>1. Background In existing network environments, some businesses using Redis clusters often need to expand their node capacity as business volume increases. I have previously learnt that some of my operations and maintenance colleagues have experienced a decrease in performance after scaling a Redis cluster with a relatively large number of nodes, as evidenced by a significant increase in access latency. Some businesses are sensitive to Redis cluster access latency,</description>
    </item>
    
    <item>
      <title>Why Redis Snapshots Use Subprocesses</title>
      <link>https://www.sobyte.net/post/2021-12/whys-the-design-redis-bgsave-fork/</link>
      <pubDate>Thu, 09 Dec 2021 15:20:21 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/whys-the-design-redis-bgsave-fork/</guid>
      <description>Although we often think of Redis as a purely in-memory key-value storage system, we also use its persistence features, and RDB and AOF are two of the persistence tools Redis provides us, with RDB being a snapshot of Redis data.
In this article, we want to analyze why Redis needs to use subprocesses when persisting snapshots of data, rather than exporting the in-memory data structures directly to disk for storage.</description>
    </item>
    
    <item>
      <title>The difference between Redis and Memcached</title>
      <link>https://www.sobyte.net/post/2021-11/redis-vs-memcached/</link>
      <pubDate>Tue, 23 Nov 2021 22:06:46 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/redis-vs-memcached/</guid>
      <description>When you think of Redis, you think of Memcached, and vice versa. Those who know both have a general impression that Redis supports simple key-value data types compared to Memcached, and also provides storage for data structures such as list, set, zset, and hash; redis supports data backup, redis supports data persistence, and it looks like redis is more powerful than memcached. The redis support for data backup, redis support for data persistence, looks redis than memcached more awesome, so in fact is this not the case?</description>
    </item>
    
    <item>
      <title>Redis Large Cluster Scaling Performance Optimization Practices</title>
      <link>https://www.sobyte.net/post/2021-10/redis-large-cluster/</link>
      <pubDate>Tue, 19 Oct 2021 22:15:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/redis-large-cluster/</guid>
      <description>Background In the existing network environment, some businesses using Redis clusters often need to perform node expansion operations as their business volume rises. I have previously learned that after some operations and maintenance students expanded Redis clusters with a large number of nodes, the business side reported a decrease in cluster performance, as evidenced by a significant increase in access latency. Some businesses are sensitive to Redis cluster access latency,</description>
    </item>
    
    <item>
      <title>Lua &#43; Redis does dynamic routing to nginx</title>
      <link>https://www.sobyte.net/post/2021-10/fastdfs-lua-redis/</link>
      <pubDate>Mon, 04 Oct 2021 10:13:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/fastdfs-lua-redis/</guid>
      <description>Since FastDFS distributed file storage does not retain the original file name when uploading files, when the file is uploaded it returns a file ID in the following format, which contains the group the file is in, the secondary directory, and a base64-encoded file name generated from the client&amp;rsquo;s IP, timestamp, and file size. The file ID is stored in the client database and can only be accessed by the</description>
    </item>
    
    <item>
      <title>AWS Launches Redis-Compatible In-Memory Database: Microsecond Read Latency, Can Handle Over 13 Trillion Requests Per Day</title>
      <link>https://www.sobyte.net/post/2021-08/aws-launches-redis-compatible-database/</link>
      <pubDate>Tue, 24 Aug 2021 14:05:36 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/aws-launches-redis-compatible-database/</guid>
      <description>Following the launch of the Amazon ElastiCache for Redis fully managed memory caching service, AWS recently announced the official launch of Amazon MemoryDB for Redis, a highly persistent, Redis-compatible in-memory database. According to AWS, MemoryDB enables developers to cost-effectively build applications with microsecond read performance, single-digit millisecond write performance, and extremely high persistence and availability.
According to AWS, Amazon MemoryDB for Redis has the following features.
 Ultra-fast performance. MemoryDB stores entire data sets in memory to provide microsecond read latency, single-digit millisecond write latency, and high throughput.</description>
    </item>
    
    <item>
      <title>From now on, there is no Redis Labs, only Redis</title>
      <link>https://www.sobyte.net/post/2021-08/redislabs-changes-name-to-redis/</link>
      <pubDate>Thu, 12 Aug 2021 19:50:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/redislabs-changes-name-to-redis/</guid>
      <description>August 12, 2012 - Database vendor Redis Labs Inc. has officially announced that it has changed its name to Redis, dropping the &amp;ldquo;Labs&amp;rdquo; signifying the maturity of the company and the open source project Redis, according to the official statement.
Today, we are leading the evolution of Redis from a single service use, such as caching and session management, to offering a wide range of capabilities that enable it to power the world&amp;rsquo;s most critical applications,&amp;quot; said Ofer Bengal, co-founder and CEO of Redis.</description>
    </item>
    
    <item>
      <title>About Redisson Lock</title>
      <link>https://www.sobyte.net/post/2021-08/about-redisson-lock/</link>
      <pubDate>Mon, 09 Aug 2021 12:27:06 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/about-redisson-lock/</guid>
      <description>I wrote an article about the red lock implementation in Redis a long, long time ago, but in a production environment, the distributed lock component used in my projects has always been Redisson, a Java-based Redis client framework written with features of In-Memory Data Grid Redisson is a Java-based Redis client framework (Redis Java Client) with features of In-Memory Data Grid, which extends the basic data types of Redis with</description>
    </item>
    
    <item>
      <title>Redis6 Client Side Caching Features and Practices</title>
      <link>https://www.sobyte.net/post/2021-07/redis6-client-side-caching-features-and-practices/</link>
      <pubDate>Fri, 16 Jul 2021 10:33:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/redis6-client-side-caching-features-and-practices/</guid>
      <description>Redis 6.0 has been released more than a year ago.
The new features in Redis 6.0 have been identified through step-by-step discussions and optimizations.
Many of these features have already been introduced in previous releases such as RC.
However, there are some new changes in the official GA release:
 SSL ACL: better, command support RESP3 Client side caching: redesigned Threaded I/O Diskless replication on replicas Cluster support in Redis-benchmark and improved redis-cli cluster support Disque in beta as a module of Redis: starting to invade the message queue space Redis Cluster Proxy Support for immediate deletion when the RDB is no longer in use, for scenarios where the disk is not dropped PSYNC2: Optimized replication protocol More friendly timeout setting support Faster RDB loading, 20% ~ 30% improvement STRALGO, new string command, currently only one implementation of LCS (longest common subsequence)  @antirez mentioned that it was only the largest version update in Redis history, so it was prudent to recommend more testing and evaluation of the product in the application, and promised to release version 6.</description>
    </item>
    
    <item>
      <title>Installing Redis Object Cache for Litespeed Server</title>
      <link>https://www.sobyte.net/post/2021-06/installing-redis-object-cache-for-litespeed-server/</link>
      <pubDate>Wed, 16 Jun 2021 11:00:35 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/installing-redis-object-cache-for-litespeed-server/</guid>
      <description>Redis is an efficient object caching application. If you have a Wordpress site based on Litespeed (OpenLitespeed) server and you have LSCache installed, you can further speed up your site with an object cache.
However, you can only choose to install one of the object cache programs, Redis and Memcached. For Litespeed/Wordpress systems, there is not much difference in performance between the two as object cache programs. Today we will cover how to install a Redis server.</description>
    </item>
    
    <item>
      <title>Redis Expired Key Removal Policy</title>
      <link>https://www.sobyte.net/post/2021-06/redis-expired-key-removal-policy/</link>
      <pubDate>Sun, 13 Jun 2021 17:20:41 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/redis-expired-key-removal-policy/</guid>
      <description>Redis stores key-value pairs, where the keys are strings and the values are of various types, such as string, list, hash, set, sorted set, and so on. When setting a key-value pair, we should also set the expiration time for it, which can be set by expire and pexpire commands, or by setnx command. So, after setting the expiration time, how exactly do you delete the expired key-value pairs? To find out, let&amp;rsquo;s take a look at Redis&#39; expired key deletion policy.</description>
    </item>
    
  </channel>
</rss>
