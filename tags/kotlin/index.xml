<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on SoByte</title>
    <link>https://www.sobyte.net/tags/kotlin/</link>
    <description>Recent content in kotlin on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 15 Jan 2022 13:18:00 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Kotlin Suspend Functions</title>
      <link>https://www.sobyte.net/post/2022-01/understanding-kotlin-suspend-functions/</link>
      <pubDate>Sat, 15 Jan 2022 13:18:00 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/understanding-kotlin-suspend-functions/</guid>
      <description>suspend is a callback Understanding suspend doesn&amp;rsquo;t really require getting hung up on what the magic &amp;ldquo;hang&amp;rdquo; means or how threads are switched. In fact, behind suspend is a very familiar callback. Suppose postItem consists of three asynchronous subtasks with dependencies: requestToken, createPost and processPost, all of which are callback-based APIs. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // ‰∏â‰∏™</description>
    </item>
    
    <item>
      <title>Talking about the Context and Scope of Kotlin Coroutine</title>
      <link>https://www.sobyte.net/post/2022-01/kotlin-coroutine-context-scope/</link>
      <pubDate>Sat, 15 Jan 2022 13:01:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/kotlin-coroutine-context-scope/</guid>
      <description>Intro Opening a Kotlin Coroutine requires calling the launch or async methods on the CoroutineScope. These extension methods defined on the CoroutineScope are called coroutine builder. 1 2 3 lifecycleScope.launch(Dispatchers.IO) { delay(1000) } In addition to the suspend block, additional parameters can be passed to the coroutine builder. For example, the above Dispatchers.IO specifies that the Coroutine block of launch is dispatched to the IO thread pool for execution. Signature</description>
    </item>
    
    <item>
      <title>Getting Started with Kotlin Flow</title>
      <link>https://www.sobyte.net/post/2022-01/kotlin-flow-introduction/</link>
      <pubDate>Sat, 15 Jan 2022 12:33:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/kotlin-flow-introduction/</guid>
      <description>Starting with Sequence Sequence is a Lazy List implementation provided by Kotlin. For example, the following Fibonacci list is implemented using Sequence. 1 2 3 4 5 6 7 8 9 10 val fibonacci = sequence { var terms = Pair(0L, 1L) while (true) { üèπ yield(terms.first) terms = Pair( terms.second, terms.first + terms.second ) } } The terminal operator We use an infinite loop in the Sequence builder block</description>
    </item>
    
    <item>
      <title>Kotlin Coroutine and Retrofit</title>
      <link>https://www.sobyte.net/post/2022-01/kotlin-coroutine-retrofit/</link>
      <pubDate>Sat, 15 Jan 2022 12:11:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/kotlin-coroutine-retrofit/</guid>
      <description>Retrofit 2.6.0 supports defining interfaces with Kotlin suspend functions. This article describes how to create the most comfortable coroutine experience by customizing the Retrofit Call Adapter and Converter. Call Adapter: custom request execution logic, including thread switching, etc. Converter: Customize the deserialization logic, how to convert the bytes obtained from the request into objects. Spoiler for the final result. 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
    <item>
      <title>CPS transformations for Kotlin Coroutine</title>
      <link>https://www.sobyte.net/post/2022-01/kotlin-coroutine-cps/</link>
      <pubDate>Wed, 12 Jan 2022 13:27:06 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/kotlin-coroutine-cps/</guid>
      <description>Most implementations of coroutines are based on some kind of runtime yield primitive. However, kotlin does not have this kind of lower-level support, and still implements coroutines based on CPS transformations on jvm, which does not have yield instruction support.
It&amp;rsquo;s actually quite impressive, and I&amp;rsquo;d like to know how it&amp;rsquo;s done.
CPS Transformation CPS stands for Continuation Passing Style, which is basically code that looks like this.
1 2 3 4 5  function auth(token, resourceName) { let userId = loginUser(token) let ok = checkPermission(userId, resourceName) return ok ?</description>
    </item>
    
  </channel>
</rss>
