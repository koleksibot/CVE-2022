<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nodejs on SoByte</title>
    <link>https://www.sobyte.net/tags/nodejs/</link>
    <description>Recent content in nodejs on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Feb 2022 15:08:45 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multiprocessing and daemons in nodejs</title>
      <link>https://www.sobyte.net/post/2022-02/node-multiprocessing/</link>
      <pubDate>Sun, 20 Feb 2022 15:08:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/node-multiprocessing/</guid>
      <description>node is single-threaded, how can our node project utilize the resources of a multi-core CPU while improving the stability of the node service? This article is divided into 4 main parts to explain. node&amp;rsquo;s single thread node multi-process creation multi-process communication multi-process maintenance 1. single thread of node A process is a dynamic execution of a program with certain independent functions on a dataset, an independent unit of resource allocation</description>
    </item>
    
    <item>
      <title>Use the http module in nodejs to implement a few super useful tools</title>
      <link>https://www.sobyte.net/post/2022-02/nodejs-http-tools/</link>
      <pubDate>Sun, 20 Feb 2022 10:36:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/nodejs-http-tools/</guid>
      <description>nodejs makes it easy for us front-end developers to do some server-side operations seamlessly. Other back-end languages like php, golang, java, etc. require a certain amount of learning cost, while nodejs is customized for front-end developers. In nodejs, a native http module is provided, and we can use the http module to make a few common widgets that can greatly facilitate our work. 1. A simple HTTP service Building an</description>
    </item>
    
    <item>
      <title>How to get request parameters in the native http service of nodejs</title>
      <link>https://www.sobyte.net/post/2022-02/nodejs-http-getquery/</link>
      <pubDate>Sat, 19 Feb 2022 20:20:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/nodejs-http-getquery/</guid>
      <description>How do you parse the parameters in the request URL in the native http service of nodejs? The official url.parse() method is no longer recommended, so what method should I use? In nodejs, the url.parse method was previously recommended for parsing parameters, but this method is no longer recommended, and now the recommended API is the WHATWG URL. Since all the methods found on the web are still the same</description>
    </item>
    
    <item>
      <title>Using async functions in Map traversal</title>
      <link>https://www.sobyte.net/post/2022-02/async-in-map/</link>
      <pubDate>Sat, 19 Feb 2022 12:16:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/async-in-map/</guid>
      <description>Sometimes it is necessary to block the code for a period of time using the Sleep function, which is routinely implemented and called in the following way. 1 2 3 4 5 6 7 8 // Sleep Function const sleep = (ms) =&amp;gt; new Promise((resolve) =&amp;gt; setTimeout(resolve, ms))( // Usage async () =&amp;gt; { await sleep(3000); } ); However, when used in Array.prototype.map, it behaves incorrectly, as follows. 1 2</description>
    </item>
    
    <item>
      <title>Talking about EventEmitter</title>
      <link>https://www.sobyte.net/post/2022-02/event-emitter/</link>
      <pubDate>Fri, 18 Feb 2022 21:36:04 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/event-emitter/</guid>
      <description>Scenario The following scenario exists: when the audio player is in different states such as loading resources, playing audio, finished playing, etc., it performs different actions (such as updating UI state) through some mechanism. That is, by listening to some objects and triggering different events when their state changes. The above scenario can be implemented through EventEmitter, which can correspond to at least two patterns: Observer pattern and Publish/Subscribe pattern.</description>
    </item>
    
    <item>
      <title>Node.js dynamic table large file download practice</title>
      <link>https://www.sobyte.net/post/2022-01/node-download/</link>
      <pubDate>Tue, 11 Jan 2022 09:23:01 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/node-download/</guid>
      <description>Recently optimized the performance bottleneck of the dynamic form file download interface written by several newcomers, it feels very necessary to summarize an article as a document to throw a brick to promote learning together to write a more professional code. Simple Download The simplest case is when a file already exists on the file system on the server, and the client requests a download, the file is read directly</description>
    </item>
    
    <item>
      <title>Node ORM framework Prisma Quick Start</title>
      <link>https://www.sobyte.net/post/2022-01/prisma-introduction/</link>
      <pubDate>Sun, 09 Jan 2022 11:16:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/prisma-introduction/</guid>
      <description>Introduction Prisma is an open source, next-generation ORM that contains the following components. Prisma Client : auto-generated, type-safe query builder for Node.js and TypeScript Prisma Migrate : data migration system Prisma Studio : Graphical interface for querying and editing data in the database The Prisma client can be used in any Node.js or TypeScript backend application (including Serverless applications and microservices). It can be a REST API, a GraphQL API,</description>
    </item>
    
    <item>
      <title>NodeJs-based encrypted transport for message exchange combining RSA and AES encryption algorithms</title>
      <link>https://www.sobyte.net/post/2021-09/message-encrypt-and-decrypt-by-nodejs/</link>
      <pubDate>Thu, 23 Sep 2021 14:09:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/message-encrypt-and-decrypt-by-nodejs/</guid>
      <description>Sensitive message exchange has relatively strong requirements for correctness and security. Using a message digest algorithm to calculate and verify the digest of the message body prevents the message from being tampered with during transmission as an illegal message value; using an encryption algorithm to encrypt the message body prevents the message from being intercepted and read during transmission. The combination of the two can achieve a strong secure message</description>
    </item>
    
    <item>
      <title>Ways to send STMP-based emails with MS Exchange using node.js</title>
      <link>https://www.sobyte.net/post/2021-09/nodejs-stmp-exchange-email-send/</link>
      <pubDate>Wed, 22 Sep 2021 16:25:24 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/nodejs-stmp-exchange-email-send/</guid>
      <description>This article describes how node.js can send emails based on the STMP protocol and the MS Exchange Web Service (EWS) protocol. All reference code in this article is coded in TypeScript examples. STMP protocol-based approach to sending emails with node.js When it comes to sending emails using node.js, the famous Nodemailer module is basically mentioned as the first choice for sending emails using the STMP method. There are many articles</description>
    </item>
    
    <item>
      <title>System information gathering and performance monitoring in Electron applications</title>
      <link>https://www.sobyte.net/post/2021-09/electron-app-sysinfo-stats/</link>
      <pubDate>Wed, 22 Sep 2021 15:58:03 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/electron-app-sysinfo-stats/</guid>
      <description>When analyzing problems with Electron applications, relevant system operation information is sometimes essential, so naturally there is a need for system base information collection and operation performance monitoring. The native capabilities in Electron are based on Node.js, so most of the system data collection for Electron applications is based on the capabilities provided by Node.js. In Node.js applications, various system-related information can be obtained mainly through the process and os</description>
    </item>
    
    <item>
      <title>Critical vulnerability in NPM package, downloaded over 3 million times per week, has affected many Node.js applications</title>
      <link>https://www.sobyte.net/post/2021-09/npm-package-had-a-severe-vulnerability/</link>
      <pubDate>Wed, 08 Sep 2021 19:28:08 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/npm-package-had-a-severe-vulnerability/</guid>
      <description>&amp;ldquo;pac-resolver&amp;rdquo; is a very popular NPM package, with over 3 million downloads per week and 285,000 public dependency repositories on GitHub. The developers of this package have recently released a patch to fix a vulnerability that could affect many Node.js applications with Remote Code Execution (RCE).
Developer Tim Perry disclosed a high-risk vulnerability in the pac-resolver dependency this week, noting that it could allow an attacker on the local network to remotely run malicious code in the Node.</description>
    </item>
    
    <item>
      <title>Node Event Loop</title>
      <link>https://www.sobyte.net/post/2021-08/node-event-loop/</link>
      <pubDate>Mon, 09 Aug 2021 11:30:44 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-08/node-event-loop/</guid>
      <description>JavaScript is single-threaded and asynchronous operations are particularly important.
Whenever you use functions outside the engine, you need to interact with the outside world, thus creating asynchronous operations. Because there are so many asynchronous operations, JavaScript has to provide a lot of asynchronous syntax. It&amp;rsquo;s like, some people get hit all the time, and they have to become very resilient, or they&amp;rsquo;re screwed.
Node&amp;rsquo;s asynchronous syntax is more complex than the browser&amp;rsquo;s, because it talks to the kernel and has to make a special library, libuv, to do this.</description>
    </item>
    
  </channel>
</rss>
