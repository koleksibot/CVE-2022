<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-cloud-feign on SoByte</title>
    <link>https://www.sobyte.net/tags/spring-cloud-feign/</link>
    <description>Recent content in spring-cloud-feign on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Jul 2021 16:55:40 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/spring-cloud-feign/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes on the Use of Feign and Restful Design Specifications</title>
      <link>https://www.sobyte.net/post/2021-07/notes-on-the-use-of-feign-and-restful-design-specifications/</link>
      <pubDate>Thu, 01 Jul 2021 16:55:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/notes-on-the-use-of-feign-and-restful-design-specifications/</guid>
      <description>I recently used Spring Cloud Feign as an HTTP client in a lot of projects, and encountered a lot of pitfalls, and also generated some ideas about RESTFUL design, which I&amp;rsquo;d like to document here.
SpringMVC&amp;rsquo;s request parameter binding mechanism Users who know the history of Feign will know that Feign itself is a Netflix product, Spring Cloud Feign is based on the native Feign encapsulation, the introduction of a large number of SpringMVC annotation support, making it easier to use by the majority of Spring users, but also produced a not small confusing effect.</description>
    </item>
    
  </channel>
</rss>
